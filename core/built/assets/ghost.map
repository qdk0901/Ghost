{"version":3,"sources":["vendor/ember-cli/app-prefix.js","ghost/adapters/application.js","ghost/adapters/base.js","ghost/adapters/embedded-relation-adapter.js","ghost/adapters/setting.js","ghost/adapters/user.js","ghost/app.js","ghost/assets/lib/uploader.js","ghost/components/gh-activating-list-item.js","ghost/components/gh-alert.js","ghost/components/gh-alerts.js","ghost/components/gh-blog-url.js","ghost/components/gh-cm-editor.js","ghost/components/gh-content-cover.js","ghost/components/gh-dropdown-button.js","ghost/components/gh-dropdown.js","ghost/components/gh-ed-editor.js","ghost/components/gh-ed-preview.js","ghost/components/gh-file-upload.js","ghost/components/gh-form.js","ghost/components/gh-input.js","ghost/components/gh-main.js","ghost/components/gh-menu-toggle.js","ghost/components/gh-modal-dialog.js","ghost/components/gh-nav-menu.js","ghost/components/gh-navitem-url-input.js","ghost/components/gh-navitem.js","ghost/components/gh-notification.js","ghost/components/gh-notifications.js","ghost/components/gh-popover-button.js","ghost/components/gh-popover.js","ghost/components/gh-role-selector.js","ghost/components/gh-select.js","ghost/components/gh-tab-pane.js","ghost/components/gh-tab.js","ghost/components/gh-tabs-manager.js","ghost/components/gh-textarea.js","ghost/components/gh-trim-focus-input.js","ghost/components/gh-upload-modal.js","ghost/components/gh-uploader.js","ghost/components/gh-url-preview.js","ghost/components/gh-view-title.js","ghost/controllers/about.js","ghost/controllers/application.js","ghost/controllers/editor/edit.js","ghost/controllers/editor/new.js","ghost/controllers/error.js","ghost/controllers/feature.js","ghost/controllers/modals/copy-html.js","ghost/controllers/modals/delete-all.js","ghost/controllers/modals/delete-post.js","ghost/controllers/modals/delete-tag.js","ghost/controllers/modals/delete-user.js","ghost/controllers/modals/invite-new-user.js","ghost/controllers/modals/leave-editor.js","ghost/controllers/modals/signin.js","ghost/controllers/modals/transfer-owner.js","ghost/controllers/modals/upload.js","ghost/controllers/post-settings-menu.js","ghost/controllers/post-tags-input.js","ghost/controllers/posts.js","ghost/controllers/posts/post.js","ghost/controllers/reset.js","ghost/controllers/settings/app.js","ghost/controllers/settings/code-injection.js","ghost/controllers/settings/general.js","ghost/controllers/settings/labs.js","ghost/controllers/settings/navigation.js","ghost/controllers/settings/tags.js","ghost/controllers/setup.js","ghost/controllers/setup/three.js","ghost/controllers/setup/two.js","ghost/controllers/signin.js","ghost/controllers/signup.js","ghost/controllers/team/index.js","ghost/controllers/team/user.js","ghost/helpers/gh-count-characters.js","ghost/helpers/gh-count-down-characters.js","ghost/helpers/gh-count-words.js","ghost/helpers/gh-format-html.js","ghost/helpers/gh-format-markdown.js","ghost/helpers/gh-format-timeago.js","ghost/helpers/gh-path.js","ghost/helpers/gh-user-can.js","ghost/initializers/app-version.js","ghost/initializers/ember-cli-fastclick.js","ghost/initializers/export-application-global.js","ghost/initializers/simple-auth-env.js","ghost/initializers/simple-auth-oauth2.js","ghost/initializers/simple-auth.js","ghost/initializers/store-injector.js","ghost/initializers/trailing-history.js","ghost/instance-initializers/authentication.js","ghost/mixins/body-event-listener.js","ghost/mixins/current-user-settings.js","ghost/mixins/dropdown-mixin.js","ghost/mixins/ed-editor-api.js","ghost/mixins/ed-editor-scroll.js","ghost/mixins/ed-editor-shortcuts.js","ghost/mixins/editor-base-controller.js","ghost/mixins/editor-base-route.js","ghost/mixins/pagination-controller.js","ghost/mixins/pagination-route.js","ghost/mixins/pagination-view-infinite-scroll.js","ghost/mixins/settings-menu-controller.js","ghost/mixins/shortcuts-route.js","ghost/mixins/style-body.js","ghost/mixins/text-input.js","ghost/mixins/validation-engine.js","ghost/models/notification.js","ghost/models/post.js","ghost/models/role.js","ghost/models/setting.js","ghost/models/slug-generator.js","ghost/models/tag.js","ghost/models/user.js","ghost/router.js","ghost/routes/about.js","ghost/routes/application.js","ghost/routes/authenticated.js","ghost/routes/editor/edit.js","ghost/routes/editor/index.js","ghost/routes/editor/new.js","ghost/routes/error404.js","ghost/routes/mobile-index-route.js","ghost/routes/posts.js","ghost/routes/posts/index.js","ghost/routes/posts/post.js","ghost/routes/reset.js","ghost/routes/settings/apps.js","ghost/routes/settings/code-injection.js","ghost/routes/settings/general.js","ghost/routes/settings/labs.js","ghost/routes/settings/navigation.js","ghost/routes/settings/tags.js","ghost/routes/setup.js","ghost/routes/setup/index.js","ghost/routes/setup/one.js","ghost/routes/signin.js","ghost/routes/signout.js","ghost/routes/signup.js","ghost/routes/team/index.js","ghost/routes/team/user.js","ghost/serializers/application.js","ghost/serializers/post.js","ghost/serializers/setting.js","ghost/serializers/tag.js","ghost/serializers/user.js","ghost/services/config.js","ghost/services/dropdown.js","ghost/services/ghost-paths.js","ghost/services/notifications.js","ghost/templates/-contributors.js","ghost/templates/-import-errors.js","ghost/templates/-publish-bar.js","ghost/templates/-user-actions-menu.js","ghost/templates/about.js","ghost/templates/application.js","ghost/templates/components/gh-activating-list-item.js","ghost/templates/components/gh-alert.js","ghost/templates/components/gh-alerts.js","ghost/templates/components/gh-blog-url.js","ghost/templates/components/gh-ed-preview.js","ghost/templates/components/gh-file-upload.js","ghost/templates/components/gh-menu-toggle.js","ghost/templates/components/gh-modal-dialog.js","ghost/templates/components/gh-nav-menu.js","ghost/templates/components/gh-navitem.js","ghost/templates/components/gh-notification.js","ghost/templates/components/gh-notifications.js","ghost/templates/components/gh-role-selector.js","ghost/templates/components/gh-uploader.js","ghost/templates/components/gh-url-preview.js","ghost/templates/components/gh-view-title.js","ghost/templates/editor-save-button.js","ghost/templates/editor/edit.js","ghost/templates/error.js","ghost/templates/modals/copy-html.js","ghost/templates/modals/delete-all.js","ghost/templates/modals/delete-post.js","ghost/templates/modals/delete-tag.js","ghost/templates/modals/delete-user.js","ghost/templates/modals/invite-new-user.js","ghost/templates/modals/leave-editor.js","ghost/templates/modals/markdown.js","ghost/templates/modals/signin.js","ghost/templates/modals/transfer-owner.js","ghost/templates/modals/upload.js","ghost/templates/post-settings-menu.js","ghost/templates/post-tags-input.js","ghost/templates/posts.js","ghost/templates/posts/index.js","ghost/templates/posts/post.js","ghost/templates/reset.js","ghost/templates/settings/apps.js","ghost/templates/settings/code-injection.js","ghost/templates/settings/general.js","ghost/templates/settings/labs.js","ghost/templates/settings/navigation.js","ghost/templates/settings/tags.js","ghost/templates/settings/tags/settings-menu.js","ghost/templates/setup.js","ghost/templates/setup/one.js","ghost/templates/setup/three.js","ghost/templates/setup/two.js","ghost/templates/signin.js","ghost/templates/signup.js","ghost/templates/team/index.js","ghost/templates/team/user.js","ghost/tests/helpers/resolver.js","ghost/tests/helpers/start-app.js","ghost/tests/test-helper.js","ghost/tests/unit/components/gh-trim-focus-input_test.js","ghost/tests/unit/components/gh-url-preview_test.js","ghost/tests/unit/controllers/post-settings-menu_test.js","ghost/tests/unit/controllers/settings-general_test.js","ghost/tests/unit/helpers/gh-user-can-test.js","ghost/tests/unit/models/post_test.js","ghost/tests/unit/models/role_test.js","ghost/tests/unit/models/setting_test.js","ghost/tests/unit/models/tag_test.js","ghost/tests/unit/models/user_test.js","ghost/tests/unit/utils/ghost-paths_test.js","ghost/transforms/moment-date.js","ghost/utils/ajax.js","ghost/utils/bind.js","ghost/utils/bound-one-way.js","ghost/utils/caja-sanitizers.js","ghost/utils/ctrl-or-cmd.js","ghost/utils/date-formatting.js","ghost/utils/document-title.js","ghost/utils/ed-image-manager.js","ghost/utils/editor-shortcuts.js","ghost/utils/ghost-paths.js","ghost/utils/isFinite.js","ghost/utils/isNumber.js","ghost/utils/link-view.js","ghost/utils/mobile.js","ghost/utils/random-password.js","ghost/utils/set-scroll-classname.js","ghost/utils/text-field.js","ghost/utils/titleize.js","ghost/utils/validator-extensions.js","ghost/utils/word-count.js","ghost/validators/new-user.js","ghost/validators/post.js","ghost/validators/reset.js","ghost/validators/setting.js","ghost/validators/setup.js","ghost/validators/signin.js","ghost/validators/signup.js","ghost/validators/tag-settings.js","ghost/validators/user.js","ghost/views/application.js","ghost/views/content-preview-content-view.js","ghost/views/editor-save-button.js","ghost/views/editor/edit.js","ghost/views/editor/new.js","ghost/views/paginated-scroll-box.js","ghost/views/post-item-view.js","ghost/views/post-tags-input.js","ghost/views/posts/index.js","ghost/views/settings/apps.js","ghost/views/settings/code-injection.js","ghost/views/settings/content-base.js","ghost/views/settings/general.js","ghost/views/settings/labs.js","ghost/views/settings/navigation.js","ghost/views/settings/tags.js","ghost/views/settings/tags/settings-menu.js","ghost/views/team/index.js","ghost/views/team/user.js","ghost/views/users-list.js","vendor/ember-cli/app-suffix.js","vendor/ember-cli/app-boot.js"],"sourcesContent":["/* jshint ignore:start */\n\n/* jshint ignore:end */\n","define('ghost/adapters/application', ['exports', 'ghost/adapters/embedded-relation-adapter'], function (exports, EmbeddedRelationAdapter) {\n\n\t'use strict';\n\n\tvar ApplicationAdapter = EmbeddedRelationAdapter['default'].extend();\n\n\texports['default'] = ApplicationAdapter;\n\n});","define('ghost/adapters/base', ['exports', 'ember-data', 'ghost/utils/ghost-paths'], function (exports, DS, ghostPaths) {\n\n    'use strict';\n\n    var BaseAdapter = DS['default'].RESTAdapter.extend({\n        host: window.location.origin,\n        namespace: ghostPaths['default']().apiRoot.slice(1),\n\n        findQuery: function findQuery(store, type, query) {\n            var id;\n\n            if (query.id) {\n                id = query.id;\n                delete query.id;\n            }\n\n            return this.ajax(this.buildURL(type.modelName, id), 'GET', { data: query });\n        },\n\n        buildURL: function buildURL(type, id) {\n            // Ensure trailing slashes\n            var url = this._super(type, id);\n\n            if (url.slice(-1) !== '/') {\n                url += '/';\n            }\n\n            return url;\n        },\n\n        // Override deleteRecord to disregard the response body on 2xx responses.\n        // This is currently needed because the API is returning status 200 along\n        // with the JSON object for the deleted entity and Ember expects an empty\n        // response body for successful DELETEs.\n        // Non-2xx (failure) responses will still work correctly as Ember will turn\n        // them into rejected promises.\n        deleteRecord: function deleteRecord() {\n            var response = this._super.apply(this, arguments);\n\n            return response.then(function () {\n                return null;\n            });\n        }\n    });\n\n    exports['default'] = BaseAdapter;\n\n});","define('ghost/adapters/embedded-relation-adapter', ['exports', 'ember', 'ghost/adapters/base'], function (exports, Ember, BaseAdapter) {\n\n    'use strict';\n\n    var EmbeddedRelationAdapter = BaseAdapter['default'].extend({\n        find: function find(store, type, id) {\n            return this.ajax(this.buildIncludeURL(store, type, id), 'GET');\n        },\n\n        findQuery: function findQuery(store, type, query) {\n            return this._super(store, type, this.buildQuery(store, type, query));\n        },\n\n        findAll: function findAll(store, type, sinceToken) {\n            var query = {};\n\n            if (sinceToken) {\n                query.since = sinceToken;\n            }\n\n            return this.findQuery(store, type, query);\n        },\n\n        createRecord: function createRecord(store, type, record) {\n            return this.saveRecord(store, type, record, { method: 'POST' });\n        },\n\n        updateRecord: function updateRecord(store, type, record) {\n            var options = {\n                method: 'PUT',\n                id: Ember['default'].get(record, 'id')\n            };\n\n            return this.saveRecord(store, type, record, options);\n        },\n\n        saveRecord: function saveRecord(store, type, record, options) {\n            options = options || {};\n\n            var url = this.buildIncludeURL(store, type, options.id),\n                payload = this.preparePayload(store, type, record);\n\n            return this.ajax(url, options.method, payload);\n        },\n\n        preparePayload: function preparePayload(store, type, record) {\n            var serializer = store.serializerFor(type.modelName),\n                payload = {};\n\n            serializer.serializeIntoHash(payload, type, record);\n\n            return { data: payload };\n        },\n\n        buildIncludeURL: function buildIncludeURL(store, type, id) {\n            var url = this.buildURL(type.modelName, id),\n                includes = this.getEmbeddedRelations(store, type);\n\n            if (includes.length) {\n                url += '?include=' + includes.join(',');\n            }\n\n            return url;\n        },\n\n        buildQuery: function buildQuery(store, type, options) {\n            var toInclude = this.getEmbeddedRelations(store, type),\n                query = options || {},\n                deDupe = {};\n\n            if (toInclude.length) {\n                // If this is a find by id, build a query object and attach the includes\n                if (typeof options === 'string' || typeof options === 'number') {\n                    query = {};\n                    query.id = options;\n                    query.include = toInclude.join(',');\n                } else if (typeof options === 'object' || Ember['default'].isNone(options)) {\n                    // If this is a find all (no existing query object) build one and attach\n                    // the includes.\n                    // If this is a find with an existing query object then merge the includes\n                    // into the existing object. Existing properties and includes are preserved.\n                    query = query || {};\n                    toInclude = toInclude.concat(query.include ? query.include.split(',') : []);\n\n                    toInclude.forEach(function (include) {\n                        deDupe[include] = true;\n                    });\n\n                    query.include = Object.keys(deDupe).join(',');\n                }\n            }\n\n            return query;\n        },\n\n        getEmbeddedRelations: function getEmbeddedRelations(store, type) {\n            var model = store.modelFor(type),\n                ret = [];\n\n            // Iterate through the model's relationships and build a list\n            // of those that need to be pulled in via \"include\" from the API\n            model.eachRelationship(function (name, meta) {\n                if (meta.kind === 'hasMany' && Object.prototype.hasOwnProperty.call(meta.options, 'embedded') && meta.options.embedded === 'always') {\n                    ret.push(name);\n                }\n            });\n\n            return ret;\n        }\n    });\n\n    exports['default'] = EmbeddedRelationAdapter;\n\n});","define('ghost/adapters/setting', ['exports', 'ghost/adapters/application'], function (exports, ApplicationAdapter) {\n\n    'use strict';\n\n    var SettingAdapter = ApplicationAdapter['default'].extend({\n        updateRecord: function updateRecord(store, type, record) {\n            var data = {},\n                serializer = store.serializerFor(type.modelName);\n\n            // remove the fake id that we added onto the model.\n            delete record.id;\n\n            // use the SettingSerializer to transform the model back into\n            // an array of settings objects like the API expects\n            serializer.serializeIntoHash(data, type, record);\n\n            // use the ApplicationAdapter's buildURL method but do not\n            // pass in an id.\n            return this.ajax(this.buildURL(type.modelName), 'PUT', { data: data });\n        }\n    });\n\n    exports['default'] = SettingAdapter;\n\n});","define('ghost/adapters/user', ['exports', 'ghost/adapters/application'], function (exports, ApplicationAdapter) {\n\n    'use strict';\n\n    var UserAdapter = ApplicationAdapter['default'].extend({\n        find: function find(store, type, id) {\n            return this.findQuery(store, type, { id: id, status: 'all' });\n        }\n    });\n\n    exports['default'] = UserAdapter;\n\n});","define('ghost/app', ['exports', 'ember', 'ember/resolver', 'ember/load-initializers', 'ghost/utils/link-view', 'ghost/utils/text-field', 'ghost/config/environment'], function (exports, Ember, Resolver, loadInitializers, __dep3__, __dep4__, config) {\n\n    'use strict';\n\n    Ember['default'].MODEL_FACTORY_INJECTIONS = true;\n\n    var App = Ember['default'].Application.extend({\n        modulePrefix: config['default'].modulePrefix,\n        podModulePrefix: config['default'].podModulePrefix,\n        Resolver: Resolver['default']\n    });\n\n    loadInitializers['default'](App, config['default'].modulePrefix);\n\n    exports['default'] = App;\n\n});","define('ghost/assets/lib/uploader', ['exports', 'ghost/utils/ghost-paths'], function (exports, ghostPaths) {\n\n    'use strict';\n\n    var UploadUi,\n        upload,\n        Ghost = ghostPaths['default']();\n\n    UploadUi = function ($dropzone, settings) {\n        var $url = '<div class=\"js-url\"><input class=\"url js-upload-url\" type=\"url\" placeholder=\"http://\"/></div>',\n            $cancel = '<a class=\"image-cancel icon-trash js-cancel\" title=\"Delete\"><span class=\"hidden\">Delete</span></a>',\n            $progress = $('<div />', {\n            'class': 'js-upload-progress progress progress-success active',\n            role: 'progressbar',\n            'aria-valuemin': '0',\n            'aria-valuemax': '100'\n        }).append($('<div />', {\n            'class': 'js-upload-progress-bar bar',\n            style: 'width:0%'\n        }));\n\n        $.extend(this, {\n            complete: function complete(result) {\n                var self = this;\n\n                function showImage(width, height) {\n                    $dropzone.find('img.js-upload-target').attr({ width: width, height: height }).css({ display: 'block' });\n                    $dropzone.find('.fileupload-loading').remove();\n                    $dropzone.css({ height: 'auto' });\n                    $dropzone.delay(250).animate({ opacity: 100 }, 1000, function () {\n                        $('.js-button-accept').prop('disabled', false);\n                        self.init();\n                    });\n                }\n\n                function animateDropzone($img) {\n                    $dropzone.animate({ opacity: 0 }, 250, function () {\n                        $dropzone.removeClass('image-uploader').addClass('pre-image-uploader');\n                        $dropzone.css({ minHeight: 0 });\n                        self.removeExtras();\n                        $dropzone.animate({ height: $img.height() }, 250, function () {\n                            showImage($img.width(), $img.height());\n                        });\n                    });\n                }\n\n                function preLoadImage() {\n                    var $img = $dropzone.find('img.js-upload-target').attr({ src: '', width: 'auto', height: 'auto' });\n\n                    $progress.animate({ opacity: 0 }, 250, function () {\n                        $dropzone.find('span.media').after('<img class=\"fileupload-loading\"  src=\"' + Ghost.subdir + '/ghost/img/loadingcat.gif\" />');\n                        if (!settings.editor) {\n                            $progress.find('.fileupload-loading').css({ top: '56px' });\n                        }\n                    });\n                    $dropzone.trigger('uploadsuccess', [result]);\n                    $img.one('load', function () {\n                        animateDropzone($img);\n                    }).attr('src', result);\n                }\n                preLoadImage();\n            },\n\n            bindFileUpload: function bindFileUpload() {\n                var self = this;\n\n                $dropzone.find('.js-fileupload').fileupload().fileupload('option', {\n                    url: Ghost.apiRoot + '/uploads/',\n                    add: function add(e, data) {\n                        /*jshint unused:false*/\n                        $('.js-button-accept').prop('disabled', true);\n                        $dropzone.find('.js-fileupload').removeClass('right');\n                        $dropzone.find('.js-url').remove();\n                        $progress.find('.js-upload-progress-bar').removeClass('fail');\n                        $dropzone.trigger('uploadstart', [$dropzone.attr('id')]);\n                        $dropzone.find('span.media, div.description, a.image-url, a.image-webcam').animate({ opacity: 0 }, 250, function () {\n                            $dropzone.find('div.description').hide().css({ opacity: 100 });\n                            if (settings.progressbar) {\n                                $dropzone.find('div.js-fail').after($progress);\n                                $progress.animate({ opacity: 100 }, 250);\n                            }\n                            data.submit();\n                        });\n                    },\n                    dropZone: settings.fileStorage ? $dropzone : null,\n                    progressall: function progressall(e, data) {\n                        /*jshint unused:false*/\n                        var progress = parseInt(data.loaded / data.total * 100, 10);\n                        if (!settings.editor) {\n                            $progress.find('div.js-progress').css({ position: 'absolute', top: '40px' });\n                        }\n                        if (settings.progressbar) {\n                            $dropzone.trigger('uploadprogress', [progress, data]);\n                            $progress.find('.js-upload-progress-bar').css('width', progress + '%');\n                        }\n                    },\n                    fail: function fail(e, data) {\n                        /*jshint unused:false*/\n                        $('.js-button-accept').prop('disabled', false);\n                        $dropzone.trigger('uploadfailure', [data.result]);\n                        $dropzone.find('.js-upload-progress-bar').addClass('fail');\n                        if (data.jqXHR.status === 413) {\n                            $dropzone.find('div.js-fail').text('The image you uploaded was larger than the maximum file size your server allows.');\n                        } else if (data.jqXHR.status === 415) {\n                            $dropzone.find('div.js-fail').text('The image type you uploaded is not supported. Please use .PNG, .JPG, .GIF, .SVG.');\n                        } else {\n                            $dropzone.find('div.js-fail').text('Something went wrong :(');\n                        }\n                        $dropzone.find('div.js-fail, button.js-fail').fadeIn(1500);\n                        $dropzone.find('button.js-fail').on('click', function () {\n                            $dropzone.css({ minHeight: 0 });\n                            $dropzone.find('div.description').show();\n                            self.removeExtras();\n                            self.init();\n                        });\n                    },\n                    done: function done(e, data) {\n                        /*jshint unused:false*/\n                        self.complete(data.result);\n                    }\n                });\n            },\n\n            buildExtras: function buildExtras() {\n                if (!$dropzone.find('span.media')[0]) {\n                    $dropzone.prepend('<span class=\"media\"><span class=\"hidden\">Image Upload</span></span>');\n                }\n                if (!$dropzone.find('div.description')[0]) {\n                    $dropzone.append('<div class=\"description\">Add image</div>');\n                }\n                if (!$dropzone.find('div.js-fail')[0]) {\n                    $dropzone.append('<div class=\"js-fail failed\" style=\"display: none\">Something went wrong :(</div>');\n                }\n                if (!$dropzone.find('button.js-fail')[0]) {\n                    $dropzone.append('<button class=\"js-fail btn btn-green\" style=\"display: none\">Try Again</button>');\n                }\n                if (!$dropzone.find('a.image-url')[0]) {\n                    $dropzone.append('<a class=\"image-url\" title=\"Add image from URL\"><i class=\"icon-link\"><span class=\"hidden\">URL</span></i></a>');\n                }\n                // if (!$dropzone.find('a.image-webcam')[0]) {\n                //     $dropzone.append('<a class=\"image-webcam\" title=\"Add image from webcam\"><span class=\"hidden\">Webcam</span></a>');\n                // }\n            },\n\n            removeExtras: function removeExtras() {\n                $dropzone.find('span.media, div.js-upload-progress, a.image-url, a.image-upload, a.image-webcam, div.js-fail, button.js-fail, a.js-cancel').remove();\n            },\n\n            initWithDropzone: function initWithDropzone() {\n                var self = this;\n\n                // This is the start point if no image exists\n                $dropzone.find('img.js-upload-target').css({ display: 'none' });\n                $dropzone.find('div.description').show();\n                $dropzone.removeClass('pre-image-uploader image-uploader-url').addClass('image-uploader');\n                this.removeExtras();\n                this.buildExtras();\n                this.bindFileUpload();\n                if (!settings.fileStorage) {\n                    self.initUrl();\n                    return;\n                }\n                $dropzone.find('a.image-url').on('click', function () {\n                    self.initUrl();\n                });\n            },\n            initUrl: function initUrl() {\n                var self = this,\n                    val;\n                this.removeExtras();\n                $dropzone.addClass('image-uploader-url').removeClass('pre-image-uploader');\n                $dropzone.find('.js-fileupload').addClass('right');\n                if (settings.fileStorage) {\n                    $dropzone.append($cancel);\n                }\n                $dropzone.find('.js-cancel').on('click', function () {\n                    $dropzone.find('.js-url').remove();\n                    $dropzone.find('.js-fileupload').removeClass('right');\n                    $dropzone.trigger('imagecleared');\n                    self.removeExtras();\n                    self.initWithDropzone();\n                });\n\n                $dropzone.find('div.description').before($url);\n\n                if (settings.editor) {\n                    $dropzone.find('div.js-url').append('<button class=\"btn btn-blue js-button-accept\">Save</button>');\n                }\n\n                $dropzone.find('.js-button-accept').on('click', function () {\n                    val = $dropzone.find('.js-upload-url').val();\n                    $dropzone.find('div.description').hide();\n                    $dropzone.find('.js-fileupload').removeClass('right');\n                    $dropzone.find('.js-url').remove();\n                    if (val === '') {\n                        $dropzone.trigger('uploadsuccess', 'http://');\n                        self.initWithDropzone();\n                    } else {\n                        self.complete(val);\n                    }\n                });\n\n                // Only show the toggle icon if there is a dropzone mode to go back to\n                if (settings.fileStorage !== false) {\n                    $dropzone.append('<a class=\"image-upload\" title=\"Add image\"><span class=\"hidden\">Upload</span></a>');\n                }\n\n                $dropzone.find('a.image-upload').on('click', function () {\n                    $dropzone.find('.js-url').remove();\n                    $dropzone.find('.js-fileupload').removeClass('right');\n                    self.initWithDropzone();\n                });\n            },\n\n            initWithImage: function initWithImage() {\n                var self = this;\n\n                // This is the start point if an image already exists\n                $dropzone.removeClass('image-uploader image-uploader-url').addClass('pre-image-uploader');\n                $dropzone.find('div.description').hide();\n                $dropzone.find('img.js-upload-target').show();\n                $dropzone.append($cancel);\n                $dropzone.find('.js-cancel').on('click', function () {\n                    $dropzone.find('img.js-upload-target').attr({ src: '' });\n                    $dropzone.find('div.description').show();\n                    $dropzone.trigger('imagecleared');\n                    $dropzone.delay(2500).animate({ opacity: 100 }, 1000, function () {\n                        self.init();\n                    });\n\n                    $dropzone.trigger('uploadsuccess', 'http://');\n                    self.initWithDropzone();\n                });\n            },\n\n            init: function init() {\n                var imageTarget = $dropzone.find('img.js-upload-target');\n                // First check if field image is defined by checking for js-upload-target class\n                if (!imageTarget[0]) {\n                    // This ensures there is an image we can hook into to display uploaded image\n                    $dropzone.prepend('<img class=\"js-upload-target\" style=\"display: none\"  src=\"\" />');\n                }\n                $('.js-button-accept').prop('disabled', false);\n                if (imageTarget.attr('src') === '' || imageTarget.attr('src') === undefined) {\n                    this.initWithDropzone();\n                } else {\n                    this.initWithImage();\n                }\n            },\n\n            reset: function reset() {\n                $dropzone.find('.js-url').remove();\n                $dropzone.find('.js-fileupload').removeClass('right');\n                this.removeExtras();\n                this.initWithDropzone();\n            }\n        });\n    };\n\n    upload = function (options) {\n        var settings = $.extend({\n            progressbar: true,\n            editor: false,\n            fileStorage: true\n        }, options);\n\n        return this.each(function () {\n            var $dropzone = $(this),\n                ui;\n\n            ui = new UploadUi($dropzone, settings);\n            this.uploaderUi = ui;\n            ui.init();\n        });\n    };\n\n    exports['default'] = upload;\n\n});","define('ghost/components/gh-activating-list-item', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Component.extend({\n        tagName: 'li',\n        classNameBindings: ['active'],\n        active: false,\n        linkClasses: null,\n\n        unfocusLink: (function () {\n            this.$('a').blur();\n        }).on('click')\n    });\n\n});","define('ghost/components/gh-alert', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Component.extend({\n        tagName: 'article',\n        classNames: ['gh-alert', 'gh-alert-blue'],\n        classNameBindings: ['typeClass'],\n\n        notifications: Ember['default'].inject.service(),\n\n        typeClass: Ember['default'].computed(function () {\n            var classes = '',\n                message = this.get('message'),\n                type,\n                dismissible;\n\n            // Check to see if we're working with a DS.Model or a plain JS object\n            if (typeof message.toJSON === 'function') {\n                type = message.get('type');\n                dismissible = message.get('dismissible');\n            } else {\n                type = message.type;\n                dismissible = message.dismissible;\n            }\n\n            classes += 'notification-' + type;\n\n            if (type === 'success' && dismissible !== false) {\n                classes += ' notification-passive';\n            }\n\n            return classes;\n        }),\n\n        actions: {\n            closeNotification: function closeNotification() {\n                this.get('notifications').closeNotification(this.get('message'));\n            }\n        }\n    });\n\n});","define('ghost/components/gh-alerts', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    var AlertsComponent = Ember['default'].Component.extend({\n        tagName: 'aside',\n        classNames: 'gh-alerts',\n\n        messages: Ember['default'].computed.filter('notifications', function (notification) {\n            var displayStatus = typeof notification.toJSON === 'function' ? notification.get('status') : notification.status;\n\n            return displayStatus === 'persistent';\n        }),\n\n        messageCountObserver: Ember['default'].observer('messages.[]', function () {\n            this.sendAction('notify', this.get('messages').length);\n        })\n    });\n\n    exports['default'] = AlertsComponent;\n\n});","define('ghost/components/gh-blog-url', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    var blogUrl = Ember['default'].Component.extend({\n        tagName: '',\n        config: Ember['default'].inject.service()\n    });\n\n    exports['default'] = blogUrl;\n\n});","define('ghost/components/gh-cm-editor', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    /* global CodeMirror */\n    var CodeMirrorEditor = Ember['default'].Component.extend({\n\n        // DOM stuff\n        classNameBindings: ['isFocused:focused'],\n        isFocused: false,\n\n        value: '', // make sure a value exists\n        editor: null, // reference to CodeMirror editor\n\n        // options for the editor\n        lineNumbers: true,\n        indentUnit: 4,\n        mode: 'htmlmixed',\n        theme: 'xq-light',\n\n        didInsertElement: function didInsertElement() {\n            var options = this.getProperties('lineNumbers', 'indentUnit', 'mode', 'theme'),\n                self = this,\n                editor;\n            editor = new CodeMirror(this.get('element'), options);\n            editor.getDoc().setValue(this.get('value'));\n\n            // events\n            editor.on('focus', function () {\n                self.set('isFocused', true);\n            });\n            editor.on('blur', function () {\n                self.set('isFocused', false);\n            });\n            editor.on('change', function () {\n                self.set('value', editor.getDoc().getValue());\n            });\n\n            this.set('editor', editor);\n        },\n\n        willDestroyElement: function willDestroyElement() {\n            var editor = this.get('editor').getWrapperElement();\n            editor.parentNode.removeChild(editor);\n            this.set('editor', null);\n        }\n\n    });\n\n    exports['default'] = CodeMirrorEditor;\n\n});","define('ghost/components/gh-content-cover', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    /*\n\n    Implements a div for covering the page content\n    when in a menu context that, for example,\n    should be closed when the user clicks elsewhere.\n\n    Example:\n    ```\n    {{gh-content-cover onClick=\"closeMenus\" onMouseEnter=\"closeAutoNav\"}}\n    ```\n    **/\n\n    exports['default'] = Ember['default'].Component.extend({\n        classNames: ['content-cover'],\n\n        onClick: null,\n        onMouseEnter: null,\n\n        click: function click() {\n            this.sendAction('onClick');\n        },\n\n        mouseEnter: function mouseEnter() {\n            this.sendAction('onMouseEnter');\n        }\n    });\n\n});","define('ghost/components/gh-dropdown-button', ['exports', 'ember', 'ghost/mixins/dropdown-mixin'], function (exports, Ember, DropdownMixin) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Component.extend(DropdownMixin['default'], {\n        tagName: 'button',\n        attributeBindings: 'role',\n        role: 'button',\n\n        // matches with the dropdown this button toggles\n        dropdownName: null,\n\n        dropdown: Ember['default'].inject.service(),\n\n        // Notify dropdown service this dropdown should be toggled\n        click: function click(event) {\n            this._super(event);\n            this.get('dropdown').toggleDropdown(this.get('dropdownName'), this);\n        }\n    });\n\n});","define('ghost/components/gh-dropdown', ['exports', 'ember', 'ghost/mixins/dropdown-mixin'], function (exports, Ember, DropdownMixin) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Component.extend(DropdownMixin['default'], {\n        classNames: 'ghost-dropdown',\n        classNameBindings: ['fadeIn:fade-in-scale:fade-out', 'isOpen:open:closed'],\n\n        name: null,\n        closeOnClick: false,\n\n        // Helps track the user re-opening the menu while it's fading out.\n        closing: false,\n\n        // Helps track whether the dropdown is open or closes, or in a transition to either\n        isOpen: false,\n\n        // Managed the toggle between the fade-in and fade-out classes\n        fadeIn: Ember['default'].computed('isOpen', 'closing', function () {\n            return this.get('isOpen') && !this.get('closing');\n        }),\n\n        dropdown: Ember['default'].inject.service(),\n\n        open: function open() {\n            this.set('isOpen', true);\n            this.set('closing', false);\n            this.set('button.isOpen', true);\n        },\n\n        close: function close() {\n            var self = this;\n\n            this.set('closing', true);\n\n            if (this.get('button')) {\n                this.set('button.isOpen', false);\n            }\n            this.$().on('animationend webkitAnimationEnd oanimationend MSAnimationEnd', function (event) {\n                if (event.originalEvent.animationName === 'fade-out') {\n                    if (self.get('closing')) {\n                        self.set('isOpen', false);\n                        self.set('closing', false);\n                    }\n                }\n            });\n        },\n\n        // Called by the dropdown service when any dropdown button is clicked.\n        toggle: function toggle(options) {\n            var isClosing = this.get('closing'),\n                isOpen = this.get('isOpen'),\n                name = this.get('name'),\n                button = this.get('button'),\n                targetDropdownName = options.target;\n\n            if (name === targetDropdownName && (!isOpen || isClosing)) {\n                if (!button) {\n                    button = options.button;\n                    this.set('button', button);\n                }\n                this.open();\n            } else if (isOpen) {\n                this.close();\n            }\n        },\n\n        click: function click(event) {\n            this._super(event);\n\n            if (this.get('closeOnClick')) {\n                return this.close();\n            }\n        },\n\n        didInsertElement: function didInsertElement() {\n            this._super();\n\n            var dropdownService = this.get('dropdown');\n\n            dropdownService.on('close', this, this.close);\n            dropdownService.on('toggle', this, this.toggle);\n        },\n\n        willDestroyElement: function willDestroyElement() {\n            this._super();\n\n            var dropdownService = this.get('dropdown');\n\n            dropdownService.off('close', this, this.close);\n            dropdownService.off('toggle', this, this.toggle);\n        }\n    });\n\n});","define('ghost/components/gh-ed-editor', ['exports', 'ember', 'ghost/mixins/ed-editor-api', 'ghost/mixins/ed-editor-shortcuts', 'ghost/mixins/ed-editor-scroll'], function (exports, Ember, EditorAPI, EditorShortcuts, EditorScroll) {\n\n    'use strict';\n\n    var Editor;\n\n    Editor = Ember['default'].TextArea.extend(EditorAPI['default'], EditorShortcuts['default'], EditorScroll['default'], {\n        focus: false,\n\n        /**\n         * Tell the controller about focusIn events, will trigger an autosave on a new document\n         */\n        focusIn: function focusIn() {\n            this.sendAction('onFocusIn');\n        },\n\n        /**\n         * Sets the focus of the textarea if needed\n         */\n        setFocus: function setFocus() {\n            if (this.get('focus')) {\n                this.$().val(this.$().val()).focus();\n            }\n        },\n\n        /**\n         * Sets up properties at render time\n         */\n        didInsertElement: function didInsertElement() {\n            this._super();\n\n            this.setFocus();\n\n            this.sendAction('setEditor', this);\n\n            Ember['default'].run.scheduleOnce('afterRender', this, this.afterRenderEvent);\n        },\n\n        afterRenderEvent: function afterRenderEvent() {\n            if (this.get('focus') && this.get('focusCursorAtEnd')) {\n                this.setSelection('end');\n            }\n        },\n\n        /**\n         * Disable editing in the textarea (used while an upload is in progress)\n         */\n        disable: function disable() {\n            var textarea = this.get('element');\n            textarea.setAttribute('readonly', 'readonly');\n        },\n\n        /**\n         * Reenable editing in the textarea\n         */\n        enable: function enable() {\n            var textarea = this.get('element');\n            textarea.removeAttribute('readonly');\n        }\n    });\n\n    exports['default'] = Editor;\n\n});","define('ghost/components/gh-ed-preview', ['exports', 'ember', 'ghost/assets/lib/uploader'], function (exports, Ember, uploader) {\n\n    'use strict';\n\n    var Preview = Ember['default'].Component.extend({\n        config: Ember['default'].inject.service(),\n\n        didInsertElement: function didInsertElement() {\n            this.set('scrollWrapper', this.$().closest('.entry-preview-content'));\n            Ember['default'].run.scheduleOnce('afterRender', this, this.dropzoneHandler);\n        },\n\n        adjustScrollPosition: Ember['default'].observer('scrollPosition', function () {\n            var scrollWrapper = this.get('scrollWrapper'),\n                scrollPosition = this.get('scrollPosition');\n\n            scrollWrapper.scrollTop(scrollPosition);\n        }),\n\n        dropzoneHandler: function dropzoneHandler() {\n            var dropzones = $('.js-drop-zone');\n\n            uploader['default'].call(dropzones, {\n                editor: true,\n                fileStorage: this.get('config.fileStorage')\n            });\n\n            dropzones.on('uploadstart', Ember['default'].run.bind(this, 'sendAction', 'uploadStarted'));\n            dropzones.on('uploadfailure', Ember['default'].run.bind(this, 'sendAction', 'uploadFinished'));\n            dropzones.on('uploadsuccess', Ember['default'].run.bind(this, 'sendAction', 'uploadFinished'));\n            dropzones.on('uploadsuccess', Ember['default'].run.bind(this, 'sendAction', 'uploadSuccess'));\n\n            // Set the current height so we can listen\n            this.set('height', this.$().height());\n        },\n\n        // fire off 'enable' API function from uploadManager\n        // might need to make sure markdown has been processed first\n        reInitDropzones: Ember['default'].observer('markdown', function () {\n            Ember['default'].run.scheduleOnce('afterRender', this, this.dropzoneHandler);\n        })\n    });\n\n    exports['default'] = Preview;\n\n});","define('ghost/components/gh-file-upload', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    var FileUpload = Ember['default'].Component.extend({\n        _file: null,\n\n        uploadButtonText: 'Text',\n\n        uploadButtonDisabled: true,\n\n        change: function change(event) {\n            this.set('uploadButtonDisabled', false);\n            this.sendAction('onAdd');\n            this._file = event.target.files[0];\n        },\n\n        onUpload: 'onUpload',\n\n        actions: {\n            upload: function upload() {\n                if (!this.uploadButtonDisabled && this._file) {\n                    this.sendAction('onUpload', this._file);\n                }\n\n                // Prevent double post by disabling the button.\n                this.set('uploadButtonDisabled', true);\n            }\n        }\n    });\n\n    exports['default'] = FileUpload;\n\n});","define('ghost/components/gh-form', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    var Form = Ember['default'].View.extend({\n        tagName: 'form',\n        attributeBindings: ['enctype'],\n        reset: function reset() {\n            this.$().get(0).reset();\n        },\n        didInsertElement: function didInsertElement() {\n            this.get('controller').on('reset', this, this.reset);\n        },\n        willClearRender: function willClearRender() {\n            this.get('controller').off('reset', this, this.reset);\n        }\n    });\n\n    exports['default'] = Form;\n\n});","define('ghost/components/gh-input', ['exports', 'ember', 'ghost/mixins/text-input'], function (exports, Ember, TextInputMixin) {\n\n\t'use strict';\n\n\tvar Input = Ember['default'].TextField.extend(TextInputMixin['default']);\n\n\texports['default'] = Input;\n\n});","define('ghost/components/gh-main', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Component.extend({\n        tagName: 'main',\n        classNames: ['gh-main'],\n        ariaRole: 'main',\n\n        mouseEnter: function mouseEnter() {\n            this.sendAction('onMouseEnter');\n        }\n    });\n\n});","define('ghost/components/gh-menu-toggle', ['exports', 'ember', 'ghost/utils/mobile'], function (exports, Ember, mobileQuery) {\n\n    'use strict';\n\n    /*\n    This cute little component has two jobs.\n\n    On desktop, it toggles autoNav behaviour. It tracks\n    that state via the maximise property, and uses the\n    state to render the appropriate icon.\n\n    On mobile, it renders a closing icon, and clicking it\n    closes the mobile menu\n    */\n\n    exports['default'] = Ember['default'].Component.extend({\n        classNames: ['gh-menu-toggle'],\n\n        isMobile: false,\n        maximise: false,\n\n        iconClass: Ember['default'].computed('maximise', 'isMobile', function () {\n            if (this.get('maximise') && !this.get('isMobile')) {\n                return 'icon-maximise';\n            } else {\n                return 'icon-minimise';\n            }\n        }),\n\n        didInsertElement: function didInsertElement() {\n            this.set('isMobile', mobileQuery['default'].matches);\n            this.set('mqListener', Ember['default'].run.bind(this, function (mql) {\n                this.set('isMobile', mql.matches);\n            }));\n            mobileQuery['default'].addListener(this.get('mqListener'));\n        },\n\n        willDestroyElement: function willDestroyElement() {\n            mobileQuery['default'].removeListener(this.get('mqListener'));\n        },\n\n        click: function click() {\n            if (this.get('isMobile')) {\n                this.sendAction('mobileAction');\n            } else {\n                this.toggleProperty('maximise');\n                this.sendAction('desktopAction');\n            }\n        }\n    });\n\n});","define('ghost/components/gh-modal-dialog', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    var ModalDialog = Ember['default'].Component.extend({\n        didInsertElement: function didInsertElement() {\n            this.$('.js-modal-container, .js-modal-background').addClass('fade-in open');\n            this.$('.js-modal').addClass('open');\n        },\n\n        close: function close() {\n            var self = this;\n\n            this.$('.js-modal, .js-modal-background').removeClass('fade-in').addClass('fade-out');\n\n            // The background should always be the last thing to fade out, so check on that instead of the content\n            this.$('.js-modal-background').on('animationend webkitAnimationEnd oanimationend MSAnimationEnd', function (event) {\n                if (event.originalEvent.animationName === 'fade-out') {\n                    self.$('.js-modal, .js-modal-background').removeClass('open');\n                }\n            });\n\n            this.sendAction();\n        },\n\n        confirmaccept: 'confirmAccept',\n        confirmreject: 'confirmReject',\n\n        actions: {\n            closeModal: function closeModal() {\n                this.close();\n            },\n            confirm: function confirm(type) {\n                this.sendAction('confirm' + type);\n                this.close();\n            },\n            noBubble: Ember['default'].K\n        },\n\n        klass: Ember['default'].computed('type', 'style', function () {\n            var classNames = [];\n\n            classNames.push(this.get('type') ? 'modal-' + this.get('type') : 'modal');\n\n            if (this.get('style')) {\n                this.get('style').split(',').forEach(function (style) {\n                    classNames.push('modal-style-' + style);\n                });\n            }\n\n            return classNames.join(' ');\n        }),\n\n        acceptButtonClass: Ember['default'].computed('confirm.accept.buttonClass', function () {\n            return this.get('confirm.accept.buttonClass') ? this.get('confirm.accept.buttonClass') : 'btn btn-green';\n        }),\n\n        rejectButtonClass: Ember['default'].computed('confirm.reject.buttonClass', function () {\n            return this.get('confirm.reject.buttonClass') ? this.get('confirm.reject.buttonClass') : 'btn btn-red';\n        })\n    });\n\n    exports['default'] = ModalDialog;\n\n});","define('ghost/components/gh-nav-menu', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Component.extend({\n        tagName: 'nav',\n        classNames: ['gh-nav'],\n        classNameBindings: ['open'],\n\n        config: Ember['default'].inject.service(),\n\n        open: false,\n\n        mouseEnter: function mouseEnter() {\n            this.sendAction('onMouseEnter');\n        },\n\n        actions: {\n            toggleAutoNav: function toggleAutoNav() {\n                this.sendAction('toggleAutoNav');\n            },\n\n            openModal: function openModal(modal) {\n                this.sendAction('openModal', modal);\n            },\n\n            closeMobileMenu: function closeMobileMenu() {\n                this.sendAction('closeMobileMenu');\n            }\n        }\n    });\n\n});","define('ghost/components/gh-navitem-url-input', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    function joinUrlParts(url, path) {\n        if (path[0] !== '/' && url.slice(-1) !== '/') {\n            path = '/' + path;\n        } else if (path[0] === '/' && url.slice(-1) === '/') {\n            path = path.slice(1);\n        }\n\n        return url + path;\n    }\n\n    var NavItemUrlInputComponent = Ember['default'].TextField.extend({\n        classNameBindings: ['fakePlaceholder'],\n\n        isBaseUrl: Ember['default'].computed('baseUrl', 'value', function () {\n            return this.get('baseUrl') === this.get('value');\n        }),\n\n        fakePlaceholder: Ember['default'].computed('isBaseUrl', 'hasFocus', function () {\n            return this.get('isBaseUrl') && this.get('last') && !this.get('hasFocus');\n        }),\n\n        isRelative: Ember['default'].computed('value', function () {\n            return !validator.isURL(this.get('value')) && this.get('value').indexOf('mailto:') !== 0;\n        }),\n\n        didInsertElement: function didInsertElement() {\n            var url = this.get('url'),\n                baseUrl = this.get('baseUrl');\n\n            this.set('value', url);\n\n            // if we have a relative url, create the absolute url to be displayed in the input\n            if (this.get('isRelative')) {\n                url = joinUrlParts(baseUrl, url);\n                this.set('value', url);\n            }\n        },\n\n        focusIn: function focusIn(event) {\n            this.set('hasFocus', true);\n\n            if (this.get('isBaseUrl')) {\n                // position the cursor at the end of the input\n                Ember['default'].run.next(function (el) {\n                    var length = el.value.length;\n\n                    el.setSelectionRange(length, length);\n                }, event.target);\n            }\n        },\n\n        keyDown: function keyDown(event) {\n            // delete the \"placeholder\" value all at once\n            if (this.get('isBaseUrl') && (event.keyCode === 8 || event.keyCode === 46)) {\n                this.set('value', '');\n\n                event.preventDefault();\n            }\n        },\n\n        keyPress: function keyPress(event) {\n            // enter key\n            if (event.keyCode === 13) {\n                event.preventDefault();\n                this.notifyUrlChanged();\n            }\n\n            return true;\n        },\n\n        focusOut: function focusOut() {\n            this.set('hasFocus', false);\n\n            this.notifyUrlChanged();\n        },\n\n        notifyUrlChanged: function notifyUrlChanged() {\n            this.set('value', this.get('value').trim());\n\n            var url = this.get('value'),\n                baseUrl = this.get('baseUrl');\n\n            // if we have a relative url, create the absolute url to be displayed in the input\n            if (this.get('isRelative')) {\n                this.set('value', joinUrlParts(baseUrl, url));\n            }\n\n            this.sendAction('change', url);\n        }\n    });\n\n    exports['default'] = NavItemUrlInputComponent;\n\n});","define('ghost/components/gh-navitem', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    var NavItemComponent = Ember['default'].Component.extend({\n        classNames: 'gh-blognav-item',\n\n        attributeBindings: ['order:data-order'],\n        order: Ember['default'].computed.readOnly('navItem.order'),\n\n        keyPress: function keyPress(event) {\n            // enter key\n            if (event.keyCode === 13) {\n                event.preventDefault();\n                this.get('controller').send('addItem');\n            }\n        },\n\n        actions: {\n            addItem: function addItem() {\n                this.sendAction('addItem');\n            },\n\n            deleteItem: function deleteItem(item) {\n                this.sendAction('deleteItem', item);\n            },\n\n            updateUrl: function updateUrl(value) {\n                this.sendAction('updateUrl', value, this.get('navItem'));\n            }\n        }\n    });\n\n    exports['default'] = NavItemComponent;\n\n});","define('ghost/components/gh-notification', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Component.extend({\n        tagName: 'article',\n        classNames: ['gh-notification', 'gh-notification-green'],\n        classNameBindings: ['typeClass'],\n\n        message: null,\n\n        notifications: Ember['default'].inject.service(),\n\n        typeClass: Ember['default'].computed(function () {\n            var classes = '',\n                message = this.get('message'),\n                type,\n                dismissible;\n\n            // Check to see if we're working with a DS.Model or a plain JS object\n            if (typeof message.toJSON === 'function') {\n                type = message.get('type');\n                dismissible = message.get('dismissible');\n            } else {\n                type = message.type;\n                dismissible = message.dismissible;\n            }\n\n            classes += 'notification-' + type;\n\n            if (type === 'success' && dismissible !== false) {\n                classes += ' notification-passive';\n            }\n\n            return classes;\n        }),\n\n        didInsertElement: function didInsertElement() {\n            var self = this;\n\n            self.$().on('animationend webkitAnimationEnd oanimationend MSAnimationEnd', function (event) {\n                if (event.originalEvent.animationName === 'fade-out') {\n                    self.get('notifications').removeObject(self.get('message'));\n                }\n            });\n        },\n\n        actions: {\n            closeNotification: function closeNotification() {\n                this.get('notifications').closeNotification(this.get('message'));\n            }\n        }\n    });\n\n});","define('ghost/components/gh-notifications', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Component.extend({\n        tagName: 'aside',\n        classNames: 'gh-notifications',\n\n        notifications: Ember['default'].inject.service(),\n\n        messages: Ember['default'].computed.filter('notifications.content', function (notification) {\n            var displayStatus = typeof notification.toJSON === 'function' ? notification.get('status') : notification.status;\n\n            return displayStatus === 'passive';\n        })\n    });\n\n});","define('ghost/components/gh-popover-button', ['exports', 'ember', 'ghost/components/gh-dropdown-button'], function (exports, Ember, DropdownButton) {\n\n    'use strict';\n\n    exports['default'] = DropdownButton['default'].extend({\n        dropdown: Ember['default'].inject.service(),\n\n        click: Ember['default'].K,\n\n        mouseEnter: function mouseEnter(event) {\n            this._super(event);\n            this.get('dropdown').toggleDropdown(this.get('popoverName'), this);\n        },\n\n        mouseLeave: function mouseLeave(event) {\n            this._super(event);\n            this.get('dropdown').toggleDropdown(this.get('popoverName'), this);\n        }\n    });\n\n});","define('ghost/components/gh-popover', ['exports', 'ember', 'ghost/components/gh-dropdown'], function (exports, Ember, GhostDropdown) {\n\n    'use strict';\n\n    exports['default'] = GhostDropdown['default'].extend({\n        classNames: 'ghost-popover',\n        dropdown: Ember['default'].inject.service()\n    });\n\n});","define('ghost/components/gh-role-selector', ['exports', 'ember', 'ghost/components/gh-select'], function (exports, Ember, GhostSelect) {\n\n    'use strict';\n\n    var RolesSelector = GhostSelect['default'].extend({\n        roles: Ember['default'].computed.alias('options'),\n\n        options: Ember['default'].computed(function () {\n            var rolesPromise = this.store.find('role', { permissions: 'assign' });\n\n            return Ember['default'].ArrayProxy.extend(Ember['default'].PromiseProxyMixin).create({ promise: rolesPromise });\n        })\n    });\n\n    exports['default'] = RolesSelector;\n\n});","define('ghost/components/gh-select', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    var GhostSelect = Ember['default'].Component.extend({\n        tagName: 'span',\n        classNames: ['gh-select'],\n        attributeBindings: ['tabindex'],\n\n        tabindex: '0', // 0 must be a string, or else it's interpreted as false\n\n        options: null,\n        initialValue: null,\n\n        resolvedOptions: null,\n        resolvedInitialValue: null,\n\n        // Convert promises to their values\n        init: function init() {\n            var self = this;\n\n            this._super.apply(this, arguments);\n\n            Ember['default'].RSVP.hash({\n                resolvedOptions: this.get('options'),\n                resolvedInitialValue: this.get('initialValue')\n            }).then(function (resolvedHash) {\n                self.setProperties(resolvedHash);\n\n                // Run after render to ensure the <option>s have rendered\n                Ember['default'].run.schedule('afterRender', function () {\n                    self.setInitialValue();\n                });\n            });\n        },\n\n        setInitialValue: function setInitialValue() {\n            var initialValue = this.get('resolvedInitialValue'),\n                options = this.get('resolvedOptions'),\n                initialValueIndex = options.indexOf(initialValue);\n\n            if (initialValueIndex > -1) {\n                this.$('option:eq(' + initialValueIndex + ')').prop('selected', true);\n            }\n        },\n\n        // Called by DOM events\n        change: function change() {\n            this._changeSelection();\n        },\n\n        // Send value to specified action\n        _changeSelection: function _changeSelection() {\n            var value = this._selectedValue();\n\n            Ember['default'].set(this, 'value', value);\n            this.sendAction('onChange', value);\n        },\n\n        _selectedValue: function _selectedValue() {\n            var selectedIndex = this.$('select')[0].selectedIndex;\n\n            return this.get('options').objectAt(selectedIndex);\n        }\n    });\n\n    exports['default'] = GhostSelect;\n\n});","define('ghost/components/gh-tab-pane', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    var TabPane = Ember['default'].Component.extend({\n        classNameBindings: ['active'],\n\n        tabsManager: Ember['default'].computed(function () {\n            return this.nearestWithProperty('isTabsManager');\n        }),\n\n        tab: Ember['default'].computed('tabsManager.tabs.[]', 'tabsManager.tabPanes.[]', function () {\n            var index = this.get('tabsManager.tabPanes').indexOf(this),\n                tabs = this.get('tabsManager.tabs');\n\n            return tabs && tabs.objectAt(index);\n        }),\n\n        active: Ember['default'].computed.alias('tab.active'),\n\n        didInsertElement: function didInsertElement() {\n            // Register with the tabs manager\n            this.get('tabsManager').registerTabPane(this);\n        },\n\n        willDestroyElement: function willDestroyElement() {\n            // Deregister with the tabs manager\n            this.get('tabsManager').unregisterTabPane(this);\n        }\n    });\n\n    exports['default'] = TabPane;\n\n});","define('ghost/components/gh-tab', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    var Tab = Ember['default'].Component.extend({\n        tabsManager: Ember['default'].computed(function () {\n            return this.nearestWithProperty('isTabsManager');\n        }),\n\n        active: Ember['default'].computed('tabsManager.activeTab', function () {\n            return this.get('tabsManager.activeTab') === this;\n        }),\n\n        index: Ember['default'].computed('tabsManager.tabs.@each', function () {\n            return this.get('tabsManager.tabs').indexOf(this);\n        }),\n\n        // Select on click\n        click: function click() {\n            this.get('tabsManager').select(this);\n        },\n\n        didInsertElement: function didInsertElement() {\n            // register the tabs with the tab manager\n            this.get('tabsManager').registerTab(this);\n        },\n\n        willDestroyElement: function willDestroyElement() {\n            // unregister the tabs with the tab manager\n            this.get('tabsManager').unregisterTab(this);\n        }\n    });\n\n    exports['default'] = Tab;\n\n});","define('ghost/components/gh-tabs-manager', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  var TabsManager = Ember['default'].Component.extend({\n      activeTab: null,\n      tabs: [],\n      tabPanes: [],\n\n      // Called when a gh-tab is clicked.\n      select: function select(tab) {\n          this.set('activeTab', tab);\n          this.sendAction('selected');\n      },\n\n      // Used by children to find this tabsManager\n      isTabsManager: true,\n\n      // Register tabs and their panes to allow for\n      // interaction between components.\n      registerTab: function registerTab(tab) {\n          this.get('tabs').addObject(tab);\n      },\n\n      unregisterTab: function unregisterTab(tab) {\n          this.get('tabs').removeObject(tab);\n      },\n\n      registerTabPane: function registerTabPane(tabPane) {\n          this.get('tabPanes').addObject(tabPane);\n      },\n\n      unregisterTabPane: function unregisterTabPane(tabPane) {\n          this.get('tabPanes').removeObject(tabPane);\n      }\n  });\n\n  exports['default'] = TabsManager;\n\n});","define('ghost/components/gh-textarea', ['exports', 'ember', 'ghost/mixins/text-input'], function (exports, Ember, TextInputMixin) {\n\n\t'use strict';\n\n\tvar TextArea = Ember['default'].TextArea.extend(TextInputMixin['default']);\n\n\texports['default'] = TextArea;\n\n});","define('ghost/components/gh-trim-focus-input', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    var TrimFocusInput = Ember['default'].TextField.extend({\n        focus: true,\n\n        attributeBindings: ['autofocus'],\n\n        autofocus: Ember['default'].computed(function () {\n            if (this.get('focus')) {\n                return device.ios() ? false : 'autofocus';\n            }\n\n            return false;\n        }),\n\n        didInsertElement: function didInsertElement() {\n            // This fix is required until Mobile Safari has reliable\n            // autofocus, select() or focus() support\n            if (this.get('focus') && !device.ios()) {\n                this.$().val(this.$().val()).focus();\n            }\n        },\n\n        focusOut: function focusOut() {\n            var text = this.$().val();\n\n            this.$().val(text.trim());\n        }\n    });\n\n    exports['default'] = TrimFocusInput;\n\n});","define('ghost/components/gh-upload-modal', ['exports', 'ember', 'ghost/components/gh-modal-dialog', 'ghost/assets/lib/uploader', 'ghost/utils/caja-sanitizers'], function (exports, Ember, ModalDialog, upload, cajaSanitizers) {\n\n    'use strict';\n\n    var UploadModal = ModalDialog['default'].extend({\n        layoutName: 'components/gh-modal-dialog',\n\n        config: Ember['default'].inject.service(),\n\n        didInsertElement: function didInsertElement() {\n            this._super();\n            upload['default'].call(this.$('.js-drop-zone'), { fileStorage: this.get('config.fileStorage') });\n        },\n        keyDown: function keyDown() {\n            this.setErrorState(false);\n        },\n        setErrorState: function setErrorState(state) {\n            if (state) {\n                this.$('.js-upload-url').addClass('error');\n            } else {\n                this.$('.js-upload-url').removeClass('error');\n            }\n        },\n        confirm: {\n            reject: {\n                func: function func() {\n                    // The function called on rejection\n                    return true;\n                },\n                buttonClass: 'btn btn-default',\n                text: 'Cancel' // The reject button text\n            },\n            accept: {\n                buttonClass: 'btn btn-blue right',\n                text: 'Save', // The accept button text: 'Save'\n                func: function func() {\n                    var imageType = 'model.' + this.get('imageType'),\n                        value;\n\n                    if (this.$('.js-upload-url').val()) {\n                        value = this.$('.js-upload-url').val();\n\n                        if (!Ember['default'].isEmpty(value) && !cajaSanitizers['default'].url(value)) {\n                            this.setErrorState(true);\n                            return { message: 'Image URI is not valid' };\n                        }\n                    } else {\n                        value = this.$('.js-upload-target').attr('src');\n                    }\n\n                    this.set(imageType, value);\n                    return true;\n                }\n            }\n        },\n\n        actions: {\n            closeModal: function closeModal() {\n                this.sendAction();\n            },\n            confirm: function confirm(type) {\n                var result,\n                    func = this.get('confirm.' + type + '.func');\n\n                if (typeof func === 'function') {\n                    result = func.apply(this);\n                }\n\n                if (!result.message) {\n                    this.sendAction();\n                    this.sendAction('confirm' + type);\n                }\n            }\n        }\n    });\n\n    exports['default'] = UploadModal;\n\n});","define('ghost/components/gh-uploader', ['exports', 'ember', 'ghost/assets/lib/uploader'], function (exports, Ember, uploader) {\n\n    'use strict';\n\n    var PostImageUploader = Ember['default'].Component.extend({\n        classNames: ['image-uploader', 'js-post-image-upload'],\n\n        config: Ember['default'].inject.service(),\n\n        imageSource: Ember['default'].computed('image', function () {\n            return this.get('image') || '';\n        }),\n\n        /**\n         * Sets up the uploader on render\n         */\n        setup: function setup() {\n            var $this = this.$(),\n                self = this;\n\n            this.set('uploaderReference', uploader['default'].call($this, {\n                editor: true,\n                fileStorage: this.get('config.fileStorage')\n            }));\n\n            $this.on('uploadsuccess', function (event, result) {\n                if (result && result !== '' && result !== 'http://') {\n                    self.sendAction('uploaded', result);\n                }\n            });\n\n            $this.on('imagecleared', function () {\n                self.sendAction('canceled');\n            });\n        },\n\n        // removes event listeners from the uploader\n        removeListeners: function removeListeners() {\n            var $this = this.$();\n\n            $this.off();\n            $this.find('.js-cancel').off();\n        },\n\n        didInsertElement: function didInsertElement() {\n            this.setup();\n        },\n\n        willDestroyElement: function willDestroyElement() {\n            this.removeListeners();\n        }\n    });\n\n    exports['default'] = PostImageUploader;\n\n});","define('ghost/components/gh-url-preview', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    var urlPreview = Ember['default'].Component.extend({\n        classNames: 'ghost-url-preview',\n        prefix: null,\n        slug: null,\n\n        config: Ember['default'].inject.service(),\n\n        url: Ember['default'].computed('slug', function () {\n            // Get the blog URL and strip the scheme\n            var blogUrl = this.get('config.blogUrl'),\n                noSchemeBlogUrl = blogUrl.substr(blogUrl.indexOf('://') + 3),\n                // Remove `http[s]://`\n\n            // Get the prefix and slug values\n            prefix = this.get('prefix') ? this.get('prefix') + '/' : '',\n                slug = this.get('slug') ? this.get('slug') + '/' : '',\n\n            // Join parts of the URL together with slashes\n            theUrl = noSchemeBlogUrl + '/' + prefix + slug;\n\n            return theUrl;\n        })\n    });\n\n    exports['default'] = urlPreview;\n\n});","define('ghost/components/gh-view-title', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Component.extend({\n        tagName: 'h2',\n        classNames: ['view-title'],\n        actions: {\n            openMobileMenu: function openMobileMenu() {\n                this.sendAction('openMobileMenu');\n            }\n        }\n    });\n\n});","define('ghost/controllers/about', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    var AboutController = Ember['default'].Controller.extend({\n        updateNotificationCount: 0,\n\n        actions: {\n            updateNotificationChange: function updateNotificationChange(count) {\n                this.set('updateNotificationCount', count);\n            }\n        }\n    });\n\n    exports['default'] = AboutController;\n\n});","define('ghost/controllers/application', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Controller.extend({\n        dropdown: Ember['default'].inject.service(),\n\n        // jscs: disable\n        signedOut: Ember['default'].computed.match('currentPath', /(signin|signup|setup|reset)/),\n        // jscs: enable\n\n        topNotificationCount: 0,\n        showMobileMenu: false,\n        showSettingsMenu: false,\n\n        autoNav: false,\n        autoNavOpen: Ember['default'].computed('autoNav', {\n            get: function get() {\n                return false;\n            },\n            set: function set(key, value) {\n                if (this.get('autoNav')) {\n                    return value;\n                }\n                return false;\n            }\n        }),\n\n        actions: {\n            topNotificationChange: function topNotificationChange(count) {\n                this.set('topNotificationCount', count);\n            },\n\n            toggleAutoNav: function toggleAutoNav() {\n                this.toggleProperty('autoNav');\n            },\n\n            openAutoNav: function openAutoNav() {\n                this.set('autoNavOpen', true);\n            },\n\n            closeAutoNav: function closeAutoNav() {\n                this.set('autoNavOpen', false);\n            },\n\n            closeMobileMenu: function closeMobileMenu() {\n                this.set('showMobileMenu', false);\n            }\n        }\n    });\n\n});","define('ghost/controllers/editor/edit', ['exports', 'ember', 'ghost/mixins/editor-base-controller'], function (exports, Ember, EditorControllerMixin) {\n\n\t'use strict';\n\n\tvar EditorEditController = Ember['default'].Controller.extend(EditorControllerMixin['default']);\n\n\texports['default'] = EditorEditController;\n\n});","define('ghost/controllers/editor/new', ['exports', 'ember', 'ghost/mixins/editor-base-controller'], function (exports, Ember, EditorControllerMixin) {\n\n    'use strict';\n\n    var EditorNewController = Ember['default'].Controller.extend(EditorControllerMixin['default'], {\n        // Overriding autoSave on the base controller, as the new controller shouldn't be autosaving\n        autoSave: Ember['default'].K,\n        actions: {\n            /**\n              * Redirect to editor after the first save\n              */\n            save: function save(options) {\n                var self = this;\n                return this._super(options).then(function (model) {\n                    if (model.get('id')) {\n                        self.replaceRoute('editor.edit', model);\n                    }\n                });\n            }\n        }\n    });\n\n    exports['default'] = EditorNewController;\n\n});","define('ghost/controllers/error', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    var ErrorController = Ember['default'].Controller.extend({\n        code: Ember['default'].computed('content.status', function () {\n            return this.get('content.status') > 200 ? this.get('content.status') : 500;\n        }),\n        message: Ember['default'].computed('content.statusText', function () {\n            if (this.get('code') === 404) {\n                return 'Page not found';\n            }\n\n            return this.get('content.statusText') !== 'error' ? this.get('content.statusText') : 'Internal Server Error';\n        }),\n        stack: false\n    });\n\n    exports['default'] = ErrorController;\n\n});","define('ghost/controllers/feature', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    var FeatureController = Ember['default'].Controller.extend(Ember['default'].PromiseProxyMixin, {\n        init: function init() {\n            var promise;\n\n            promise = this.store.find('setting', { type: 'blog,theme' }).then(function (settings) {\n                return settings.get('firstObject');\n            });\n\n            this.set('promise', promise);\n        },\n\n        setting: Ember['default'].computed.alias('content'),\n\n        labs: Ember['default'].computed('isSettled', 'setting.labs', function () {\n            var value = {};\n\n            if (this.get('isFulfilled')) {\n                try {\n                    value = JSON.parse(this.get('setting.labs') || {});\n                } catch (err) {\n                    value = {};\n                }\n            }\n\n            return value;\n        })\n    });\n\n    exports['default'] = FeatureController;\n\n});","define('ghost/controllers/modals/copy-html', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Controller.extend({\n        generatedHTML: Ember['default'].computed.alias('model.generatedHTML')\n    });\n\n});","define('ghost/controllers/modals/delete-all', ['exports', 'ember', 'ic-ajax'], function (exports, Ember, ic_ajax) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Controller.extend({\n        ghostPaths: Ember['default'].inject.service('ghost-paths'),\n        notifications: Ember['default'].inject.service(),\n\n        actions: {\n            confirmAccept: function confirmAccept() {\n                var self = this;\n\n                ic_ajax.request(this.get('ghostPaths.url').api('db'), {\n                    type: 'DELETE'\n                }).then(function () {\n                    self.get('notifications').showSuccess('All content deleted from database.');\n                    self.store.unloadAll('post');\n                    self.store.unloadAll('tag');\n                })['catch'](function (response) {\n                    self.get('notifications').showErrors(response);\n                });\n            },\n\n            confirmReject: function confirmReject() {\n                return false;\n            }\n        },\n\n        confirm: {\n            accept: {\n                text: 'Delete',\n                buttonClass: 'btn btn-red'\n            },\n            reject: {\n                text: 'Cancel',\n                buttonClass: 'btn btn-default btn-minor'\n            }\n        }\n    });\n\n});","define('ghost/controllers/modals/delete-post', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Controller.extend({\n        dropdown: Ember['default'].inject.service(),\n        notifications: Ember['default'].inject.service(),\n\n        actions: {\n            confirmAccept: function confirmAccept() {\n                var self = this,\n                    model = this.get('model');\n\n                // definitely want to clear the data store and post of any unsaved, client-generated tags\n                model.updateTags();\n\n                model.destroyRecord().then(function () {\n                    self.get('dropdown').closeDropdowns();\n                    self.transitionToRoute('posts.index');\n                    self.get('notifications').showSuccess('Your post has been deleted.', { delayed: true });\n                }, function () {\n                    self.get('notifications').showError('Your post could not be deleted. Please try again.');\n                });\n            },\n\n            confirmReject: function confirmReject() {\n                return false;\n            }\n        },\n\n        confirm: {\n            accept: {\n                text: 'Delete',\n                buttonClass: 'btn btn-red'\n            },\n            reject: {\n                text: 'Cancel',\n                buttonClass: 'btn btn-default btn-minor'\n            }\n        }\n    });\n\n});","define('ghost/controllers/modals/delete-tag', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Controller.extend({\n        notifications: Ember['default'].inject.service(),\n\n        postInflection: Ember['default'].computed('model.post_count', function () {\n            return this.get('model.post_count') > 1 ? 'posts' : 'post';\n        }),\n\n        actions: {\n            confirmAccept: function confirmAccept() {\n                var tag = this.get('model'),\n                    name = tag.get('name'),\n                    self = this;\n\n                this.send('closeMenus');\n\n                tag.destroyRecord().then(function () {\n                    self.get('notifications').showSuccess('Deleted ' + name);\n                })['catch'](function (error) {\n                    self.get('notifications').showAPIError(error);\n                });\n            },\n\n            confirmReject: function confirmReject() {\n                return false;\n            }\n        },\n\n        confirm: {\n            accept: {\n                text: 'Delete',\n                buttonClass: 'btn btn-red'\n            },\n            reject: {\n                text: 'Cancel',\n                buttonClass: 'btn btn-default btn-minor'\n            }\n        }\n    });\n\n});","define('ghost/controllers/modals/delete-user', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Controller.extend({\n        notifications: Ember['default'].inject.service(),\n\n        userPostCount: Ember['default'].computed('model.id', function () {\n            var promise,\n                query = {\n                author: this.get('model.slug'),\n                status: 'all'\n            };\n\n            promise = this.store.find('post', query).then(function (results) {\n                return results.meta.pagination.total;\n            });\n\n            return Ember['default'].Object.extend(Ember['default'].PromiseProxyMixin, {\n                count: Ember['default'].computed.alias('content'),\n\n                inflection: Ember['default'].computed('count', function () {\n                    return this.get('count') > 1 ? 'posts' : 'post';\n                })\n            }).create({ promise: promise });\n        }),\n\n        actions: {\n            confirmAccept: function confirmAccept() {\n                var self = this,\n                    user = this.get('model');\n\n                user.destroyRecord().then(function () {\n                    self.store.unloadAll('post');\n                    self.transitionToRoute('team');\n                    self.get('notifications').showSuccess('The user has been deleted.', { delayed: true });\n                }, function () {\n                    self.get('notifications').showError('The user could not be deleted. Please try again.');\n                });\n            },\n\n            confirmReject: function confirmReject() {\n                return false;\n            }\n        },\n\n        confirm: {\n            accept: {\n                text: 'Delete User',\n                buttonClass: 'btn btn-red'\n            },\n            reject: {\n                text: 'Cancel',\n                buttonClass: 'btn btn-default btn-minor'\n            }\n        }\n    });\n\n});","define('ghost/controllers/modals/invite-new-user', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Controller.extend({\n        notifications: Ember['default'].inject.service(),\n\n        // Used to set the initial value for the dropdown\n        authorRole: Ember['default'].computed(function () {\n            var self = this;\n\n            return this.store.find('role').then(function (roles) {\n                var authorRole = roles.findBy('name', 'Author');\n\n                // Initialize role as well.\n                self.set('role', authorRole);\n                self.set('authorRole', authorRole);\n\n                return authorRole;\n            });\n        }),\n\n        confirm: {\n            accept: {\n                text: 'send invitation now'\n            },\n            reject: {\n                buttonClass: 'hidden'\n            }\n        },\n\n        actions: {\n            setRole: function setRole(role) {\n                this.set('role', role);\n            },\n\n            confirmAccept: function confirmAccept() {\n                var email = this.get('email'),\n                    role = this.get('role'),\n                    self = this,\n                    newUser;\n\n                // reset the form and close the modal\n                self.set('email', '');\n                self.set('role', self.get('authorRole'));\n                self.send('closeModal');\n\n                this.store.find('user').then(function (result) {\n                    var invitedUser = result.findBy('email', email);\n\n                    if (invitedUser) {\n                        if (invitedUser.get('status') === 'invited' || invitedUser.get('status') === 'invited-pending') {\n                            self.get('notifications').showWarn('A user with that email address was already invited.');\n                        } else {\n                            self.get('notifications').showWarn('A user with that email address already exists.');\n                        }\n                    } else {\n                        newUser = self.store.createRecord('user', {\n                            email: email,\n                            status: 'invited',\n                            role: role\n                        });\n\n                        newUser.save().then(function () {\n                            var notificationText = 'Invitation sent! (' + email + ')';\n\n                            // If sending the invitation email fails, the API will still return a status of 201\n                            // but the user's status in the response object will be 'invited-pending'.\n                            if (newUser.get('status') === 'invited-pending') {\n                                self.get('notifications').showWarn('Invitation email was not sent.  Please try resending.');\n                            } else {\n                                self.get('notifications').showSuccess(notificationText);\n                            }\n                        })['catch'](function (errors) {\n                            newUser.deleteRecord();\n                            self.get('notifications').showErrors(errors);\n                        });\n                    }\n                });\n            },\n\n            confirmReject: function confirmReject() {\n                return false;\n            }\n        }\n    });\n\n});","define('ghost/controllers/modals/leave-editor', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Controller.extend({\n        notifications: Ember['default'].inject.service(),\n\n        args: Ember['default'].computed.alias('model'),\n\n        actions: {\n            confirmAccept: function confirmAccept() {\n                var args = this.get('args'),\n                    editorController,\n                    model,\n                    transition;\n\n                if (Ember['default'].isArray(args)) {\n                    editorController = args[0];\n                    transition = args[1];\n                    model = editorController.get('model');\n                }\n\n                if (!transition || !editorController) {\n                    this.get('notifications').showError('Sorry, there was an error in the application. Please let the Ghost team know what happened.');\n\n                    return true;\n                }\n\n                // definitely want to clear the data store and post of any unsaved, client-generated tags\n                model.updateTags();\n\n                if (model.get('isNew')) {\n                    // the user doesn't want to save the new, unsaved post, so delete it.\n                    model.deleteRecord();\n                } else {\n                    // roll back changes on model props\n                    model.rollback();\n                }\n\n                // setting isDirty to false here allows willTransition on the editor route to succeed\n                editorController.set('isDirty', false);\n\n                // since the transition is now certain to complete, we can unset window.onbeforeunload here\n                window.onbeforeunload = null;\n\n                transition.retry();\n            },\n\n            confirmReject: function confirmReject() {}\n        },\n\n        confirm: {\n            accept: {\n                text: 'Leave',\n                buttonClass: 'btn btn-red'\n            },\n            reject: {\n                text: 'Stay',\n                buttonClass: 'btn btn-default btn-minor'\n            }\n        }\n    });\n\n});","define('ghost/controllers/modals/signin', ['exports', 'ember', 'ghost/mixins/validation-engine'], function (exports, Ember, ValidationEngine) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Controller.extend(ValidationEngine['default'], {\n        validationType: 'signin',\n\n        application: Ember['default'].inject.controller(),\n        notifications: Ember['default'].inject.service(),\n\n        identification: Ember['default'].computed('session.user.email', function () {\n            return this.get('session.user.email');\n        }),\n\n        actions: {\n            authenticate: function authenticate() {\n                var appController = this.get('application'),\n                    authStrategy = 'simple-auth-authenticator:oauth2-password-grant',\n                    data = this.getProperties('identification', 'password'),\n                    self = this;\n\n                appController.set('skipAuthSuccessHandler', true);\n\n                this.get('session').authenticate(authStrategy, data).then(function () {\n                    self.send('closeModal');\n                    self.get('notifications').showSuccess('Login successful.');\n                    self.set('password', '');\n                })['catch'](function () {})['finally'](function () {\n                    appController.set('skipAuthSuccessHandler', undefined);\n                });\n            },\n\n            validateAndAuthenticate: function validateAndAuthenticate() {\n                var self = this;\n\n                // Manually trigger events for input fields, ensuring legacy compatibility with\n                // browsers and password managers that don't send proper events on autofill\n                $('#login').find('input').trigger('change');\n\n                this.validate({ format: false }).then(function () {\n                    self.get('notifications').closePassive();\n                    self.send('authenticate');\n                })['catch'](function (errors) {\n                    self.get('notifications').showErrors(errors);\n                });\n            },\n\n            confirmAccept: function confirmAccept() {\n                this.send('validateAndAuthenticate');\n            }\n        }\n    });\n\n    // if authentication fails a rejected promise will be returned.\n    // it needs to be caught so it doesn't generate an exception in the console,\n    // but it's actually \"handled\" by the sessionAuthenticationFailed action handler.\n\n});","define('ghost/controllers/modals/transfer-owner', ['exports', 'ember', 'ic-ajax'], function (exports, Ember, ic_ajax) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Controller.extend({\n        dropdown: Ember['default'].inject.service(),\n        ghostPaths: Ember['default'].inject.service('ghost-paths'),\n        notifications: Ember['default'].inject.service(),\n\n        actions: {\n            confirmAccept: function confirmAccept() {\n                var user = this.get('model'),\n                    url = this.get('ghostPaths.url').api('users', 'owner'),\n                    self = this;\n\n                self.get('dropdown').closeDropdowns();\n\n                ic_ajax.request(url, {\n                    type: 'PUT',\n                    data: {\n                        owner: [{\n                            id: user.get('id')\n                        }]\n                    }\n                }).then(function (response) {\n                    // manually update the roles for the users that just changed roles\n                    // because store.pushPayload is not working with embedded relations\n                    if (response && Ember['default'].isArray(response.users)) {\n                        response.users.forEach(function (userJSON) {\n                            var user = self.store.getById('user', userJSON.id),\n                                role = self.store.getById('role', userJSON.roles[0].id);\n\n                            user.set('role', role);\n                        });\n                    }\n\n                    self.get('notifications').showSuccess('Ownership successfully transferred to ' + user.get('name'));\n                })['catch'](function (error) {\n                    self.get('notifications').showAPIError(error);\n                });\n            },\n\n            confirmReject: function confirmReject() {\n                return false;\n            }\n        },\n\n        confirm: {\n            accept: {\n                text: 'Yep - I\\'m sure',\n                buttonClass: 'btn btn-red'\n            },\n            reject: {\n                text: 'Cancel',\n                buttonClass: 'btn btn-default btn-minor'\n            }\n        }\n    });\n\n});","define('ghost/controllers/modals/upload', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Controller.extend({\n        notifications: Ember['default'].inject.service(),\n\n        acceptEncoding: 'image/*',\n\n        actions: {\n            confirmAccept: function confirmAccept() {\n                var notifications = this.get('notifications');\n\n                this.get('model').save().then(function (model) {\n                    notifications.showSuccess('Saved');\n\n                    return model;\n                })['catch'](function (err) {\n                    notifications.showErrors(err);\n                });\n            },\n\n            confirmReject: function confirmReject() {\n                return false;\n            }\n        }\n    });\n\n});","define('ghost/controllers/post-settings-menu', ['exports', 'ember', 'ghost/utils/date-formatting', 'ghost/mixins/settings-menu-controller', 'ghost/models/slug-generator', 'ghost/utils/bound-one-way', 'ghost/utils/isNumber'], function (exports, Ember, date_formatting, SettingsMenuMixin, SlugGenerator, boundOneWay, isNumber) {\n\n    'use strict';\n\n    /* global moment */\n\n    exports['default'] = Ember['default'].Controller.extend(SettingsMenuMixin['default'], {\n        debounceId: null,\n        lastPromise: null,\n        selectedAuthor: null,\n        uploaderReference: null,\n\n        application: Ember['default'].inject.controller(),\n        config: Ember['default'].inject.service(),\n        ghostPaths: Ember['default'].inject.service('ghost-paths'),\n        notifications: Ember['default'].inject.service(),\n\n        initializeSelectedAuthor: Ember['default'].observer('model', function () {\n            var self = this;\n\n            return this.get('model.author').then(function (author) {\n                self.set('selectedAuthor', author);\n                return author;\n            });\n        }),\n\n        changeAuthor: Ember['default'].observer('selectedAuthor', function () {\n            var author = this.get('model.author'),\n                selectedAuthor = this.get('selectedAuthor'),\n                model = this.get('model'),\n                self = this;\n\n            // return if nothing changed\n            if (selectedAuthor.get('id') === author.get('id')) {\n                return;\n            }\n\n            model.set('author', selectedAuthor);\n\n            // if this is a new post (never been saved before), don't try to save it\n            if (this.get('model.isNew')) {\n                return;\n            }\n\n            model.save()['catch'](function (errors) {\n                self.showErrors(errors);\n                self.set('selectedAuthor', author);\n                model.rollback();\n            });\n        }),\n\n        authors: Ember['default'].computed(function () {\n            // Loaded asynchronously, so must use promise proxies.\n            var deferred = {};\n\n            deferred.promise = this.store.find('user', { limit: 'all' }).then(function (users) {\n                return users.rejectBy('id', 'me').sortBy('name');\n            }).then(function (users) {\n                return users.filter(function (user) {\n                    return user.get('active');\n                });\n            });\n\n            return Ember['default'].ArrayProxy.extend(Ember['default'].PromiseProxyMixin).create(deferred);\n        }),\n\n        /*jshint unused:false */\n        publishedAtValue: Ember['default'].computed('model.published_at', {\n            get: function get() {\n                var pubDate = this.get('model.published_at');\n\n                if (pubDate) {\n                    return date_formatting.formatDate(pubDate);\n                }\n\n                return date_formatting.formatDate(moment());\n            },\n            set: function set(key, value) {\n                // We're using a fake setter to reset\n                // the cache for this property\n                return date_formatting.formatDate(moment());\n            }\n        }),\n        /*jshint unused:true */\n\n        slugValue: boundOneWay['default']('model.slug'),\n\n        // Lazy load the slug generator\n        slugGenerator: Ember['default'].computed(function () {\n            return SlugGenerator['default'].create({\n                ghostPaths: this.get('ghostPaths'),\n                slugType: 'post'\n            });\n        }),\n\n        // Requests slug from title\n        generateAndSetSlug: function generateAndSetSlug(destination) {\n            var self = this,\n                title = this.get('model.titleScratch'),\n                afterSave = this.get('lastPromise'),\n                promise;\n\n            // Only set an \"untitled\" slug once per post\n            if (title === '(Untitled)' && this.get('model.slug')) {\n                return;\n            }\n\n            promise = Ember['default'].RSVP.resolve(afterSave).then(function () {\n                return self.get('slugGenerator').generateSlug(title).then(function (slug) {\n                    self.set(destination, slug);\n                })['catch'](function () {});\n            });\n\n            this.set('lastPromise', promise);\n        },\n\n        metaTitleScratch: boundOneWay['default']('model.meta_title'),\n        metaDescriptionScratch: boundOneWay['default']('model.meta_description'),\n\n        seoTitle: Ember['default'].computed('model.titleScratch', 'metaTitleScratch', function () {\n            var metaTitle = this.get('metaTitleScratch') || '';\n\n            metaTitle = metaTitle.length > 0 ? metaTitle : this.get('model.titleScratch');\n\n            if (metaTitle.length > 70) {\n                metaTitle = metaTitle.substring(0, 70).trim();\n                metaTitle = Ember['default'].Handlebars.Utils.escapeExpression(metaTitle);\n                metaTitle = Ember['default'].String.htmlSafe(metaTitle + '&hellip;');\n            }\n\n            return metaTitle;\n        }),\n\n        seoDescription: Ember['default'].computed('model.scratch', 'metaDescriptionScratch', function () {\n            var metaDescription = this.get('metaDescriptionScratch') || '',\n                el,\n                html = '',\n                placeholder;\n\n            if (metaDescription.length > 0) {\n                placeholder = metaDescription;\n            } else {\n                el = $('.rendered-markdown');\n\n                // Get rendered markdown\n                if (el !== undefined && el.length > 0) {\n                    html = el.clone();\n                    html.find('.js-drop-zone').remove();\n                    html = html[0].innerHTML;\n                }\n\n                // Strip HTML\n                placeholder = $('<div />', { html: html }).text();\n                // Replace new lines and trim\n                // jscs: disable\n                placeholder = placeholder.replace(/\\n+/g, ' ').trim();\n                // jscs: enable\n            }\n\n            if (placeholder.length > 156) {\n                // Limit to 156 characters\n                placeholder = placeholder.substring(0, 156).trim();\n                placeholder = Ember['default'].Handlebars.Utils.escapeExpression(placeholder);\n                placeholder = Ember['default'].String.htmlSafe(placeholder + '&hellip;');\n            }\n\n            return placeholder;\n        }),\n\n        seoURL: Ember['default'].computed('model.slug', function () {\n            var blogUrl = this.get('config').blogUrl,\n                seoSlug = this.get('model.slug') ? this.get('model.slug') : '',\n                seoURL = blogUrl + '/' + seoSlug;\n\n            // only append a slash to the URL if the slug exists\n            if (seoSlug) {\n                seoURL += '/';\n            }\n\n            if (seoURL.length > 70) {\n                seoURL = seoURL.substring(0, 70).trim();\n                seoURL = Ember['default'].String.htmlSafe(seoURL + '&hellip;');\n            }\n\n            return seoURL;\n        }),\n\n        // observe titleScratch, keeping the post's slug in sync\n        // with it until saved for the first time.\n        addTitleObserver: Ember['default'].observer('model', function () {\n            if (this.get('model.isNew') || this.get('model.title') === '(Untitled)') {\n                this.addObserver('model.titleScratch', this, 'titleObserver');\n            }\n        }),\n\n        titleObserver: function titleObserver() {\n            var debounceId,\n                title = this.get('model.title');\n\n            // generate a slug if a post is new and doesn't have a title yet or\n            // if the title is still '(Untitled)' and the slug is unaltered.\n            if (this.get('model.isNew') && !title || title === '(Untitled)') {\n                debounceId = Ember['default'].run.debounce(this, 'generateAndSetSlug', 'model.slug', 700);\n            }\n\n            this.set('debounceId', debounceId);\n        },\n\n        showErrors: function showErrors(errors) {\n            errors = Ember['default'].isArray(errors) ? errors : [errors];\n            this.get('notifications').showErrors(errors);\n        },\n\n        showSuccess: function showSuccess(message) {\n            this.get('notifications').showSuccess(message);\n        },\n\n        actions: {\n            togglePage: function togglePage() {\n                var self = this;\n\n                this.toggleProperty('model.page');\n                // If this is a new post.  Don't save the model.  Defer the save\n                // to the user pressing the save button\n                if (this.get('model.isNew')) {\n                    return;\n                }\n\n                this.get('model').save()['catch'](function (errors) {\n                    self.showErrors(errors);\n                    self.get('model').rollback();\n                });\n            },\n\n            toggleFeatured: function toggleFeatured() {\n                var self = this;\n\n                this.toggleProperty('model.featured');\n\n                // If this is a new post.  Don't save the model.  Defer the save\n                // to the user pressing the save button\n                if (this.get('model.isNew')) {\n                    return;\n                }\n\n                this.get('model').save(this.get('saveOptions'))['catch'](function (errors) {\n                    self.showErrors(errors);\n                    self.get('model').rollback();\n                });\n            },\n\n            /**\n             * triggered by user manually changing slug\n             */\n            updateSlug: function updateSlug(newSlug) {\n                var slug = this.get('model.slug'),\n                    self = this;\n\n                newSlug = newSlug || slug;\n\n                newSlug = newSlug && newSlug.trim();\n\n                // Ignore unchanged slugs or candidate slugs that are empty\n                if (!newSlug || slug === newSlug) {\n                    // reset the input to its previous state\n                    this.set('slugValue', slug);\n\n                    return;\n                }\n\n                this.get('slugGenerator').generateSlug(newSlug).then(function (serverSlug) {\n                    // If after getting the sanitized and unique slug back from the API\n                    // we end up with a slug that matches the existing slug, abort the change\n                    if (serverSlug === slug) {\n                        return;\n                    }\n\n                    // Because the server transforms the candidate slug by stripping\n                    // certain characters and appending a number onto the end of slugs\n                    // to enforce uniqueness, there are cases where we can get back a\n                    // candidate slug that is a duplicate of the original except for\n                    // the trailing incrementor (e.g., this-is-a-slug and this-is-a-slug-2)\n\n                    // get the last token out of the slug candidate and see if it's a number\n                    var slugTokens = serverSlug.split('-'),\n                        check = Number(slugTokens.pop());\n\n                    // if the candidate slug is the same as the existing slug except\n                    // for the incrementor then the existing slug should be used\n                    if (isNumber['default'](check) && check > 0) {\n                        if (slug === slugTokens.join('-') && serverSlug !== newSlug) {\n                            self.set('slugValue', slug);\n\n                            return;\n                        }\n                    }\n\n                    self.set('model.slug', serverSlug);\n\n                    if (self.hasObserverFor('model.titleScratch')) {\n                        self.removeObserver('model.titleScratch', self, 'titleObserver');\n                    }\n\n                    // If this is a new post.  Don't save the model.  Defer the save\n                    // to the user pressing the save button\n                    if (self.get('model.isNew')) {\n                        return;\n                    }\n\n                    return self.get('model').save();\n                })['catch'](function (errors) {\n                    self.showErrors(errors);\n                    self.get('model').rollback();\n                });\n            },\n\n            /**\n             * Parse user's set published date.\n             * Action sent by post settings menu view.\n             * (#1351)\n             */\n            setPublishedAt: function setPublishedAt(userInput) {\n                var errMessage = '',\n                    newPublishedAt = date_formatting.parseDateString(userInput),\n                    publishedAt = this.get('model.published_at'),\n                    self = this;\n\n                if (!userInput) {\n                    // Clear out the published_at field for a draft\n                    if (this.get('model.isDraft')) {\n                        this.set('model.published_at', null);\n                    }\n\n                    return;\n                }\n\n                // Validate new Published date\n                if (!newPublishedAt.isValid()) {\n                    errMessage = 'Published Date must be a valid date with format: ' + 'DD MMM YY @ HH:mm (e.g. 6 Dec 14 @ 15:00)';\n                }\n                if (newPublishedAt.diff(new Date(), 'h') > 0) {\n                    errMessage = 'Published Date cannot currently be in the future.';\n                }\n\n                // If errors, notify and exit.\n                if (errMessage) {\n                    this.showErrors(errMessage);\n\n                    return;\n                }\n\n                // Do nothing if the user didn't actually change the date\n                if (publishedAt && publishedAt.isSame(newPublishedAt)) {\n                    return;\n                }\n\n                // Validation complete\n                this.set('model.published_at', newPublishedAt);\n\n                // If this is a new post.  Don't save the model.  Defer the save\n                // to the user pressing the save button\n                if (this.get('model.isNew')) {\n                    return;\n                }\n\n                this.get('model').save()['catch'](function (errors) {\n                    self.showErrors(errors);\n                    self.get('model').rollback();\n                });\n            },\n\n            setMetaTitle: function setMetaTitle(metaTitle) {\n                var self = this,\n                    currentTitle = this.get('model.meta_title') || '';\n\n                // Only update if the title has changed\n                if (currentTitle === metaTitle) {\n                    return;\n                }\n\n                this.set('model.meta_title', metaTitle);\n\n                // If this is a new post.  Don't save the model.  Defer the save\n                // to the user pressing the save button\n                if (this.get('model.isNew')) {\n                    return;\n                }\n\n                this.get('model').save()['catch'](function (errors) {\n                    self.showErrors(errors);\n                });\n            },\n\n            setMetaDescription: function setMetaDescription(metaDescription) {\n                var self = this,\n                    currentDescription = this.get('model.meta_description') || '';\n\n                // Only update if the description has changed\n                if (currentDescription === metaDescription) {\n                    return;\n                }\n\n                this.set('model.meta_description', metaDescription);\n\n                // If this is a new post.  Don't save the model.  Defer the save\n                // to the user pressing the save button\n                if (this.get('model.isNew')) {\n                    return;\n                }\n\n                this.get('model').save()['catch'](function (errors) {\n                    self.showErrors(errors);\n                });\n            },\n\n            setCoverImage: function setCoverImage(image) {\n                var self = this;\n\n                this.set('model.image', image);\n\n                if (this.get('model.isNew')) {\n                    return;\n                }\n\n                this.get('model').save()['catch'](function (errors) {\n                    self.showErrors(errors);\n                    self.get('model').rollback();\n                });\n            },\n\n            clearCoverImage: function clearCoverImage() {\n                var self = this;\n\n                this.set('model.image', '');\n\n                if (this.get('model.isNew')) {\n                    return;\n                }\n\n                this.get('model').save()['catch'](function (errors) {\n                    self.showErrors(errors);\n                    self.get('model').rollback();\n                });\n            },\n\n            resetUploader: function resetUploader() {\n                var uploader = this.get('uploaderReference');\n\n                if (uploader && uploader[0]) {\n                    uploader[0].uploaderUi.reset();\n                }\n            },\n\n            resetPubDate: function resetPubDate() {\n                this.set('publishedAtValue', '');\n            },\n\n            closeNavMenu: function closeNavMenu() {\n                this.get('application').send('closeNavMenu');\n            }\n        }\n    });\n\n    // Nothing to do (would be nice to log this somewhere though),\n    // but a rejected promise needs to be handled here so that a resolved\n    // promise is returned.\n\n});","define('ghost/controllers/post-tags-input', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    var PostTagsInputController = Ember['default'].Controller.extend({\n        tagEnteredOrder: Ember['default'].A(),\n\n        tags: Ember['default'].computed('parentController.model.tags', function () {\n            var proxyTags = Ember['default'].ArrayProxy.create({\n                content: this.get('parentController.model.tags')\n            }),\n                temp = proxyTags.get('arrangedContent').slice();\n\n            proxyTags.get('arrangedContent').clear();\n\n            this.get('tagEnteredOrder').forEach(function (tagName) {\n                var tag = temp.find(function (tag) {\n                    return tag.get('name') === tagName;\n                });\n\n                if (tag) {\n                    proxyTags.get('arrangedContent').addObject(tag);\n                    temp.removeObject(tag);\n                }\n            });\n\n            proxyTags.get('arrangedContent').unshiftObjects(temp);\n\n            return proxyTags;\n        }),\n\n        suggestions: null,\n        newTagText: null,\n\n        actions: {\n            // triggered when the view is inserted so that later store.all('tag')\n            // queries hit a full store cache and we don't see empty or out-of-date\n            // suggestion lists\n            loadAllTags: function loadAllTags() {\n                this.store.find('tag', { limit: 'all' });\n            },\n\n            addNewTag: function addNewTag() {\n                var newTagText = this.get('newTagText'),\n                    searchTerm,\n                    existingTags,\n                    newTag;\n\n                if (Ember['default'].isEmpty(newTagText) || this.hasTag(newTagText)) {\n                    this.send('reset');\n                    return;\n                }\n\n                newTagText = newTagText.trim();\n                searchTerm = newTagText.toLowerCase();\n\n                // add existing tag if we have a match\n                existingTags = this.store.all('tag').filter(function (tag) {\n                    if (tag.get('isNew')) {\n                        return false;\n                    }\n\n                    return tag.get('name').toLowerCase() === searchTerm;\n                });\n\n                if (existingTags.get('length')) {\n                    this.send('addTag', existingTags.get('firstObject'));\n                } else {\n                    // otherwise create a new one\n                    newTag = this.store.createRecord('tag');\n                    newTag.set('name', newTagText);\n\n                    this.send('addTag', newTag);\n                }\n\n                this.send('reset');\n            },\n\n            addTag: function addTag(tag) {\n                if (!Ember['default'].isEmpty(tag)) {\n                    this.get('tags').addObject(tag);\n                    this.get('tagEnteredOrder').addObject(tag.get('name'));\n                }\n\n                this.send('reset');\n            },\n\n            deleteTag: function deleteTag(tag) {\n                if (tag) {\n                    this.get('tags').removeObject(tag);\n                    this.get('tagEnteredOrder').removeObject(tag.get('name'));\n                }\n            },\n\n            deleteLastTag: function deleteLastTag() {\n                this.send('deleteTag', this.get('tags.lastObject'));\n            },\n\n            selectSuggestion: function selectSuggestion(suggestion) {\n                if (!Ember['default'].isEmpty(suggestion)) {\n                    this.get('suggestions').setEach('selected', false);\n                    suggestion.set('selected', true);\n                }\n            },\n\n            selectNextSuggestion: function selectNextSuggestion() {\n                var suggestions = this.get('suggestions'),\n                    selectedSuggestion = this.get('selectedSuggestion'),\n                    currentIndex,\n                    newSelection;\n\n                if (!Ember['default'].isEmpty(suggestions)) {\n                    currentIndex = suggestions.indexOf(selectedSuggestion);\n                    if (currentIndex + 1 < suggestions.get('length')) {\n                        newSelection = suggestions[currentIndex + 1];\n                        this.send('selectSuggestion', newSelection);\n                    } else {\n                        suggestions.setEach('selected', false);\n                    }\n                }\n            },\n\n            selectPreviousSuggestion: function selectPreviousSuggestion() {\n                var suggestions = this.get('suggestions'),\n                    selectedSuggestion = this.get('selectedSuggestion'),\n                    currentIndex,\n                    lastIndex,\n                    newSelection;\n\n                if (!Ember['default'].isEmpty(suggestions)) {\n                    currentIndex = suggestions.indexOf(selectedSuggestion);\n                    if (currentIndex === -1) {\n                        lastIndex = suggestions.get('length') - 1;\n                        this.send('selectSuggestion', suggestions[lastIndex]);\n                    } else if (currentIndex - 1 >= 0) {\n                        newSelection = suggestions[currentIndex - 1];\n                        this.send('selectSuggestion', newSelection);\n                    } else {\n                        suggestions.setEach('selected', false);\n                    }\n                }\n            },\n\n            addSelectedSuggestion: function addSelectedSuggestion() {\n                var suggestion = this.get('selectedSuggestion');\n\n                if (Ember['default'].isEmpty(suggestion)) {\n                    return;\n                }\n\n                this.send('addTag', suggestion.get('tag'));\n            },\n\n            reset: function reset() {\n                this.set('suggestions', null);\n                this.set('newTagText', null);\n            }\n        },\n\n        selectedSuggestion: Ember['default'].computed('suggestions.@each.selected', function () {\n            var suggestions = this.get('suggestions');\n\n            if (suggestions && suggestions.get('length')) {\n                return suggestions.filterBy('selected').get('firstObject');\n            } else {\n                return null;\n            }\n        }),\n\n        updateSuggestionsList: Ember['default'].observer('newTagText', function () {\n            var searchTerm = this.get('newTagText'),\n                matchingTags,\n\n            // Limit the suggestions number\n            maxSuggestions = 5,\n                suggestions = Ember['default'].A();\n\n            if (!searchTerm || Ember['default'].isEmpty(searchTerm.trim())) {\n                this.set('suggestions', null);\n                return;\n            }\n\n            searchTerm = searchTerm.trim();\n\n            matchingTags = this.findMatchingTags(searchTerm);\n            matchingTags = matchingTags.slice(0, maxSuggestions);\n            matchingTags.forEach(function (matchingTag) {\n                var suggestion = this.makeSuggestionObject(matchingTag, searchTerm);\n                suggestions.pushObject(suggestion);\n            }, this);\n\n            this.set('suggestions', suggestions);\n        }),\n\n        findMatchingTags: function findMatchingTags(searchTerm) {\n            var matchingTags,\n                self = this,\n                allTags = this.store.all('tag').filterBy('isNew', false),\n                deDupe = {};\n\n            if (allTags.get('length') === 0) {\n                return [];\n            }\n\n            searchTerm = searchTerm.toLowerCase();\n\n            matchingTags = allTags.filter(function (tag) {\n                var tagNameMatches,\n                    hasAlreadyBeenAdded,\n                    tagName = tag.get('name');\n\n                tagNameMatches = tagName.toLowerCase().indexOf(searchTerm) !== -1;\n                hasAlreadyBeenAdded = self.hasTag(tagName);\n\n                if (tagNameMatches && !hasAlreadyBeenAdded) {\n                    if (typeof deDupe[tagName] === 'undefined') {\n                        deDupe[tagName] = 1;\n                    } else {\n                        deDupe[tagName] += 1;\n                    }\n                }\n\n                return deDupe[tagName] === 1;\n            });\n\n            return matchingTags;\n        },\n\n        hasTag: function hasTag(tagName) {\n            return this.get('tags').mapBy('name').contains(tagName);\n        },\n\n        makeSuggestionObject: function makeSuggestionObject(matchingTag, _searchTerm) {\n            var searchTerm = Ember['default'].Handlebars.Utils.escapeExpression(_searchTerm),\n                regexEscapedSearchTerm = searchTerm.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, '\\\\$&'),\n                tagName = Ember['default'].Handlebars.Utils.escapeExpression(matchingTag.get('name')),\n                regex = new RegExp('(' + regexEscapedSearchTerm + ')', 'gi'),\n                highlightedName,\n                suggestion = Ember['default'].Object.create();\n\n            highlightedName = tagName.replace(regex, '<mark>$1</mark>');\n            highlightedName = Ember['default'].String.htmlSafe(highlightedName);\n\n            suggestion.set('tag', matchingTag);\n            suggestion.set('highlightedName', highlightedName);\n\n            return suggestion;\n        }\n    });\n\n    exports['default'] = PostTagsInputController;\n\n});","define('ghost/controllers/posts', ['exports', 'ember', 'ghost/mixins/pagination-controller'], function (exports, Ember, PaginationControllerMixin) {\n\n    'use strict';\n\n    function publishedAtCompare(item1, item2) {\n        var published1 = item1.get('published_at'),\n            published2 = item2.get('published_at');\n\n        if (!published1 && !published2) {\n            return 0;\n        }\n\n        if (!published1 && published2) {\n            return -1;\n        }\n\n        if (!published2 && published1) {\n            return 1;\n        }\n\n        return Ember['default'].compare(published1.valueOf(), published2.valueOf());\n    }\n\n    var PostsController = Ember['default'].ArrayController.extend(PaginationControllerMixin['default'], {\n        // See PostsRoute's shortcuts\n        postListFocused: Ember['default'].computed.equal('keyboardFocus', 'postList'),\n        postContentFocused: Ember['default'].computed.equal('keyboardFocus', 'postContent'),\n        // this will cause the list to re-sort when any of these properties change on any of the models\n        sortProperties: ['status', 'published_at', 'updated_at'],\n\n        // override Ember.SortableMixin\n        //\n        // this function will keep the posts list sorted when loading individual/bulk\n        // models from the server, even if records in between haven't been loaded.\n        // this can happen when reloading the page on the Editor or PostsPost routes.\n        //\n        // a custom sort function is needed in order to sort the posts list the same way the server would:\n        //     status: ASC\n        //     published_at: DESC\n        //     updated_at: DESC\n        //     id: DESC\n        orderBy: function orderBy(item1, item2) {\n            var updated1 = item1.get('updated_at'),\n                updated2 = item2.get('updated_at'),\n                idResult,\n                statusResult,\n                updatedAtResult,\n                publishedAtResult;\n\n            // when `updated_at` is undefined, the model is still\n            // being written to with the results from the server\n            if (item1.get('isNew') || !updated1) {\n                return -1;\n            }\n\n            if (item2.get('isNew') || !updated2) {\n                return 1;\n            }\n\n            idResult = Ember['default'].compare(parseInt(item1.get('id')), parseInt(item2.get('id')));\n            statusResult = Ember['default'].compare(item1.get('status'), item2.get('status'));\n            updatedAtResult = Ember['default'].compare(updated1.valueOf(), updated2.valueOf());\n            publishedAtResult = publishedAtCompare(item1, item2);\n\n            if (statusResult === 0) {\n                if (publishedAtResult === 0) {\n                    if (updatedAtResult === 0) {\n                        // This should be DESC\n                        return idResult * -1;\n                    }\n                    // This should be DESC\n                    return updatedAtResult * -1;\n                }\n                // This should be DESC\n                return publishedAtResult * -1;\n            }\n\n            return statusResult;\n        },\n\n        init: function init() {\n            // let the PaginationControllerMixin know what type of model we will be paginating\n            // this is necessary because we do not have access to the model inside the Controller::init method\n            this._super({ modelType: 'post' });\n        }\n    });\n\n    exports['default'] = PostsController;\n\n});","define('ghost/controllers/posts/post', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Controller.extend({\n        classNameBindings: ['model.featured'],\n\n        ghostPaths: Ember['default'].inject.service('ghost-paths'),\n        notifications: Ember['default'].inject.service(),\n\n        isPublished: Ember['default'].computed.equal('model.status', 'published'),\n\n        authorName: Ember['default'].computed('model.author.name', 'model.author.email', function () {\n            return this.get('model.author.name') || this.get('model.author.email');\n        }),\n\n        authorAvatar: Ember['default'].computed('model.author.image', function () {\n            return this.get('model.author.image') || this.get('ghostPaths.url').asset('/shared/img/user-image.png');\n        }),\n\n        authorAvatarBackground: Ember['default'].computed('authorAvatar', function () {\n            return ('background-image: url(' + this.get('authorAvatar') + ')').htmlSafe();\n        }),\n\n        actions: {\n            toggleFeatured: function toggleFeatured() {\n                var notifications = this.get('notifications');\n\n                this.toggleProperty('model.featured');\n                this.get('model').save()['catch'](function (errors) {\n                    notifications.showErrors(errors);\n                });\n            },\n\n            showPostContent: function showPostContent() {\n                this.transitionToRoute('posts.post', this.get('model'));\n            }\n        }\n    });\n\n});","define('ghost/controllers/reset', ['exports', 'ember', 'ic-ajax', 'ghost/mixins/validation-engine'], function (exports, Ember, ic_ajax, ValidationEngine) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Controller.extend(ValidationEngine['default'], {\n        newPassword: '',\n        ne2Password: '',\n        token: '',\n        submitting: false,\n\n        validationType: 'reset',\n\n        ghostPaths: Ember['default'].inject.service('ghost-paths'),\n        notifications: Ember['default'].inject.service(),\n\n        email: Ember['default'].computed('token', function () {\n            // The token base64 encodes the email (and some other stuff),\n            // each section is divided by a '|'. Email comes second.\n            return atob(this.get('token')).split('|')[1];\n        }),\n\n        // Used to clear sensitive information\n        clearData: function clearData() {\n            this.setProperties({\n                newPassword: '',\n                ne2Password: '',\n                token: ''\n            });\n        },\n\n        actions: {\n            submit: function submit() {\n                var credentials = this.getProperties('newPassword', 'ne2Password', 'token'),\n                    self = this;\n\n                this.toggleProperty('submitting');\n                this.validate({ format: false }).then(function () {\n                    ic_ajax.request({\n                        url: self.get('ghostPaths.url').api('authentication', 'passwordreset'),\n                        type: 'PUT',\n                        data: {\n                            passwordreset: [credentials]\n                        }\n                    }).then(function (resp) {\n                        self.toggleProperty('submitting');\n                        self.get('notifications').showSuccess(resp.passwordreset[0].message, true);\n                        self.get('session').authenticate('simple-auth-authenticator:oauth2-password-grant', {\n                            identification: self.get('email'),\n                            password: credentials.newPassword\n                        });\n                    })['catch'](function (response) {\n                        self.get('notifications').showAPIError(response);\n                        self.toggleProperty('submitting');\n                    });\n                })['catch'](function (error) {\n                    self.toggleProperty('submitting');\n                    self.get('notifications').showErrors(error);\n                });\n            }\n        }\n    });\n\n});","define('ghost/controllers/settings/app', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    var appStates, SettingsAppController;\n\n    appStates = {\n        active: 'active',\n        working: 'working',\n        inactive: 'inactive'\n    };\n\n    SettingsAppController = Ember['default'].Controller.extend({\n        appState: appStates.active,\n        buttonText: '',\n\n        setAppState: Ember['default'].on('init', function () {\n            this.set('appState', this.get('active') ? appStates.active : appStates.inactive);\n        }),\n\n        buttonTextSetter: Ember['default'].observer('appState', function () {\n            switch (this.get('appState')) {\n                case appStates.active:\n                    this.set('buttonText', 'Deactivate');\n                    break;\n                case appStates.inactive:\n                    this.set('buttonText', 'Activate');\n                    break;\n                case appStates.working:\n                    this.set('buttonText', 'Working');\n                    break;\n            }\n        }),\n\n        activeClass: Ember['default'].computed('appState', function () {\n            return this.appState === appStates.active ? true : false;\n        }),\n\n        inactiveClass: Ember['default'].computed('appState', function () {\n            return this.appState === appStates.inactive ? true : false;\n        }),\n\n        actions: {\n            toggleApp: function toggleApp(app) {\n                var self = this;\n\n                this.set('appState', appStates.working);\n\n                app.set('active', !app.get('active'));\n\n                app.save().then(function () {\n                    self.setAppState();\n                }).then(function () {\n                    alert('@TODO: Success');\n                })['catch'](function () {\n                    alert('@TODO: Failure');\n                });\n            }\n        }\n    });\n\n    exports['default'] = SettingsAppController;\n\n});","define('ghost/controllers/settings/code-injection', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Controller.extend({\n        actions: {\n            save: function save() {\n                var notifications = this.get('notifications');\n\n                return this.get('model').save().then(function (model) {\n                    notifications.closePassive();\n                    notifications.showSuccess('Settings successfully saved.');\n\n                    return model;\n                })['catch'](function (errors) {\n                    notifications.closePassive();\n                    notifications.showErrors(errors);\n                });\n            }\n        }\n    });\n\n});","define('ghost/controllers/settings/general', ['exports', 'ember', 'ghost/utils/random-password'], function (exports, Ember, randomPassword) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Controller.extend({\n        notifications: Ember['default'].inject.service(),\n\n        selectedTheme: null,\n\n        logoImageSource: Ember['default'].computed('model.logo', function () {\n            return this.get('model.logo') || '';\n        }),\n\n        coverImageSource: Ember['default'].computed('model.cover', function () {\n            return this.get('model.cover') || '';\n        }),\n\n        isDatedPermalinks: Ember['default'].computed('model.permalinks', {\n            set: function set(key, value) {\n                this.set('model.permalinks', value ? '/:year/:month/:day/:slug/' : '/:slug/');\n\n                var slugForm = this.get('model.permalinks');\n                return slugForm !== '/:slug/';\n            },\n            get: function get() {\n                var slugForm = this.get('model.permalinks');\n\n                return slugForm !== '/:slug/';\n            }\n        }),\n\n        themes: Ember['default'].computed(function () {\n            return this.get('model.availableThemes').reduce(function (themes, t) {\n                var theme = {};\n\n                theme.name = t.name;\n                theme.label = t['package'] ? t['package'].name + ' - ' + t['package'].version : t.name;\n                theme['package'] = t['package'];\n                theme.active = !!t.active;\n\n                themes.push(theme);\n\n                return themes;\n            }, []);\n        }).readOnly(),\n\n        generatePassword: Ember['default'].observer('model.isPrivate', function () {\n            if (this.get('model.isPrivate') && this.get('model.isDirty')) {\n                this.get('model').set('password', randomPassword['default']());\n            }\n        }),\n\n        actions: {\n            save: function save() {\n                var notifications = this.get('notifications');\n\n                return this.get('model').save().then(function (model) {\n                    notifications.showSuccess('Settings successfully saved.');\n\n                    return model;\n                })['catch'](function (errors) {\n                    notifications.showErrors(errors);\n                });\n            },\n\n            checkPostsPerPage: function checkPostsPerPage() {\n                var postsPerPage = this.get('model.postsPerPage');\n\n                if (postsPerPage < 1 || postsPerPage > 1000 || isNaN(postsPerPage)) {\n                    this.set('model.postsPerPage', 5);\n                }\n            }\n        }\n    });\n\n});","define('ghost/controllers/settings/labs', ['exports', 'ember', 'ic-ajax'], function (exports, Ember, ic_ajax) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Controller.extend(Ember['default'].Evented, {\n        uploadButtonText: 'Import',\n        importErrors: '',\n\n        ghostPaths: Ember['default'].inject.service('ghost-paths'),\n        notifications: Ember['default'].inject.service(),\n\n        labsJSON: Ember['default'].computed('model.labs', function () {\n            return JSON.parse(this.get('model.labs') || {});\n        }),\n\n        saveLabs: function saveLabs(optionName, optionValue) {\n            var self = this,\n                labsJSON = this.get('labsJSON');\n\n            // Set new value in the JSON object\n            labsJSON[optionName] = optionValue;\n\n            this.set('model.labs', JSON.stringify(labsJSON));\n\n            this.get('model').save()['catch'](function (errors) {\n                self.showErrors(errors);\n                self.get('model').rollback();\n            });\n        },\n\n        actions: {\n            onUpload: function onUpload(file) {\n                var self = this,\n                    formData = new FormData(),\n                    notifications = this.get('notifications');\n\n                this.set('uploadButtonText', 'Importing');\n                this.set('importErrors', '');\n                notifications.closePassive();\n\n                formData.append('importfile', file);\n\n                ic_ajax.request(this.get('ghostPaths.url').api('db'), {\n                    type: 'POST',\n                    data: formData,\n                    dataType: 'json',\n                    cache: false,\n                    contentType: false,\n                    processData: false\n                }).then(function () {\n                    // Clear the store, so that all the new data gets fetched correctly.\n                    self.store.unloadAll('post');\n                    self.store.unloadAll('tag');\n                    self.store.unloadAll('user');\n                    self.store.unloadAll('role');\n                    self.store.unloadAll('setting');\n                    self.store.unloadAll('notification');\n                    notifications.showSuccess('Import successful.');\n                })['catch'](function (response) {\n                    if (response && response.jqXHR && response.jqXHR.responseJSON && response.jqXHR.responseJSON.errors) {\n                        self.set('importErrors', response.jqXHR.responseJSON.errors);\n                    }\n\n                    notifications.showError('Import Failed');\n                })['finally'](function () {\n                    self.set('uploadButtonText', 'Import');\n                    self.trigger('reset');\n                });\n            },\n\n            exportData: function exportData() {\n                var iframe = $('#iframeDownload'),\n                    downloadURL = this.get('ghostPaths.url').api('db') + '?access_token=' + this.get('session.secure.access_token');\n\n                if (iframe.length === 0) {\n                    iframe = $('<iframe>', { id: 'iframeDownload' }).hide().appendTo('body');\n                }\n\n                iframe.attr('src', downloadURL);\n            },\n\n            sendTestEmail: function sendTestEmail() {\n                var notifications = this.get('notifications');\n\n                ic_ajax.request(this.get('ghostPaths.url').api('mail', 'test'), {\n                    type: 'POST'\n                }).then(function () {\n                    notifications.showSuccess('Check your email for the test message.');\n                })['catch'](function (error) {\n                    if (typeof error.jqXHR !== 'undefined') {\n                        notifications.showAPIError(error);\n                    } else {\n                        notifications.showErrors(error);\n                    }\n                });\n            }\n        }\n    });\n\n});","define('ghost/controllers/settings/navigation', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    var NavItem = Ember['default'].Object.extend({\n        label: '',\n        url: '',\n        last: false,\n\n        isComplete: Ember['default'].computed('label', 'url', function () {\n            return !(Ember['default'].isBlank(this.get('label').trim()) || Ember['default'].isBlank(this.get('url')));\n        })\n    });\n\n    exports['default'] = Ember['default'].Controller.extend({\n        config: Ember['default'].inject.service(),\n        notifications: Ember['default'].inject.service(),\n\n        blogUrl: Ember['default'].computed('config.blogUrl', function () {\n            var url = this.get('config.blogUrl');\n\n            return url.slice(-1) !== '/' ? url + '/' : url;\n        }),\n\n        navigationItems: Ember['default'].computed('model.navigation', function () {\n            var navItems, lastItem;\n\n            try {\n                navItems = JSON.parse(this.get('model.navigation') || [{}]);\n            } catch (e) {\n                navItems = [{}];\n            }\n\n            navItems = navItems.map(function (item) {\n                return NavItem.create(item);\n            });\n\n            lastItem = navItems.get('lastObject');\n            if (!lastItem || lastItem.get('isComplete')) {\n                navItems.addObject(NavItem.create({ last: true }));\n            }\n\n            return navItems;\n        }),\n\n        updateLastNavItem: Ember['default'].observer('navigationItems.[]', function () {\n            var navItems = this.get('navigationItems');\n\n            navItems.forEach(function (item, index, items) {\n                if (index === items.length - 1) {\n                    item.set('last', true);\n                } else {\n                    item.set('last', false);\n                }\n            });\n        }),\n\n        actions: {\n            addItem: function addItem() {\n                var navItems = this.get('navigationItems'),\n                    lastItem = navItems.get('lastObject');\n\n                if (lastItem && lastItem.get('isComplete')) {\n                    navItems.addObject(NavItem.create({ last: true })); // Adds new blank navItem\n                }\n            },\n\n            deleteItem: function deleteItem(item) {\n                if (!item) {\n                    return;\n                }\n\n                var navItems = this.get('navigationItems');\n\n                navItems.removeObject(item);\n            },\n\n            moveItem: function moveItem(index, newIndex) {\n                var navItems = this.get('navigationItems'),\n                    item = navItems.objectAt(index);\n\n                navItems.removeAt(index);\n                navItems.insertAt(newIndex, item);\n            },\n\n            updateUrl: function updateUrl(url, navItem) {\n                if (!navItem) {\n                    return;\n                }\n\n                if (Ember['default'].isBlank(url)) {\n                    navItem.set('url', this.get('blogUrl'));\n\n                    return;\n                }\n\n                navItem.set('url', url);\n            },\n\n            save: function save() {\n                var navSetting,\n                    blogUrl = this.get('config').blogUrl,\n                    blogUrlRegex = new RegExp('^' + blogUrl + '(.*)', 'i'),\n                    navItems = this.get('navigationItems'),\n                    message = 'One of your navigation items has an empty label. ' + '<br /> Please enter a new label or delete the item before saving.',\n                    match,\n                    notifications = this.get('notifications');\n\n                // Don't save if there's a blank label.\n                if (navItems.find(function (item) {\n                    return !item.get('isComplete') && !item.get('last');\n                })) {\n                    notifications.showErrors([message.htmlSafe()]);\n                    return;\n                }\n\n                navSetting = navItems.map(function (item) {\n                    var label, url;\n\n                    if (!item || !item.get('isComplete')) {\n                        return;\n                    }\n\n                    label = item.get('label').trim();\n                    url = item.get('url').trim();\n\n                    // is this an internal URL?\n                    match = url.match(blogUrlRegex);\n\n                    if (match) {\n                        url = match[1];\n\n                        // if the last char is not a slash, then add one,\n                        // as long as there is no # or . in the URL (anchor or file extension)\n                        // this also handles the empty case for the homepage\n                        if (url[url.length - 1] !== '/' && url.indexOf('#') === -1 && url.indexOf('.') === -1) {\n                            url += '/';\n                        }\n                    } else if (!validator.isURL(url) && url !== '' && url[0] !== '/' && url.indexOf('mailto:') !== 0) {\n                        url = '/' + url;\n                    }\n\n                    return { label: label, url: url };\n                }).compact();\n\n                this.set('model.navigation', JSON.stringify(navSetting));\n\n                // trigger change event because even if the final JSON is unchanged\n                // we need to have navigationItems recomputed.\n                this.get('model').notifyPropertyChange('navigation');\n\n                notifications.closePassive();\n\n                this.get('model').save().then(function () {\n                    notifications.showSuccess('Navigation items saved.');\n                })['catch'](function (err) {\n                    notifications.showErrors(err);\n                });\n            }\n        }\n    });\n\n});","define('ghost/controllers/settings/tags', ['exports', 'ember', 'ghost/mixins/pagination-controller', 'ghost/mixins/settings-menu-controller', 'ghost/utils/bound-one-way'], function (exports, Ember, PaginationMixin, SettingsMenuMixin, boundOneWay) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].ArrayController.extend(PaginationMixin['default'], SettingsMenuMixin['default'], {\n        tags: Ember['default'].computed.alias('model'),\n\n        activeTag: null,\n        activeTagNameScratch: boundOneWay['default']('activeTag.name'),\n        activeTagSlugScratch: boundOneWay['default']('activeTag.slug'),\n        activeTagDescriptionScratch: boundOneWay['default']('activeTag.description'),\n        activeTagMetaTitleScratch: boundOneWay['default']('activeTag.meta_title'),\n        activeTagMetaDescriptionScratch: boundOneWay['default']('activeTag.meta_description'),\n\n        init: function init(options) {\n            options = options || {};\n            options.modelType = 'tag';\n            this._super(options);\n        },\n\n        application: Ember['default'].inject.controller(),\n        config: Ember['default'].inject.service(),\n        notifications: Ember['default'].inject.service(),\n\n        showErrors: function showErrors(errors) {\n            errors = Ember['default'].isArray(errors) ? errors : [errors];\n            this.get('notifications').showErrors(errors);\n        },\n\n        saveActiveTagProperty: function saveActiveTagProperty(propKey, newValue) {\n            var activeTag = this.get('activeTag'),\n                currentValue = activeTag.get(propKey),\n                self = this;\n\n            newValue = newValue.trim();\n\n            // Quit if there was no change\n            if (newValue === currentValue) {\n                return;\n            }\n\n            activeTag.set(propKey, newValue);\n\n            this.get('notifications').closePassive();\n\n            activeTag.save()['catch'](function (errors) {\n                self.showErrors(errors);\n            });\n        },\n\n        seoTitle: Ember['default'].computed('scratch', 'activeTagNameScratch', 'activeTagMetaTitleScratch', function () {\n            var metaTitle = this.get('activeTagMetaTitleScratch') || '';\n\n            metaTitle = metaTitle.length > 0 ? metaTitle : this.get('activeTagNameScratch');\n\n            if (metaTitle && metaTitle.length > 70) {\n                metaTitle = metaTitle.substring(0, 70).trim();\n                metaTitle = Ember['default'].Handlebars.Utils.escapeExpression(metaTitle);\n                metaTitle = Ember['default'].String.htmlSafe(metaTitle + '&hellip;');\n            }\n\n            return metaTitle;\n        }),\n\n        seoURL: Ember['default'].computed('activeTagSlugScratch', function () {\n            var blogUrl = this.get('config.blogUrl'),\n                seoSlug = this.get('activeTagSlugScratch') ? this.get('activeTagSlugScratch') : '',\n                seoURL = blogUrl + '/tag/' + seoSlug;\n\n            // only append a slash to the URL if the slug exists\n            if (seoSlug) {\n                seoURL += '/';\n            }\n\n            if (seoURL.length > 70) {\n                seoURL = seoURL.substring(0, 70).trim();\n                seoURL = Ember['default'].String.htmlSafe(seoURL + '&hellip;');\n            }\n\n            return seoURL;\n        }),\n\n        seoDescription: Ember['default'].computed('scratch', 'activeTagDescriptionScratch', 'activeTagMetaDescriptionScratch', function () {\n            var metaDescription = this.get('activeTagMetaDescriptionScratch') || '';\n\n            metaDescription = metaDescription.length > 0 ? metaDescription : this.get('activeTagDescriptionScratch');\n\n            if (metaDescription && metaDescription.length > 156) {\n                metaDescription = metaDescription.substring(0, 156).trim();\n                metaDescription = Ember['default'].Handlebars.Utils.escapeExpression(metaDescription);\n                metaDescription = Ember['default'].String.htmlSafe(metaDescription + '&hellip;');\n            }\n\n            return metaDescription;\n        }),\n\n        actions: {\n            newTag: function newTag() {\n                this.set('activeTag', this.store.createRecord('tag', { post_count: 0 }));\n                this.send('openSettingsMenu');\n            },\n\n            editTag: function editTag(tag) {\n                this.set('activeTag', tag);\n                this.send('openSettingsMenu');\n            },\n\n            saveActiveTagName: function saveActiveTagName(name) {\n                this.saveActiveTagProperty('name', name);\n            },\n\n            saveActiveTagSlug: function saveActiveTagSlug(slug) {\n                this.saveActiveTagProperty('slug', slug);\n            },\n\n            saveActiveTagDescription: function saveActiveTagDescription(description) {\n                this.saveActiveTagProperty('description', description);\n            },\n\n            saveActiveTagMetaTitle: function saveActiveTagMetaTitle(metaTitle) {\n                this.saveActiveTagProperty('meta_title', metaTitle);\n            },\n\n            saveActiveTagMetaDescription: function saveActiveTagMetaDescription(metaDescription) {\n                this.saveActiveTagProperty('meta_description', metaDescription);\n            },\n\n            setCoverImage: function setCoverImage(image) {\n                this.saveActiveTagProperty('image', image);\n            },\n\n            clearCoverImage: function clearCoverImage() {\n                this.saveActiveTagProperty('image', '');\n            },\n\n            closeNavMenu: function closeNavMenu() {\n                this.get('application').send('closeNavMenu');\n            }\n        }\n    });\n\n});","define('ghost/controllers/setup', ['exports', 'ember', 'ic-ajax', 'ghost/mixins/validation-engine'], function (exports, Ember, ic_ajax, ValidationEngine) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Controller.extend(ValidationEngine['default'], {\n        blogTitle: null,\n        name: null,\n        email: null,\n        password: null,\n        submitting: false,\n\n        // ValidationEngine settings\n        validationType: 'setup',\n\n        ghostPaths: Ember['default'].inject.service('ghost-paths'),\n        notifications: Ember['default'].inject.service(),\n\n        actions: {\n            setup: function setup() {\n                var self = this,\n                    data = self.getProperties('blogTitle', 'name', 'email', 'password'),\n                    notifications = this.get('notifications');\n\n                notifications.closePassive();\n\n                this.toggleProperty('submitting');\n                this.validate({ format: false }).then(function () {\n                    ic_ajax.request({\n                        url: self.get('ghostPaths.url').api('authentication', 'setup'),\n                        type: 'POST',\n                        data: {\n                            setup: [{\n                                name: data.name,\n                                email: data.email,\n                                password: data.password,\n                                blogTitle: data.blogTitle\n                            }]\n                        }\n                    }).then(function () {\n                        self.get('session').authenticate('simple-auth-authenticator:oauth2-password-grant', {\n                            identification: self.get('email'),\n                            password: self.get('password')\n                        });\n                    })['catch'](function (resp) {\n                        self.toggleProperty('submitting');\n                        notifications.showAPIError(resp);\n                    });\n                })['catch'](function (errors) {\n                    self.toggleProperty('submitting');\n                    notifications.showErrors(errors);\n                });\n            }\n        }\n    });\n\n});","define('ghost/controllers/setup/three', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    var SetupThreeController = Ember['default'].Controller.extend({\n        notifications: Ember['default'].inject.service(),\n        users: '',\n        usersArray: Ember['default'].computed('users', function () {\n            var users = this.get('users').split('\\n').filter(function (email) {\n                return email.trim().length > 0;\n            });\n\n            return users.uniq();\n        }),\n        validUsersArray: Ember['default'].computed('usersArray', function () {\n            return this.get('usersArray').filter(function (user) {\n                return validator.isEmail(user);\n            });\n        }),\n        validateUsers: Ember['default'].computed('usersArray', function () {\n            var errors = [];\n\n            this.get('usersArray').forEach(function (user) {\n                if (!validator.isEmail(user)) {\n                    errors.push({\n                        user: user,\n                        error: 'email'\n                    });\n                }\n            });\n\n            return errors.length === 0 ? true : errors;\n        }),\n        numUsers: Ember['default'].computed('validUsersArray', function () {\n            return this.get('validUsersArray').length;\n        }),\n        buttonText: Ember['default'].computed('usersArray', function () {\n            var num = this.get('usersArray').length,\n                user;\n\n            if (num > 0) {\n                user = num === 1 ? 'user' : 'users';\n                user = num + ' ' + user;\n            } else {\n                user = 'some users';\n            }\n\n            return 'Invite ' + user;\n        }),\n        buttonClass: Ember['default'].computed('validateUsers', 'numUsers', function () {\n            if (this.get('validateUsers') === true && this.get('numUsers') > 0) {\n                return 'btn-green';\n            } else {\n                return 'btn-minor';\n            }\n        }),\n        authorRole: Ember['default'].computed(function () {\n            return this.store.find('role').then(function (roles) {\n                return roles.findBy('name', 'Author');\n            });\n        }),\n        actions: {\n            invite: function invite() {\n                var self = this,\n                    validationErrors = this.get('validateUsers'),\n                    users = this.get('usersArray'),\n                    errorMessages,\n                    notifications = this.get('notifications'),\n                    invitationsString;\n\n                if (validationErrors === true && users.length > 0) {\n                    this.get('authorRole').then(function (authorRole) {\n                        Ember['default'].RSVP.Promise.all(users.map(function (user) {\n                            var newUser = self.store.createRecord('user', {\n                                email: user,\n                                status: 'invited',\n                                role: authorRole\n                            });\n\n                            return newUser.save().then(function () {\n                                return {\n                                    email: user,\n                                    success: newUser.get('status') === 'invited'\n                                };\n                            })['catch'](function () {\n                                return {\n                                    email: user,\n                                    success: false\n                                };\n                            });\n                        })).then(function (invites) {\n                            var successCount = 0,\n                                erroredEmails = [],\n                                message;\n\n                            invites.forEach(function (invite) {\n                                if (invite.success) {\n                                    successCount++;\n                                } else {\n                                    erroredEmails.push(invite.email);\n                                }\n                            });\n\n                            if (erroredEmails.length > 0) {\n                                message = 'Failed to send ' + erroredEmails.length + ' invitations: ';\n                                message += erroredEmails.join(', ');\n                                notifications.showError(message, { delayed: successCount > 0 });\n                            }\n\n                            if (successCount > 0) {\n                                // pluralize\n                                invitationsString = successCount > 1 ? 'invitations' : 'invitation';\n\n                                notifications.showSuccess(successCount + ' ' + invitationsString + ' sent!', { delayed: true });\n                                self.transitionTo('posts.index');\n                            }\n                        });\n                    });\n                } else if (users.length === 0) {\n                    notifications.showError('No users to invite.');\n                } else {\n                    errorMessages = validationErrors.map(function (error) {\n                        // Only one error type here so far, but one day the errors might be more detailed\n                        switch (error.error) {\n                            case 'email':\n                                return { message: error.user + ' is not a valid email.' };\n                        }\n                    });\n\n                    notifications.showErrors(errorMessages);\n                }\n            }\n        }\n    });\n\n    exports['default'] = SetupThreeController;\n\n});","define('ghost/controllers/setup/two', ['exports', 'ember', 'ic-ajax', 'ghost/mixins/validation-engine'], function (exports, Ember, ic_ajax, ValidationEngine) {\n\n    'use strict';\n\n    /* global md5 */\n    exports['default'] = Ember['default'].Controller.extend(ValidationEngine['default'], {\n        size: 90,\n        blogTitle: null,\n        name: null,\n        email: '',\n        password: null,\n        image: null,\n        submitting: false,\n\n        ghostPaths: Ember['default'].inject.service('ghost-paths'),\n        notifications: Ember['default'].inject.service(),\n        application: Ember['default'].inject.controller(),\n\n        gravatarUrl: Ember['default'].computed('email', function () {\n            var email = this.get('email'),\n                size = this.get('size');\n\n            return 'http://www.gravatar.com/avatar/' + md5(email) + '?s=' + size + '&d=blank';\n        }),\n\n        userImage: Ember['default'].computed('gravatarUrl', function () {\n            return this.get('image') || this.get('gravatarUrl');\n        }),\n\n        userImageBackground: Ember['default'].computed('userImage', function () {\n            return 'background-image: url(' + this.get('userImage') + ')';\n        }),\n\n        // ValidationEngine settings\n        validationType: 'setup',\n\n        actions: {\n            setup: function setup() {\n                var self = this,\n                    notifications = this.get('notifications'),\n                    data = self.getProperties('blogTitle', 'name', 'email', 'password');\n\n                notifications.closePassive();\n\n                this.toggleProperty('submitting');\n                this.validate({ format: false }).then(function () {\n                    ic_ajax.request({\n                        url: self.get('ghostPaths.url').api('authentication', 'setup'),\n                        type: 'POST',\n                        data: {\n                            setup: [{\n                                name: data.name,\n                                email: data.email,\n                                password: data.password,\n                                blogTitle: data.blogTitle\n                            }]\n                        }\n                    }).then(function () {\n                        // Don't call the success handler, otherwise we will be redirected to admin\n                        self.get('application').set('skipAuthSuccessHandler', true);\n\n                        self.get('session').authenticate('simple-auth-authenticator:oauth2-password-grant', {\n                            identification: self.get('email'),\n                            password: self.get('password')\n                        }).then(function () {\n                            self.set('password', '');\n                            self.transitionToRoute('setup.three');\n                        });\n                    })['catch'](function (resp) {\n                        self.toggleProperty('submitting');\n                        notifications.showAPIError(resp);\n                    });\n                })['catch'](function (errors) {\n                    self.toggleProperty('submitting');\n                    notifications.showErrors(errors);\n                });\n            }\n        }\n    });\n\n});","define('ghost/controllers/signin', ['exports', 'ember', 'ghost/mixins/validation-engine', 'ic-ajax'], function (exports, Ember, ValidationEngine, ic_ajax) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Controller.extend(ValidationEngine['default'], {\n        validationType: 'signin',\n\n        submitting: false,\n\n        ghostPaths: Ember['default'].inject.service('ghost-paths'),\n        notifications: Ember['default'].inject.service(),\n\n        actions: {\n            authenticate: function authenticate() {\n                var model = this.get('model'),\n                    authStrategy = 'simple-auth-authenticator:oauth2-password-grant',\n                    data = model.getProperties('identification', 'password');\n\n                this.get('session').authenticate(authStrategy, data)['catch'](function () {});\n            },\n\n            validateAndAuthenticate: function validateAndAuthenticate() {\n                var self = this;\n\n                // Manually trigger events for input fields, ensuring legacy compatibility with\n                // browsers and password managers that don't send proper events on autofill\n                $('#login').find('input').trigger('change');\n\n                this.validate({ format: false }).then(function () {\n                    self.get('notifications').closePassive();\n                    self.send('authenticate');\n                })['catch'](function (errors) {\n                    self.get('notifications').showErrors(errors);\n                });\n            },\n\n            forgotten: function forgotten() {\n                var email = this.get('model.identification'),\n                    notifications = this.get('notifications'),\n                    self = this;\n\n                if (!email) {\n                    return notifications.showError('Enter email address to reset password.');\n                }\n\n                self.set('submitting', true);\n\n                ic_ajax.request({\n                    url: self.get('ghostPaths.url').api('authentication', 'passwordreset'),\n                    type: 'POST',\n                    data: {\n                        passwordreset: [{\n                            email: email\n                        }]\n                    }\n                }).then(function () {\n                    self.set('submitting', false);\n                    notifications.showSuccess('Please check your email for instructions.');\n                })['catch'](function (resp) {\n                    self.set('submitting', false);\n                    notifications.showAPIError(resp, { defaultErrorText: 'There was a problem with the reset, please try again.' });\n                });\n            }\n        }\n    });\n\n    // if authentication fails a rejected promise will be returned.\n    // it needs to be caught so it doesn't generate an exception in the console,\n    // but it's actually \"handled\" by the sessionAuthenticationFailed action handler.\n\n});","define('ghost/controllers/signup', ['exports', 'ember', 'ic-ajax', 'ghost/mixins/validation-engine'], function (exports, Ember, ic_ajax, ValidationEngine) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Controller.extend(ValidationEngine['default'], {\n        // ValidationEngine settings\n        validationType: 'signup',\n\n        submitting: false,\n\n        ghostPaths: Ember['default'].inject.service('ghost-paths'),\n        notifications: Ember['default'].inject.service(),\n\n        actions: {\n            signup: function signup() {\n                var self = this,\n                    model = this.get('model'),\n                    data = model.getProperties('name', 'email', 'password', 'token'),\n                    notifications = this.get('notifications');\n\n                notifications.closePassive();\n\n                this.toggleProperty('submitting');\n                this.validate({ format: false }).then(function () {\n                    ic_ajax.request({\n                        url: self.get('ghostPaths.url').api('authentication', 'invitation'),\n                        type: 'POST',\n                        dataType: 'json',\n                        data: {\n                            invitation: [{\n                                name: data.name,\n                                email: data.email,\n                                password: data.password,\n                                token: data.token\n                            }]\n                        }\n                    }).then(function () {\n                        self.get('session').authenticate('simple-auth-authenticator:oauth2-password-grant', {\n                            identification: self.get('model.email'),\n                            password: self.get('model.password')\n                        });\n                    })['catch'](function (resp) {\n                        self.toggleProperty('submitting');\n                        notifications.showAPIError(resp);\n                    });\n                })['catch'](function (errors) {\n                    self.toggleProperty('submitting');\n                    notifications.showErrors(errors);\n                });\n            }\n        }\n    });\n\n});","define('ghost/controllers/team/index', ['exports', 'ember', 'ghost/mixins/pagination-controller'], function (exports, Ember, PaginationControllerMixin) {\n\n    'use strict';\n\n    var TeamIndexController = Ember['default'].ArrayController.extend(PaginationControllerMixin['default'], {\n        init: function init() {\n            // let the PaginationControllerMixin know what type of model we will be paginating\n            // this is necessary because we do not have access to the model inside the Controller::init method\n            this._super({ modelType: 'user' });\n        },\n\n        users: Ember['default'].computed.alias('model'),\n\n        activeUsers: Ember['default'].computed.filter('users', function (user) {\n            return /^active|warn-[1-4]|locked$/.test(user.get('status'));\n        }),\n\n        invitedUsers: Ember['default'].computed.filter('users', function (user) {\n            var status = user.get('status');\n\n            return status === 'invited' || status === 'invited-pending';\n        })\n    });\n\n    exports['default'] = TeamIndexController;\n\n});","define('ghost/controllers/team/user', ['exports', 'ember', 'ghost/models/slug-generator', 'ghost/utils/isNumber', 'ghost/utils/bound-one-way'], function (exports, Ember, SlugGenerator, isNumber, boundOneWay) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Controller.extend({\n        ghostPaths: Ember['default'].inject.service('ghost-paths'),\n        notifications: Ember['default'].inject.service(),\n\n        user: Ember['default'].computed.alias('model'),\n\n        email: Ember['default'].computed.readOnly('model.email'),\n\n        slugValue: boundOneWay['default']('model.slug'),\n\n        lastPromise: null,\n\n        coverDefault: Ember['default'].computed('ghostPaths', function () {\n            return this.get('ghostPaths.url').asset('/shared/img/user-cover.png');\n        }),\n\n        coverImageBackground: Ember['default'].computed('user.cover', 'coverDefault', function () {\n            var url = this.get('user.cover') || this.get('coverDefault');\n\n            return ('background-image: url(' + url + ')').htmlSafe();\n        }),\n\n        coverTitle: Ember['default'].computed('user.name', function () {\n            return this.get('user.name') + '\\'s Cover Image';\n        }),\n\n        userDefault: Ember['default'].computed('ghostPaths', function () {\n            return this.get('ghostPaths.url').asset('/shared/img/user-image.png');\n        }),\n\n        userImageBackground: Ember['default'].computed('user.image', 'userDefault', function () {\n            var url = this.get('user.image') || this.get('userDefault');\n\n            return ('background-image: url(' + url + ')').htmlSafe();\n        }),\n\n        last_login: Ember['default'].computed('user.last_login', function () {\n            var lastLogin = this.get('user.last_login');\n\n            return lastLogin ? lastLogin.fromNow() : '(Never)';\n        }),\n\n        created_at: Ember['default'].computed('user.created_at', function () {\n            var createdAt = this.get('user.created_at');\n\n            return createdAt ? createdAt.fromNow() : '';\n        }),\n\n        // Lazy load the slug generator for slugPlaceholder\n        slugGenerator: Ember['default'].computed(function () {\n            return SlugGenerator['default'].create({\n                ghostPaths: this.get('ghostPaths'),\n                slugType: 'user'\n            });\n        }),\n\n        actions: {\n            changeRole: function changeRole(newRole) {\n                this.set('model.role', newRole);\n            },\n\n            revoke: function revoke() {\n                var self = this,\n                    model = this.get('model'),\n                    email = this.get('email');\n\n                // reload the model to get the most up-to-date user information\n                model.reload().then(function () {\n                    if (model.get('invited')) {\n                        model.destroyRecord().then(function () {\n                            var notificationText = 'Invitation revoked. (' + email + ')';\n\n                            self.get('notifications').showSuccess(notificationText, false);\n                        })['catch'](function (error) {\n                            self.get('notifications').showAPIError(error);\n                        });\n                    } else {\n                        // if the user is no longer marked as \"invited\", then show a warning and reload the route\n                        self.get('target').send('reload');\n                        self.get('notifications').showError('This user has already accepted the invitation.', { delayed: 500 });\n                    }\n                });\n            },\n\n            resend: function resend() {\n                var self = this;\n\n                this.get('model').resendInvite().then(function (result) {\n                    var notificationText = 'Invitation resent! (' + self.get('email') + ')';\n                    // If sending the invitation email fails, the API will still return a status of 201\n                    // but the user's status in the response object will be 'invited-pending'.\n                    if (result.users[0].status === 'invited-pending') {\n                        self.get('notifications').showWarn('Invitation email was not sent.  Please try resending.');\n                    } else {\n                        self.get('model').set('status', result.users[0].status);\n                        self.get('notifications').showSuccess(notificationText);\n                    }\n                })['catch'](function (error) {\n                    self.get('notifications').showAPIError(error);\n                });\n            },\n\n            save: function save() {\n                var user = this.get('user'),\n                    slugValue = this.get('slugValue'),\n                    afterUpdateSlug = this.get('lastPromise'),\n                    promise,\n                    slugChanged,\n                    self = this;\n\n                if (user.get('slug') !== slugValue) {\n                    slugChanged = true;\n                    user.set('slug', slugValue);\n                }\n\n                promise = Ember['default'].RSVP.resolve(afterUpdateSlug).then(function () {\n                    return user.save({ format: false });\n                }).then(function (model) {\n                    var currentPath, newPath;\n\n                    self.get('notifications').showSuccess('Settings successfully saved.');\n\n                    // If the user's slug has changed, change the URL and replace\n                    // the history so refresh and back button still work\n                    if (slugChanged) {\n                        currentPath = window.history.state.path;\n\n                        newPath = currentPath.split('/');\n                        newPath[newPath.length - 2] = model.get('slug');\n                        newPath = newPath.join('/');\n\n                        window.history.replaceState({ path: newPath }, '', newPath);\n                    }\n\n                    return model;\n                })['catch'](function (errors) {\n                    self.get('notifications').showErrors(errors);\n                });\n\n                this.set('lastPromise', promise);\n            },\n\n            password: function password() {\n                var user = this.get('user'),\n                    self = this;\n\n                if (user.get('isPasswordValid')) {\n                    user.saveNewPassword().then(function (model) {\n                        // Clear properties from view\n                        user.setProperties({\n                            password: '',\n                            newPassword: '',\n                            ne2Password: ''\n                        });\n\n                        self.get('notifications').showSuccess('Password updated.');\n\n                        return model;\n                    })['catch'](function (errors) {\n                        self.get('notifications').showAPIError(errors);\n                    });\n                } else {\n                    self.get('notifications').showErrors(user.get('passwordValidationErrors'));\n                }\n            },\n\n            updateSlug: function updateSlug(newSlug) {\n                var self = this,\n                    afterSave = this.get('lastPromise'),\n                    promise;\n\n                promise = Ember['default'].RSVP.resolve(afterSave).then(function () {\n                    var slug = self.get('model.slug');\n\n                    newSlug = newSlug || slug;\n\n                    newSlug = newSlug.trim();\n\n                    // Ignore unchanged slugs or candidate slugs that are empty\n                    if (!newSlug || slug === newSlug) {\n                        self.set('slugValue', slug);\n\n                        return;\n                    }\n\n                    return self.get('slugGenerator').generateSlug(newSlug).then(function (serverSlug) {\n                        // If after getting the sanitized and unique slug back from the API\n                        // we end up with a slug that matches the existing slug, abort the change\n                        if (serverSlug === slug) {\n                            return;\n                        }\n\n                        // Because the server transforms the candidate slug by stripping\n                        // certain characters and appending a number onto the end of slugs\n                        // to enforce uniqueness, there are cases where we can get back a\n                        // candidate slug that is a duplicate of the original except for\n                        // the trailing incrementor (e.g., this-is-a-slug and this-is-a-slug-2)\n\n                        // get the last token out of the slug candidate and see if it's a number\n                        var slugTokens = serverSlug.split('-'),\n                            check = Number(slugTokens.pop());\n\n                        // if the candidate slug is the same as the existing slug except\n                        // for the incrementor then the existing slug should be used\n                        if (isNumber['default'](check) && check > 0) {\n                            if (slug === slugTokens.join('-') && serverSlug !== newSlug) {\n                                self.set('slugValue', slug);\n\n                                return;\n                            }\n                        }\n\n                        self.set('slugValue', serverSlug);\n                    });\n                });\n\n                this.set('lastPromise', promise);\n            }\n        }\n    });\n\n});","define('ghost/helpers/gh-count-characters', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    var countCharacters = Ember['default'].HTMLBars.makeBoundHelper(function (arr /* hashParams */) {\n        var el = document.createElement('span'),\n            length,\n            content;\n\n        if (!arr || !arr.length) {\n            return;\n        }\n\n        content = arr[0] || '';\n        length = content.length;\n\n        el.className = 'word-count';\n\n        if (length > 180) {\n            el.style.color = '#E25440';\n        } else {\n            el.style.color = '#9E9D95';\n        }\n\n        el.innerHTML = 200 - length;\n\n        return Ember['default'].String.htmlSafe(el.outerHTML);\n    });\n\n    exports['default'] = countCharacters;\n\n});","define('ghost/helpers/gh-count-down-characters', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    var countDownCharacters = Ember['default'].HTMLBars.makeBoundHelper(function (arr /* hashParams */) {\n        var el = document.createElement('span'),\n            content,\n            maxCharacters,\n            length;\n\n        if (!arr || arr.length < 2) {\n            return;\n        }\n\n        content = arr[0] || '';\n        maxCharacters = arr[1];\n        length = content.length;\n\n        el.className = 'word-count';\n\n        if (length > maxCharacters) {\n            el.style.color = '#E25440';\n        } else {\n            el.style.color = '#9FBB58';\n        }\n\n        el.innerHTML = length;\n\n        return Ember['default'].String.htmlSafe(el.outerHTML);\n    });\n\n    exports['default'] = countDownCharacters;\n\n});","define('ghost/helpers/gh-count-words', ['exports', 'ember', 'ghost/utils/word-count'], function (exports, Ember, counter) {\n\n    'use strict';\n\n    var countWords = Ember['default'].HTMLBars.makeBoundHelper(function (arr /* hashParams */) {\n        if (!arr || !arr.length) {\n            return;\n        }\n\n        var markdown, count;\n\n        markdown = arr[0] || '';\n\n        if (/^\\s*$/.test(markdown)) {\n            return '0 words';\n        }\n\n        count = counter['default'](markdown);\n\n        return count + (count === 1 ? ' word' : ' words');\n    });\n\n    exports['default'] = countWords;\n\n});","define('ghost/helpers/gh-format-html', ['exports', 'ember', 'ghost/utils/caja-sanitizers'], function (exports, Ember, cajaSanitizers) {\n\n    'use strict';\n\n    var formatHTML = Ember['default'].HTMLBars.makeBoundHelper(function (arr /* hashParams */) {\n        if (!arr || !arr.length) {\n            return;\n        }\n\n        var escapedhtml = arr[0] || '';\n\n        // replace script and iFrame\n        escapedhtml = escapedhtml.replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, '<pre class=\"js-embed-placeholder\">Embedded JavaScript</pre>');\n        escapedhtml = escapedhtml.replace(/<iframe\\b[^<]*(?:(?!<\\/iframe>)<[^<]*)*<\\/iframe>/gi, '<pre class=\"iframe-embed-placeholder\">Embedded iFrame</pre>');\n\n        // sanitize HTML\n        // jscs:disable requireCamelCaseOrUpperCaseIdentifiers\n        escapedhtml = html_sanitize(escapedhtml, cajaSanitizers['default'].url, cajaSanitizers['default'].id);\n        // jscs:enable requireCamelCaseOrUpperCaseIdentifiers\n\n        return Ember['default'].String.htmlSafe(escapedhtml);\n    });\n\n    exports['default'] = formatHTML;\n\n});","define('ghost/helpers/gh-format-markdown', ['exports', 'ember', 'ghost/utils/caja-sanitizers'], function (exports, Ember, cajaSanitizers) {\n\n    'use strict';\n\n    var showdown, formatMarkdown;\n\n    showdown = new Showdown.converter({ extensions: ['ghostimagepreview', 'ghostgfm', 'footnotes', 'highlight'] });\n\n    formatMarkdown = Ember['default'].HTMLBars.makeBoundHelper(function (arr /* hashParams */) {\n        if (!arr || !arr.length) {\n            return;\n        }\n\n        var escapedhtml = '',\n            markdown = arr[0] || '';\n\n        // convert markdown to HTML\n        escapedhtml = showdown.makeHtml(markdown);\n\n        // replace script and iFrame\n        escapedhtml = escapedhtml.replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, '<pre class=\"js-embed-placeholder\">Embedded JavaScript</pre>');\n        escapedhtml = escapedhtml.replace(/<iframe\\b[^<]*(?:(?!<\\/iframe>)<[^<]*)*<\\/iframe>/gi, '<pre class=\"iframe-embed-placeholder\">Embedded iFrame</pre>');\n\n        // sanitize html\n        // jscs:disable requireCamelCaseOrUpperCaseIdentifiers\n        escapedhtml = html_sanitize(escapedhtml, cajaSanitizers['default'].url, cajaSanitizers['default'].id);\n        // jscs:enable requireCamelCaseOrUpperCaseIdentifiers\n\n        return Ember['default'].String.htmlSafe(escapedhtml);\n    });\n\n    exports['default'] = formatMarkdown;\n\n});","define('ghost/helpers/gh-format-timeago', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    var formatTimeago = Ember['default'].HTMLBars.makeBoundHelper(function (arr /* hashParams */) {\n        if (!arr || !arr.length) {\n            return;\n        }\n\n        var timeago = arr[0];\n\n        return moment(timeago).fromNow();\n        // stefanpenner says cool for small number of timeagos.\n        // For large numbers moment sucks => single Ember.Object based clock better\n        // https://github.com/manuelmitasch/ghost-admin-ember-demo/commit/fba3ab0a59238290c85d4fa0d7c6ed1be2a8a82e#commitcomment-5396524\n    });\n\n    exports['default'] = formatTimeago;\n\n});","define('ghost/helpers/gh-path', ['exports', 'ember', 'ghost/utils/ghost-paths'], function (exports, Ember, ghostPaths) {\n\n    'use strict';\n\n    function ghostPathsHelper(path, url) {\n        var base,\n            argsLength = arguments.length,\n            paths = ghostPaths['default']();\n\n        // function is always invoked with at least one parameter, so if\n        // arguments.length is 1 there were 0 arguments passed in explicitly\n        if (argsLength === 1) {\n            path = 'blog';\n        } else if (argsLength === 2 && !/^(blog|admin|api)$/.test(path)) {\n            url = path;\n            path = 'blog';\n        }\n\n        switch (path.toString()) {\n            case 'blog':\n                base = paths.blogRoot;\n                break;\n            case 'admin':\n                base = paths.adminRoot;\n                break;\n            case 'api':\n                base = paths.apiRoot;\n                break;\n            default:\n                base = paths.blogRoot;\n                break;\n        }\n\n        // handle leading and trailing slashes\n\n        base = base[base.length - 1] !== '/' ? base + '/' : base;\n\n        if (url && url.length > 0) {\n            if (url[0] === '/') {\n                url = url.substr(1);\n            }\n\n            base = base + url;\n        }\n\n        return Ember['default'].String.htmlSafe(base);\n    }\n\n    exports['default'] = ghostPathsHelper;\n\n});","define('ghost/helpers/gh-user-can', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    exports.ghUserCan = ghUserCan;\n\n    function ghUserCan(params) {\n        if (params[1] === 'admin') {\n            return !!(params[0].get('isOwner') || params[0].get('isAdmin'));\n        } else if (params[1] === 'editor') {\n            return !!(params[0].get('isOwner') || params[0].get('isAdmin') || params[0].get('isEditor'));\n        }\n        return false;\n    }\n\n    exports['default'] = Ember['default'].HTMLBars.makeBoundHelper(ghUserCan);\n\n});","define('ghost/initializers/app-version', ['exports', 'ghost/config/environment', 'ember'], function (exports, config, Ember) {\n\n  'use strict';\n\n  var classify = Ember['default'].String.classify;\n  var registered = false;\n\n  exports['default'] = {\n    name: 'App Version',\n    initialize: function initialize(container, application) {\n      if (!registered) {\n        var appName = classify(application.toString());\n        Ember['default'].libraries.register(appName, config['default'].APP.version);\n        registered = true;\n      }\n    }\n  };\n\n});","define('ghost/initializers/ember-cli-fastclick', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  var EmberCliFastclickInitializer = {\n    name: 'fastclick',\n\n    initialize: function initialize() {\n      Ember['default'].run.schedule('afterRender', function () {\n        FastClick.attach(document.body);\n      });\n    }\n  };\n\n  exports['default'] = EmberCliFastclickInitializer;\n\n});","define('ghost/initializers/export-application-global', ['exports', 'ember', 'ghost/config/environment'], function (exports, Ember, config) {\n\n  'use strict';\n\n  exports.initialize = initialize;\n\n  function initialize(container, application) {\n    var classifiedName = Ember['default'].String.classify(config['default'].modulePrefix);\n\n    if (config['default'].exportApplicationGlobal && !window[classifiedName]) {\n      window[classifiedName] = application;\n    }\n  }\n\n  ;\n\n  exports['default'] = {\n    name: 'export-application-global',\n\n    initialize: initialize\n  };\n\n});","define('ghost/initializers/simple-auth-env', ['exports', 'ghost/config/environment', 'ghost/utils/ghost-paths'], function (exports, ENV, ghostPaths) {\n\n    'use strict';\n\n    var Ghost = ghostPaths['default']();\n\n    exports['default'] = {\n        name: 'simple-auth-env',\n        before: 'simple-auth-oauth2',\n\n        initialize: function initialize() {\n            ENV['default']['simple-auth-oauth2'].serverTokenEndpoint = Ghost.apiRoot + '/authentication/token';\n            ENV['default']['simple-auth-oauth2'].serverTokenRevocationEndpoint = Ghost.apiRoot + '/authentication/revoke';\n\n            ENV['default']['simple-auth'].localStorageKey = 'ghost' + (Ghost.subdir.indexOf('/') === 0 ? '-' + Ghost.subdir.substr(1) : '') + ':session';\n        }\n    };\n\n});","define('ghost/initializers/simple-auth-oauth2', ['exports', 'simple-auth-oauth2/configuration', 'simple-auth-oauth2/authenticators/oauth2', 'simple-auth-oauth2/authorizers/oauth2', 'ghost/config/environment'], function (exports, Configuration, Authenticator, Authorizer, ENV) {\n\n  'use strict';\n\n  exports['default'] = {\n    name: 'simple-auth-oauth2',\n    before: 'simple-auth',\n    initialize: function initialize(container, application) {\n      Configuration['default'].load(container, ENV['default']['simple-auth-oauth2'] || {});\n      container.register('simple-auth-authorizer:oauth2-bearer', Authorizer['default']);\n      container.register('simple-auth-authenticator:oauth2-password-grant', Authenticator['default']);\n    }\n  };\n\n});","define('ghost/initializers/simple-auth', ['exports', 'simple-auth/configuration', 'simple-auth/setup', 'ghost/config/environment'], function (exports, Configuration, setup, ENV) {\n\n  'use strict';\n\n  exports['default'] = {\n    name: 'simple-auth',\n    initialize: function initialize(container, application) {\n      Configuration['default'].load(container, ENV['default']['simple-auth'] || {});\n      setup['default'](container, application);\n    }\n  };\n\n});","define('ghost/initializers/store-injector', ['exports'], function (exports) {\n\n    'use strict';\n\n    var StoreInjector = {\n        name: 'store-injector',\n        after: 'store',\n\n        initialize: function initialize(container, application) {\n            application.inject('component:gh-role-selector', 'store', 'store:main');\n        }\n    };\n\n    exports['default'] = StoreInjector;\n\n});","define('ghost/initializers/trailing-history', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    var trailingHistory, registerTrailingLocationHistory;\n\n    trailingHistory = Ember['default'].HistoryLocation.extend({\n        formatURL: function formatURL() {\n            // jscs: disable\n            return this._super.apply(this, arguments).replace(/\\/?$/, '/');\n            // jscs: enable\n        }\n    });\n\n    registerTrailingLocationHistory = {\n        name: 'registerTrailingLocationHistory',\n\n        initialize: function initialize(container, application) {\n            application.register('location:trailing-history', trailingHistory);\n        }\n    };\n\n    exports['default'] = registerTrailingLocationHistory;\n\n});","define('ghost/instance-initializers/authentication', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    var AuthenticationInitializer = {\n        name: 'authentication',\n\n        initialize: function initialize(instance) {\n            var store = instance.container.lookup('store:main'),\n                Session = instance.container.lookup('simple-auth-session:main'),\n                OAuth2 = instance.container.lookup('simple-auth-authenticator:oauth2-password-grant');\n\n            Session.reopen({\n                user: Ember['default'].computed(function () {\n                    return store.find('user', 'me');\n                })\n            });\n\n            OAuth2.reopen({\n                makeRequest: function makeRequest(url, data) {\n                    data.client_id = 'ghost-admin';\n                    return this._super(url, data);\n                }\n            });\n        }\n    };\n\n    exports['default'] = AuthenticationInitializer;\n\n});","define('ghost/mixins/body-event-listener', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    var BodyEventListener = Ember['default'].Mixin.create({\n        bodyElementSelector: 'html',\n        bodyClick: Ember['default'].K,\n\n        init: function init() {\n            this._super();\n\n            return Ember['default'].run.next(this, this._setupDocumentHandlers);\n        },\n\n        willDestroy: function willDestroy() {\n            this._super();\n\n            return this._removeDocumentHandlers();\n        },\n\n        _setupDocumentHandlers: function _setupDocumentHandlers() {\n            if (this._clickHandler) {\n                return;\n            }\n\n            var self = this;\n\n            this._clickHandler = function () {\n                return self.bodyClick();\n            };\n\n            return $(this.get('bodyElementSelector')).on('click', this._clickHandler);\n        },\n\n        _removeDocumentHandlers: function _removeDocumentHandlers() {\n            $(this.get('bodyElementSelector')).off('click', this._clickHandler);\n            this._clickHandler = null;\n        },\n\n        // http://stackoverflow.com/questions/152975/how-to-detect-a-click-outside-an-element\n        click: function click(event) {\n            return event.stopPropagation();\n        }\n    });\n\n    exports['default'] = BodyEventListener;\n\n});","define('ghost/mixins/current-user-settings', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    var CurrentUserSettings = Ember['default'].Mixin.create({\n        transitionAuthor: function transitionAuthor() {\n            var self = this;\n\n            return function (user) {\n                if (user.get('isAuthor')) {\n                    return self.transitionTo('team.user', user);\n                }\n\n                return user;\n            };\n        },\n\n        transitionEditor: function transitionEditor() {\n            var self = this;\n\n            return function (user) {\n                if (user.get('isEditor')) {\n                    return self.transitionTo('team');\n                }\n\n                return user;\n            };\n        }\n    });\n\n    exports['default'] = CurrentUserSettings;\n\n});","define('ghost/mixins/dropdown-mixin', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  var DropdownMixin = Ember['default'].Mixin.create(Ember['default'].Evented, {\n      classNameBindings: ['isOpen:open:closed'],\n      isOpen: false,\n\n      click: function click(event) {\n          this._super(event);\n\n          return event.stopPropagation();\n      }\n  });\n\n  exports['default'] = DropdownMixin;\n\n});","define('ghost/mixins/ed-editor-api', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    var EditorAPI = Ember['default'].Mixin.create({\n        /**\n         * Get Value\n         *\n         * Get the full contents of the textarea\n         *\n         * @returns {String}\n         */\n        getValue: function getValue() {\n            return this.$().val();\n        },\n\n        /**\n         * Get Selection\n         *\n         * Return the currently selected text from the textarea\n         *\n         * @returns {Selection}\n         */\n        getSelection: function getSelection() {\n            return this.$().getSelection();\n        },\n\n        /**\n         * Get Line To Cursor\n         *\n         * Fetch the string of characters from the start of the given line up to the cursor\n         * @returns {{text: string, start: number}}\n         */\n        getLineToCursor: function getLineToCursor() {\n            var selection = this.$().getSelection(),\n                value = this.getValue(),\n                lineStart;\n\n            // Normalise newlines\n            value = value.replace('\\r\\n', '\\n');\n\n            // We want to look at the characters behind the cursor\n            lineStart = value.lastIndexOf('\\n', selection.start - 1) + 1;\n\n            return {\n                text: value.substring(lineStart, selection.start),\n                start: lineStart\n            };\n        },\n\n        /**\n         * Get Line\n         *\n         * Return the string of characters for the line the cursor is currently on\n         *\n         * @returns {{text: string, start: number, end: number}}\n         */\n        getLine: function getLine() {\n            var selection = this.$().getSelection(),\n                value = this.getValue(),\n                lineStart,\n                lineEnd;\n\n            // Normalise newlines\n            value = value.replace('\\r\\n', '\\n');\n\n            // We want to look at the characters behind the cursor\n            lineStart = value.lastIndexOf('\\n', selection.start - 1) + 1;\n            lineEnd = value.indexOf('\\n', selection.start);\n            lineEnd = lineEnd === -1 ? value.length - 1 : lineEnd;\n\n            return {\n                // jscs:disable\n                text: value.substring(lineStart, lineEnd).replace(/^\\n/, ''),\n                // jscs:enable\n                start: lineStart,\n                end: lineEnd\n            };\n        },\n\n        /**\n         * Set Selection\n         *\n         * Set the section of text in the textarea that should be selected by the cursor\n         *\n         * @param {number} start\n         * @param {number} end\n         */\n        setSelection: function setSelection(start, end) {\n            var $textarea = this.$();\n\n            if (start === 'end') {\n                start = $textarea.val().length;\n            }\n\n            end = end || start;\n\n            $textarea.setSelection(start, end);\n        },\n\n        /**\n         * Replace Selection\n         *\n         * @param {String} replacement - the string to replace with\n         * @param {number} replacementStart - where to start replacing\n         * @param {number} [replacementEnd] - when to stop replacing, defaults to replacementStart\n         * @param {String|boolean|Object} [cursorPosition]  - where to put the cursor after replacing\n         *\n         * Cursor position after replacement defaults to the end of the replacement.\n         * Providing selectionStart only will cause the cursor to be placed there, or alternatively a range can be selected\n         * by providing selectionEnd.\n         */\n        replaceSelection: function replaceSelection(replacement, replacementStart, replacementEnd, cursorPosition) {\n            var $textarea = this.$();\n\n            cursorPosition = cursorPosition || 'collapseToEnd';\n            replacementEnd = replacementEnd || replacementStart;\n\n            $textarea.setSelection(replacementStart, replacementEnd);\n\n            if (['select', 'collapseToStart', 'collapseToEnd'].indexOf(cursorPosition) !== -1) {\n                $textarea.replaceSelectedText(replacement, cursorPosition);\n            } else {\n                $textarea.replaceSelectedText(replacement);\n                if (cursorPosition.hasOwnProperty('start')) {\n                    $textarea.setSelection(cursorPosition.start, cursorPosition.end);\n                } else {\n                    $textarea.setSelection(cursorPosition, cursorPosition);\n                }\n            }\n\n            $textarea.focus();\n            // Tell the editor it has changed, as programmatic replacements won't trigger this automatically\n            this.sendAction('onChange');\n        }\n    });\n\n    exports['default'] = EditorAPI;\n\n});","define('ghost/mixins/ed-editor-scroll', ['exports', 'ember', 'ghost/utils/set-scroll-classname'], function (exports, Ember, setScrollClassName) {\n\n    'use strict';\n\n    var EditorScroll = Ember['default'].Mixin.create({\n        /**\n         * Determine if the cursor is at the end of the textarea\n         */\n        isCursorAtEnd: function isCursorAtEnd() {\n            var selection = this.$().getSelection(),\n                value = this.getValue(),\n                linesAtEnd = 3,\n                stringAfterCursor,\n                match;\n\n            stringAfterCursor = value.substring(selection.end);\n            /* jscs: disable */\n            match = stringAfterCursor.match(/\\n/g);\n            /* jscs: enable */\n\n            if (!match || match.length < linesAtEnd) {\n                return true;\n            }\n\n            return false;\n        },\n\n        /**\n         * Build an object that represents the scroll state\n         */\n        getScrollInfo: function getScrollInfo() {\n            var scroller = this.get('element'),\n                scrollInfo = {\n                top: scroller.scrollTop,\n                height: scroller.scrollHeight,\n                clientHeight: scroller.clientHeight,\n                diff: scroller.scrollHeight - scroller.clientHeight,\n                padding: 50,\n                isCursorAtEnd: this.isCursorAtEnd()\n            };\n\n            return scrollInfo;\n        },\n\n        /**\n         * Calculate if we're within scrollInfo.padding of the end of the document, and scroll the rest of the way\n         */\n        adjustScrollPosition: function adjustScrollPosition() {\n            // If we're receiving change events from the end of the document, i.e the user is typing-at-the-end, update the\n            // scroll position to ensure both panels stay in view and in sync\n            var scrollInfo = this.getScrollInfo();\n            if (scrollInfo.isCursorAtEnd && scrollInfo.diff >= scrollInfo.top && scrollInfo.diff < scrollInfo.top + scrollInfo.padding) {\n                scrollInfo.top += scrollInfo.padding;\n                // Scroll the left pane\n                this.$().scrollTop(scrollInfo.top);\n            }\n        },\n\n        /**\n         * Send the scrollInfo for scrollEvents to the view so that the preview pane can be synced\n         */\n        scrollHandler: function scrollHandler() {\n            this.set('scrollThrottle', Ember['default'].run.throttle(this, function () {\n                this.set('scrollInfo', this.getScrollInfo());\n            }, 10));\n        },\n\n        /**\n         * once the element is in the DOM bind to the events which control scroll behaviour\n         */\n        attachScrollHandlers: function attachScrollHandlers() {\n            var $el = this.$();\n\n            $el.on('keypress', Ember['default'].run.bind(this, this.adjustScrollPosition));\n\n            $el.on('scroll', Ember['default'].run.bind(this, this.scrollHandler));\n            $el.on('scroll', Ember['default'].run.bind($el, setScrollClassName['default'], {\n                target: Ember['default'].$('.js-entry-markdown'),\n                offset: 10\n            }));\n        },\n\n        /**\n         * once the element has been removed from the DOM unbind from the events which control scroll behaviour\n         */\n        detachScrollHandlers: function detachScrollHandlers() {\n            this.$().off('keypress');\n            this.$().off('scroll');\n            Ember['default'].run.cancel(this.get('scrollThrottle'));\n        },\n\n        didInsertElement: function didInsertElement() {\n            this._super();\n\n            this.attachScrollHandlers();\n        },\n\n        willDestroyElement: function willDestroyElement() {\n            this._super();\n\n            this.detachScrollHandlers();\n        }\n    });\n\n    exports['default'] = EditorScroll;\n\n});","define('ghost/mixins/ed-editor-shortcuts', ['exports', 'ember', 'ghost/utils/titleize'], function (exports, Ember, titleize) {\n\n    'use strict';\n\n    /* global moment, Showdown */\n    var simpleShortcutSyntax, shortcuts, EditorShortcuts;\n\n    // Used for simple, noncomputational replace-and-go! shortcuts.\n    // See default case in shortcut function below.\n    simpleShortcutSyntax = {\n        bold: {\n            regex: '**|**',\n            cursor: '|'\n        },\n        italic: {\n            regex: '*|*',\n            cursor: '|'\n\n        },\n        strike: {\n            regex: '~~|~~',\n            cursor: '|'\n        },\n        code: {\n            regex: '`|`',\n            cursor: '|'\n        },\n        blockquote: {\n            regex: '> |',\n            cursor: '|',\n            newline: true\n        },\n        list: {\n            regex: '* |',\n            cursor: '|',\n            newline: true\n        },\n        link: {\n            regex: '[|](http://)',\n            cursor: 'http://'\n        },\n        image: {\n            regex: '![|](http://)',\n            cursor: 'http://',\n            newline: true\n        }\n    };\n\n    shortcuts = {\n        simple: function simple(type, replacement, selection, line) {\n            var shortcut,\n                startIndex = 0;\n\n            if (simpleShortcutSyntax.hasOwnProperty(type)) {\n                shortcut = simpleShortcutSyntax[type];\n                // insert the markdown\n                replacement.text = shortcut.regex.replace('|', selection.text);\n\n                // add a newline if needed\n                if (shortcut.newline && line.text !== '') {\n                    startIndex = 1;\n                    replacement.text = '\\n' + replacement.text;\n                }\n\n                // handle cursor position\n                if (selection.text === '' && shortcut.cursor === '|') {\n                    // the cursor should go where | was\n                    replacement.position = startIndex + replacement.start + shortcut.regex.indexOf(shortcut.cursor);\n                } else if (shortcut.cursor !== '|') {\n                    // the cursor should select the string which matches shortcut.cursor\n                    replacement.position = {\n                        start: replacement.start + replacement.text.indexOf(shortcut.cursor)\n                    };\n                    replacement.position.end = replacement.position.start + shortcut.cursor.length;\n                }\n            }\n\n            return replacement;\n        },\n        cycleHeaderLevel: function cycleHeaderLevel(replacement, line) {\n            // jscs:disable\n            var match = line.text.match(/^#+/),\n\n            // jscs:enable\n            currentHeaderLevel,\n                hashPrefix;\n\n            if (!match) {\n                currentHeaderLevel = 1;\n            } else {\n                currentHeaderLevel = match[0].length;\n            }\n\n            if (currentHeaderLevel > 2) {\n                currentHeaderLevel = 1;\n            }\n\n            hashPrefix = new Array(currentHeaderLevel + 2).join('#');\n\n            // jscs:disable\n            replacement.text = hashPrefix + ' ' + line.text.replace(/^#* /, '');\n            // jscs:enable\n\n            replacement.start = line.start;\n            replacement.end = line.end;\n\n            return replacement;\n        },\n        copyHTML: function copyHTML(editor, selection) {\n            var converter = new Showdown.converter(),\n                generatedHTML;\n\n            if (selection.text) {\n                generatedHTML = converter.makeHtml(selection.text);\n            } else {\n                generatedHTML = converter.makeHtml(editor.getValue());\n            }\n\n            // Talk to the editor\n            editor.sendAction('openModal', 'copy-html', { generatedHTML: generatedHTML });\n        },\n        currentDate: function currentDate(replacement) {\n            replacement.text = moment(new Date()).format('D MMMM YYYY');\n            return replacement;\n        },\n        uppercase: function uppercase(replacement, selection) {\n            replacement.text = selection.text.toLocaleUpperCase();\n            return replacement;\n        },\n        lowercase: function lowercase(replacement, selection) {\n            replacement.text = selection.text.toLocaleLowerCase();\n            return replacement;\n        },\n        titlecase: function titlecase(replacement, selection) {\n            replacement.text = titleize['default'](selection.text);\n            return replacement;\n        }\n    };\n\n    EditorShortcuts = Ember['default'].Mixin.create({\n        shortcut: function shortcut(type) {\n            var selection = this.getSelection(),\n                replacement = {\n                start: selection.start,\n                end: selection.end,\n                position: 'collapseToEnd'\n            };\n\n            switch (type) {\n                // This shortcut is special as it needs to send an action\n                case 'copyHTML':\n                    shortcuts.copyHTML(this, selection);\n                    break;\n                case 'cycleHeaderLevel':\n                    replacement = shortcuts.cycleHeaderLevel(replacement, this.getLine());\n                    break;\n                // These shortcuts all process the basic information\n                case 'currentDate':\n                case 'uppercase':\n                case 'lowercase':\n                case 'titlecase':\n                    replacement = shortcuts[type](replacement, selection, this.getLineToCursor());\n                    break;\n                // All the of basic formatting shortcuts work with a regex\n                default:\n                    replacement = shortcuts.simple(type, replacement, selection, this.getLineToCursor());\n            }\n\n            if (replacement.text) {\n                this.replaceSelection(replacement.text, replacement.start, replacement.end, replacement.position);\n            }\n        }\n    });\n\n    exports['default'] = EditorShortcuts;\n\n});","define('ghost/mixins/editor-base-controller', ['exports', 'ember', 'ghost/models/post', 'ghost/utils/bound-one-way', 'ghost/utils/ed-image-manager'], function (exports, Ember, PostModel, boundOneWay, imageManager) {\n\n    'use strict';\n\n    /* global console */\n\n    var watchedProps = ['model.scratch', 'model.titleScratch', 'model.isDirty', 'model.tags.[]'];\n\n    PostModel['default'].eachAttribute(function (name) {\n        watchedProps.push('model.' + name);\n    });\n\n    exports['default'] = Ember['default'].Mixin.create({\n        postTagsInputController: Ember['default'].inject.controller('post-tags-input'),\n        postSettingsMenuController: Ember['default'].inject.controller('post-settings-menu'),\n\n        autoSaveId: null,\n        timedSaveId: null,\n        editor: null,\n\n        notifications: Ember['default'].inject.service(),\n\n        init: function init() {\n            var self = this;\n\n            this._super();\n\n            window.onbeforeunload = function () {\n                return self.get('isDirty') ? self.unloadDirtyMessage() : null;\n            };\n        },\n\n        autoSave: Ember['default'].observer('model.scratch', function () {\n            // Don't save just because we swapped out models\n            if (this.get('model.isDraft') && !this.get('model.isNew')) {\n                var autoSaveId, timedSaveId, saveOptions;\n\n                saveOptions = {\n                    silent: true,\n                    backgroundSave: true\n                };\n\n                timedSaveId = Ember['default'].run.throttle(this, 'send', 'save', saveOptions, 60000, false);\n                this.set('timedSaveId', timedSaveId);\n\n                autoSaveId = Ember['default'].run.debounce(this, 'send', 'save', saveOptions, 3000);\n                this.set('autoSaveId', autoSaveId);\n            }\n        }),\n\n        /**\n         * By default, a post will not change its publish state.\n         * Only with a user-set value (via setSaveType action)\n         * can the post's status change.\n         */\n        willPublish: boundOneWay['default']('model.isPublished'),\n\n        // set by the editor route and `isDirty`. useful when checking\n        // whether the number of tags has changed for `isDirty`.\n        previousTagNames: null,\n\n        tagNames: Ember['default'].computed('model.tags.@each.name', function () {\n            return this.get('model.tags').mapBy('name');\n        }),\n\n        postOrPage: Ember['default'].computed('model.page', function () {\n            return this.get('model.page') ? 'Page' : 'Post';\n        }),\n\n        // compares previousTagNames to tagNames\n        tagNamesEqual: function tagNamesEqual() {\n            var tagNames = this.get('tagNames'),\n                previousTagNames = this.get('previousTagNames'),\n                hashCurrent,\n                hashPrevious;\n\n            // beware! even if they have the same length,\n            // that doesn't mean they're the same.\n            if (tagNames.length !== previousTagNames.length) {\n                return false;\n            }\n\n            // instead of comparing with slow, nested for loops,\n            // perform join on each array and compare the strings\n            hashCurrent = tagNames.join('');\n            hashPrevious = previousTagNames.join('');\n\n            return hashCurrent === hashPrevious;\n        },\n\n        // a hook created in editor-base-route's setupController\n        modelSaved: function modelSaved() {\n            var model = this.get('model');\n\n            // safer to updateTags on save in one place\n            // rather than in all other places save is called\n            model.updateTags();\n\n            // set previousTagNames to current tagNames for isDirty check\n            this.set('previousTagNames', this.get('tagNames'));\n\n            // `updateTags` triggers `isDirty => true`.\n            // for a saved model it would otherwise be false.\n\n            // if the two \"scratch\" properties (title and content) match the model, then\n            // it's ok to set isDirty to false\n            if (model.get('titleScratch') === model.get('title') && model.get('scratch') === model.get('markdown')) {\n                this.set('isDirty', false);\n            }\n        },\n\n        // an ugly hack, but necessary to watch all the model's properties\n        // and more, without having to be explicit and do it manually\n        isDirty: Ember['default'].computed.apply(Ember['default'], watchedProps.concat({\n            get: function get() {\n                var model = this.get('model'),\n                    markdown = model.get('markdown'),\n                    title = model.get('title'),\n                    titleScratch = model.get('titleScratch'),\n                    scratch = this.get('editor').getValue(),\n                    changedAttributes;\n\n                if (!this.tagNamesEqual()) {\n                    return true;\n                }\n\n                if (titleScratch !== title) {\n                    return true;\n                }\n\n                // since `scratch` is not model property, we need to check\n                // it explicitly against the model's markdown attribute\n                if (markdown !== scratch) {\n                    return true;\n                }\n\n                // if the Adapter failed to save the model isError will be true\n                // and we should consider the model still dirty.\n                if (model.get('isError')) {\n                    return true;\n                }\n\n                // models created on the client always return `isDirty: true`,\n                // so we need to see which properties have actually changed.\n                if (model.get('isNew')) {\n                    changedAttributes = Ember['default'].keys(model.changedAttributes());\n\n                    if (changedAttributes.length) {\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                // even though we use the `scratch` prop to show edits,\n                // which does *not* change the model's `isDirty` property,\n                // `isDirty` will tell us if the other props have changed,\n                // as long as the model is not new (model.isNew === false).\n                return model.get('isDirty');\n            },\n            set: function set(key, value) {\n                return value;\n            }\n        })),\n\n        // used on window.onbeforeunload\n        unloadDirtyMessage: function unloadDirtyMessage() {\n            return '==============================\\n\\n' + 'Hey there! It looks like you\\'re in the middle of writing' + ' something and you haven\\'t saved all of your content.' + '\\n\\nSave before you go!\\n\\n' + '==============================';\n        },\n\n        // TODO: This has to be moved to the I18n localization file.\n        // This structure is supposed to be close to the i18n-localization which will be used soon.\n        messageMap: {\n            errors: {\n                post: {\n                    published: {\n                        published: 'Update failed.',\n                        draft: 'Saving failed.'\n                    },\n                    draft: {\n                        published: 'Publish failed.',\n                        draft: 'Saving failed.'\n                    }\n\n                }\n            },\n\n            success: {\n                post: {\n                    published: {\n                        published: 'Updated.',\n                        draft: 'Saved.'\n                    },\n                    draft: {\n                        published: 'Published!',\n                        draft: 'Saved.'\n                    }\n                }\n            }\n        },\n\n        showSaveNotification: function showSaveNotification(prevStatus, status, delay) {\n            var message = this.messageMap.success.post[prevStatus][status],\n                path = this.get('model.absoluteUrl'),\n                type = this.get('postOrPage'),\n                notifications = this.get('notifications');\n\n            if (status === 'published') {\n                message += '&nbsp;<a href=\"' + path + '\">View ' + type + '</a>';\n            }\n\n            notifications.showSuccess(message.htmlSafe(), { delayed: delay });\n        },\n\n        showErrorNotification: function showErrorNotification(prevStatus, status, errors, delay) {\n            var message = this.messageMap.errors.post[prevStatus][status],\n                error = errors && errors[0] && errors[0].message || 'Unknown Error',\n                notifications = this.get('notifications');\n\n            message += '<br />' + error;\n\n            notifications.showError(message.htmlSafe(), { delayed: delay });\n        },\n\n        shouldFocusTitle: Ember['default'].computed.alias('model.isNew'),\n\n        actions: {\n            save: function save(options) {\n                var status,\n                    prevStatus = this.get('model.status'),\n                    isNew = this.get('model.isNew'),\n                    autoSaveId = this.get('autoSaveId'),\n                    timedSaveId = this.get('timedSaveId'),\n                    self = this,\n                    psmController = this.get('postSettingsMenuController'),\n                    promise,\n                    notifications = this.get('notifications');\n\n                options = options || {};\n\n                if (options.backgroundSave) {\n                    // do not allow a post's status to be set to published by a background save\n                    status = 'draft';\n                } else {\n                    status = this.get('willPublish') ? 'published' : 'draft';\n                }\n\n                if (autoSaveId) {\n                    Ember['default'].run.cancel(autoSaveId);\n                    this.set('autoSaveId', null);\n                }\n\n                if (timedSaveId) {\n                    Ember['default'].run.cancel(timedSaveId);\n                    this.set('timedSaveId', null);\n                }\n\n                notifications.closePassive();\n\n                // ensure an incomplete tag is finalised before save\n                this.get('postTagsInputController').send('addNewTag');\n\n                // Set the properties that are indirected\n                // set markdown equal to what's in the editor, minus the image markers.\n                this.set('model.markdown', this.get('editor').getValue());\n                this.set('model.status', status);\n\n                // Set a default title\n                if (!this.get('model.titleScratch').trim()) {\n                    this.set('model.titleScratch', '(Untitled)');\n                }\n\n                this.set('model.title', this.get('model.titleScratch'));\n                this.set('model.meta_title', psmController.get('metaTitleScratch'));\n                this.set('model.meta_description', psmController.get('metaDescriptionScratch'));\n\n                if (!this.get('model.slug')) {\n                    // Cancel any pending slug generation that may still be queued in the\n                    // run loop because we need to run it before the post is saved.\n                    Ember['default'].run.cancel(psmController.get('debounceId'));\n\n                    psmController.generateAndSetSlug('model.slug');\n                }\n\n                promise = Ember['default'].RSVP.resolve(psmController.get('lastPromise')).then(function () {\n                    return self.get('model').save(options).then(function (model) {\n                        if (!options.silent) {\n                            self.showSaveNotification(prevStatus, model.get('status'), isNew ? true : false);\n                        }\n\n                        return model;\n                    });\n                })['catch'](function (errors) {\n                    if (!options.silent) {\n                        self.showErrorNotification(prevStatus, self.get('model.status'), errors);\n                    }\n\n                    self.set('model.status', prevStatus);\n\n                    return self.get('model');\n                });\n\n                psmController.set('lastPromise', promise);\n\n                return promise;\n            },\n\n            setSaveType: function setSaveType(newType) {\n                if (newType === 'publish') {\n                    this.set('willPublish', true);\n                } else if (newType === 'draft') {\n                    this.set('willPublish', false);\n                } else {\n                    console.warn('Received invalid save type; ignoring.');\n                }\n            },\n\n            // set from a `sendAction` on the gh-ed-editor component,\n            // so that we get a reference for handling uploads.\n            setEditor: function setEditor(editor) {\n                this.set('editor', editor);\n            },\n\n            // fired from the gh-ed-preview component when an image upload starts\n            disableEditor: function disableEditor() {\n                this.get('editor').disable();\n            },\n\n            // fired from the gh-ed-preview component when an image upload finishes\n            enableEditor: function enableEditor() {\n                this.get('editor').enable();\n            },\n\n            // Match the uploaded file to a line in the editor, and update that line with a path reference\n            // ensuring that everything ends up in the correct place and format.\n            handleImgUpload: function handleImgUpload(e, resultSrc) {\n                var editor = this.get('editor'),\n                    editorValue = editor.getValue(),\n                    replacement = imageManager['default'].getSrcRange(editorValue, e.target),\n                    cursorPosition;\n\n                if (replacement) {\n                    cursorPosition = replacement.start + resultSrc.length + 1;\n                    if (replacement.needsParens) {\n                        resultSrc = '(' + resultSrc + ')';\n                    }\n                    editor.replaceSelection(resultSrc, replacement.start, replacement.end, cursorPosition);\n                }\n            },\n\n            autoSaveNew: function autoSaveNew() {\n                if (this.get('model.isNew')) {\n                    this.send('save', { silent: true, backgroundSave: true });\n                }\n            }\n        }\n    });\n\n});","define('ghost/mixins/editor-base-route', ['exports', 'ember', 'ghost/mixins/shortcuts-route', 'ghost/mixins/style-body', 'ghost/utils/editor-shortcuts'], function (exports, Ember, ShortcutsRoute, styleBody, editorShortcuts) {\n\n    'use strict';\n\n    var EditorBaseRoute = Ember['default'].Mixin.create(styleBody['default'], ShortcutsRoute['default'], {\n        classNames: ['editor'],\n\n        actions: {\n            save: function save() {\n                this.get('controller').send('save');\n            },\n\n            publish: function publish() {\n                var controller = this.get('controller');\n\n                controller.send('setSaveType', 'publish');\n                controller.send('save');\n            },\n\n            toggleZenMode: function toggleZenMode() {\n                Ember['default'].$('body').toggleClass('zen');\n            },\n\n            // The actual functionality is implemented in utils/ed-editor-shortcuts\n            editorShortcut: function editorShortcut(options) {\n                // Only fire editor shortcuts when the editor has focus.\n                if (this.get('controller.editor').$().is(':focus')) {\n                    this.get('controller.editor').shortcut(options.type);\n                }\n            },\n\n            willTransition: function willTransition(transition) {\n                var controller = this.get('controller'),\n                    scratch = controller.get('model.scratch'),\n                    controllerIsDirty = controller.get('isDirty'),\n                    model = controller.get('model'),\n                    state = model.getProperties('isDeleted', 'isSaving', 'isDirty', 'isNew'),\n                    fromNewToEdit,\n                    deletedWithoutChanges;\n\n                fromNewToEdit = this.get('routeName') === 'editor.new' && transition.targetName === 'editor.edit' && transition.intent.contexts && transition.intent.contexts[0] && transition.intent.contexts[0].id === model.get('id');\n\n                deletedWithoutChanges = state.isDeleted && (state.isSaving || !state.isDirty);\n\n                if (!fromNewToEdit && !deletedWithoutChanges && controllerIsDirty) {\n                    transition.abort();\n                    this.send('openModal', 'leave-editor', [controller, transition]);\n                    return;\n                }\n\n                // The controller may hold model state that will be lost in the transition,\n                // so we need to apply it now.\n                if (fromNewToEdit && controllerIsDirty) {\n                    if (scratch !== model.get('markdown')) {\n                        model.set('markdown', scratch);\n                    }\n                }\n\n                if (state.isNew) {\n                    model.deleteRecord();\n                }\n\n                // since the transition is now certain to complete..\n                window.onbeforeunload = null;\n\n                // remove model-related listeners created in editor-base-route\n                this.detachModelHooks(controller, model);\n            }\n        },\n\n        renderTemplate: function renderTemplate(controller, model) {\n            this._super(controller, model);\n\n            this.render('post-settings-menu', {\n                into: 'application',\n                outlet: 'settings-menu',\n                model: model\n            });\n        },\n\n        shortcuts: editorShortcuts['default'],\n\n        attachModelHooks: function attachModelHooks(controller, model) {\n            // this will allow us to track when the model is saved and update the controller\n            // so that we can be sure controller.isDirty is correct, without having to update the\n            // controller on each instance of `model.save()`.\n            //\n            // another reason we can't do this on `model.save().then()` is because the post-settings-menu\n            // also saves the model, and passing messages is difficult because we have two\n            // types of editor controllers, and the PSM also exists on the posts.post route.\n            //\n            // The reason we can't just keep this functionality in the editor controller is\n            // because we need to remove these handlers on `willTransition` in the editor route.\n            model.on('didCreate', controller, controller.get('modelSaved'));\n            model.on('didUpdate', controller, controller.get('modelSaved'));\n        },\n\n        detachModelHooks: function detachModelHooks(controller, model) {\n            model.off('didCreate', controller, controller.get('modelSaved'));\n            model.off('didUpdate', controller, controller.get('modelSaved'));\n        },\n\n        setupController: function setupController(controller, model) {\n            model.set('scratch', model.get('markdown'));\n            model.set('titleScratch', model.get('title'));\n\n            this._super(controller, model);\n            var tags = model.get('tags');\n\n            if (tags) {\n                // used to check if anything has changed in the editor\n                controller.set('previousTagNames', tags.mapBy('name'));\n            } else {\n                controller.set('previousTagNames', []);\n            }\n\n            // attach model-related listeners created in editor-base-route\n            this.attachModelHooks(controller, model);\n        }\n    });\n\n    exports['default'] = EditorBaseRoute;\n\n});","define('ghost/mixins/pagination-controller', ['exports', 'ember', 'ghost/utils/ajax'], function (exports, Ember, getRequestErrorMessage) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Mixin.create({\n        notifications: Ember['default'].inject.service(),\n\n        // set from PaginationRouteMixin\n        paginationSettings: null,\n\n        // indicates whether we're currently loading the next page\n        isLoading: null,\n\n        /**\n         * Takes an ajax response, concatenates any error messages, then generates an error notification.\n         * @param {jqXHR} response The jQuery ajax reponse object.\n         * @return\n         */\n        reportLoadError: function reportLoadError(response) {\n            var message = 'A problem was encountered while loading more records';\n\n            if (response) {\n                // Get message from response\n                message += ': ' + getRequestErrorMessage['default'](response, true);\n            } else {\n                message += '.';\n            }\n\n            this.get('notifications').showError(message);\n        },\n\n        actions: {\n            /**\n             * Loads the next paginated page of posts into the ember-data store. Will cause the posts list UI to update.\n             * @return\n             */\n            loadNextPage: function loadNextPage() {\n                var self = this,\n                    store = this.get('store'),\n                    recordType = this.get('model').get('type'),\n                    metadata = this.store.metadataFor(recordType),\n                    nextPage = metadata.pagination && metadata.pagination.next,\n                    paginationSettings = this.get('paginationSettings');\n\n                if (nextPage) {\n                    this.set('isLoading', true);\n                    this.set('paginationSettings.page', nextPage);\n\n                    store.find(recordType, paginationSettings).then(function () {\n                        self.set('isLoading', false);\n                    }, function (response) {\n                        self.reportLoadError(response);\n                    });\n                }\n            },\n\n            resetPagination: function resetPagination() {\n                this.set('paginationSettings.page', 1);\n                this.store.setMetadataFor('tag', { pagination: undefined });\n            }\n        }\n    });\n\n});","define('ghost/mixins/pagination-route', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    var defaultPaginationSettings, PaginationRoute;\n\n    defaultPaginationSettings = {\n        page: 1,\n        limit: 15\n    };\n\n    PaginationRoute = Ember['default'].Mixin.create({\n        /**\n         * Sets up pagination details\n         * @param {object} settings specifies additional pagination details\n         */\n        setupPagination: function setupPagination(settings) {\n            settings = settings || {};\n            for (var key in defaultPaginationSettings) {\n                if (defaultPaginationSettings.hasOwnProperty(key)) {\n                    if (!settings.hasOwnProperty(key)) {\n                        settings[key] = defaultPaginationSettings[key];\n                    }\n                }\n            }\n\n            this.set('paginationSettings', settings);\n            this.controller.set('paginationSettings', settings);\n        }\n    });\n\n    exports['default'] = PaginationRoute;\n\n});","define('ghost/mixins/pagination-view-infinite-scroll', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    var PaginationViewInfiniteScrollMixin = Ember['default'].Mixin.create({\n\n        /**\n         * Determines if we are past a scroll point where we need to fetch the next page\n         * @param {object} event The scroll event\n         */\n        checkScroll: function checkScroll(event) {\n            var element = event.target,\n                triggerPoint = 100,\n                controller = this.get('controller'),\n                isLoading = controller.get('isLoading');\n\n            // If we haven't passed our threshold or we are already fetching content, exit\n            if (isLoading || element.scrollTop + element.clientHeight + triggerPoint <= element.scrollHeight) {\n                return;\n            }\n\n            controller.send('loadNextPage');\n        },\n\n        /**\n         * Bind to the scroll event once the element is in the DOM\n         */\n        attachCheckScroll: function attachCheckScroll() {\n            var el = this.$(),\n                controller = this.get('controller');\n\n            el.on('scroll', Ember['default'].run.bind(this, this.checkScroll));\n\n            if (this.element.scrollHeight <= this.element.clientHeight) {\n                controller.send('loadNextPage');\n            }\n        },\n\n        didInsertElement: function didInsertElement() {\n            this._super();\n\n            this.attachCheckScroll();\n        },\n\n        willDestroyElement: function willDestroyElement() {\n            this._super();\n\n            // unbind from the scroll event when the element is no longer in the DOM\n            this.$().off('scroll');\n        }\n    });\n\n    exports['default'] = PaginationViewInfiniteScrollMixin;\n\n});","define('ghost/mixins/settings-menu-controller', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Mixin.create({\n        application: Ember['default'].inject.controller(),\n\n        isViewingSubview: Ember['default'].computed('application.showSettingsMenu', {\n            get: function get() {\n                return false;\n            },\n            set: function set(key, value) {\n                // Not viewing a subview if we can't even see the PSM\n                if (!this.get('application.showSettingsMenu')) {\n                    return false;\n                }\n                return value;\n            }\n        }),\n\n        actions: {\n            showSubview: function showSubview() {\n                this.set('isViewingSubview', true);\n            },\n\n            closeSubview: function closeSubview() {\n                this.set('isViewingSubview', false);\n            }\n        }\n    });\n\n});","define('ghost/mixins/shortcuts-route', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    key.filter = function () {\n        return true;\n    };\n\n    key.setScope('default');\n    /**\n     * Only routes can implement shortcuts.\n     * If you need to trigger actions on the controller,\n     * simply call them with `this.get('controller').send('action')`.\n     *\n     * To implement shortcuts, add this mixin to your `extend()`,\n     * and implement a `shortcuts` hash.\n     * In this hash, keys are shortcut combinations and values are route action names.\n     *  (see [keymaster docs](https://github.com/madrobby/keymaster/blob/master/README.markdown)),\n     *\n     * ```javascript\n     * shortcuts: {\n     *     'ctrl+s, command+s': 'save',\n     *     'ctrl+alt+z': 'toggleZenMode'\n     * }\n     * ```\n     * For more complex actions, shortcuts can instead have their value\n     * be an object like {action, options}\n     * ```javascript\n     * shortcuts: {\n     *      'ctrl+k': {action: 'markdownShortcut', options: 'createLink'}\n     * }\n     * ```\n     * You can set the scope of your shortcut by passing a scope property.\n     * ```javascript\n     * shortcuts : {\n     *   'enter': {action : 'confirmModal', scope: 'modal'}\n     * }\n     * ```\n     * If you don't specify a scope, we use a default scope called \"default\".\n     * To have all your shortcut work in all scopes, give it the scope \"all\".\n     * Find out more at the keymaster docs\n     */\n    var ShortcutsRoute = Ember['default'].Mixin.create({\n        registerShortcuts: function registerShortcuts() {\n            var self = this,\n                shortcuts = this.get('shortcuts');\n\n            Ember['default'].keys(shortcuts).forEach(function (shortcut) {\n                var scope = shortcuts[shortcut].scope || 'default',\n                    action = shortcuts[shortcut],\n                    options;\n\n                if (Ember['default'].typeOf(action) !== 'string') {\n                    options = action.options;\n                    action = action.action;\n                }\n\n                key(shortcut, scope, function (event) {\n                    // stop things like ctrl+s from actually opening a save dialogue\n                    event.preventDefault();\n                    self.send(action, options);\n                });\n            });\n        },\n\n        removeShortcuts: function removeShortcuts() {\n            var shortcuts = this.get('shortcuts');\n\n            Ember['default'].keys(shortcuts).forEach(function (shortcut) {\n                key.unbind(shortcut);\n            });\n        },\n\n        activate: function activate() {\n            this._super();\n            this.registerShortcuts();\n        },\n\n        deactivate: function deactivate() {\n            this._super();\n            this.removeShortcuts();\n        }\n    });\n\n    exports['default'] = ShortcutsRoute;\n\n});","define('ghost/mixins/style-body', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    var styleBody = Ember['default'].Mixin.create({\n        activate: function activate() {\n            this._super();\n\n            var cssClasses = this.get('classNames');\n\n            if (cssClasses) {\n                Ember['default'].run.schedule('afterRender', null, function () {\n                    cssClasses.forEach(function (curClass) {\n                        Ember['default'].$('body').addClass(curClass);\n                    });\n                });\n            }\n        },\n\n        deactivate: function deactivate() {\n            this._super();\n\n            var cssClasses = this.get('classNames');\n\n            Ember['default'].run.schedule('afterRender', null, function () {\n                cssClasses.forEach(function (curClass) {\n                    Ember['default'].$('body').removeClass(curClass);\n                });\n            });\n        }\n    });\n\n    exports['default'] = styleBody;\n\n});","define('ghost/mixins/text-input', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    var BlurField = Ember['default'].Mixin.create({\n        selectOnClick: false,\n        stopEnterKeyDownPropagation: false,\n\n        click: function click(event) {\n            if (this.get('selectOnClick')) {\n                event.currentTarget.select();\n            }\n        },\n\n        keyDown: function keyDown(event) {\n            // stop event propagation when pressing \"enter\"\n            // most useful in the case when undesired (global) keyboard shortcuts are getting triggered while interacting\n            // with this particular input element.\n            if (this.get('stopEnterKeyDownPropagation') && event.keyCode === 13) {\n                event.stopPropagation();\n\n                return true;\n            }\n        }\n    });\n\n    exports['default'] = BlurField;\n\n});","define('ghost/mixins/validation-engine', ['exports', 'ember', 'ember-data', 'ghost/utils/ajax', 'ghost/utils/validator-extensions', 'ghost/validators/post', 'ghost/validators/setup', 'ghost/validators/signup', 'ghost/validators/signin', 'ghost/validators/setting', 'ghost/validators/reset', 'ghost/validators/user', 'ghost/validators/tag-settings'], function (exports, Ember, DS, getRequestErrorMessage, ValidatorExtensions, PostValidator, SetupValidator, SignupValidator, SigninValidator, SettingValidator, ResetValidator, UserValidator, TagSettingsValidator) {\n\n    'use strict';\n\n    ValidatorExtensions['default'].init();\n\n    // format errors to be used in `notifications.showErrors`.\n    // result is [{message: 'concatenated error messages'}]\n    function formatErrors(errors, opts) {\n        var message = 'There was an error';\n\n        opts = opts || {};\n\n        if (opts.wasSave && opts.validationType) {\n            message += ' saving this ' + opts.validationType;\n        }\n\n        if (Ember['default'].isArray(errors)) {\n            // get the validator's error messages from the array.\n            // normalize array members to map to strings.\n            message = errors.map(function (error) {\n                var errorMessage;\n                if (typeof error === 'string') {\n                    errorMessage = error;\n                } else {\n                    errorMessage = error.message;\n                }\n\n                return Ember['default'].Handlebars.Utils.escapeExpression(errorMessage);\n            }).join('<br />').htmlSafe();\n        } else if (errors instanceof Error) {\n            message += errors.message || '.';\n        } else if (typeof errors === 'object') {\n            // Get messages from server response\n            message += ': ' + getRequestErrorMessage['default'](errors, true);\n        } else if (typeof errors === 'string') {\n            message += ': ' + errors;\n        } else {\n            message += '.';\n        }\n\n        // set format for notifications.showErrors\n        message = [{ message: message }];\n\n        return message;\n    }\n\n    /**\n    * The class that gets this mixin will receive these properties and functions.\n    * It will be able to validate any properties on itself (or the model it passes to validate())\n    * with the use of a declared validator.\n    */\n    exports['default'] = Ember['default'].Mixin.create({\n        // these validators can be passed a model to validate when the class that\n        // mixes in the ValidationEngine declares a validationType equal to a key on this object.\n        // the model is either passed in via `this.validate({ model: object })`\n        // or by calling `this.validate()` without the model property.\n        // in that case the model will be the class that the ValidationEngine\n        // was mixed into, i.e. the controller or Ember Data model.\n        validators: {\n            post: PostValidator['default'],\n            setup: SetupValidator['default'],\n            signup: SignupValidator['default'],\n            signin: SigninValidator['default'],\n            setting: SettingValidator['default'],\n            reset: ResetValidator['default'],\n            user: UserValidator['default'],\n            tag: TagSettingsValidator['default']\n        },\n\n        /**\n        * Passes the model to the validator specified by validationType.\n        * Returns a promise that will resolve if validation succeeds, and reject if not.\n        * Some options can be specified:\n        *\n        * `format: false` - doesn't use formatErrors to concatenate errors for notifications.showErrors.\n        *                   will return whatever the specified validator returns.\n        *                   since notifications are a common usecase, `format` is true by default.\n        *\n        * `model: Object` - you can specify the model to be validated, rather than pass the default value of `this`,\n        *                   the class that mixes in this mixin.\n        */\n        validate: function validate(opts) {\n            // jscs:disable safeContextKeyword\n            opts = opts || {};\n\n            var model = this,\n                type,\n                validator;\n\n            if (opts.model) {\n                model = opts.model;\n            } else if (this instanceof DS['default'].Model) {\n                model = this;\n            } else if (this.get('model')) {\n                model = this.get('model');\n            }\n\n            type = this.get('validationType') || model.get('validationType');\n            validator = this.get('validators.' + type) || model.get('validators.' + type);\n\n            opts.validationType = type;\n\n            return new Ember['default'].RSVP.Promise(function (resolve, reject) {\n                var validationErrors;\n\n                if (!type || !validator) {\n                    validationErrors = ['The validator specified, \"' + type + '\", did not exist!'];\n                } else {\n                    validationErrors = validator.check(model);\n                }\n\n                if (Ember['default'].isEmpty(validationErrors)) {\n                    return resolve();\n                }\n\n                if (opts.format !== false) {\n                    validationErrors = formatErrors(validationErrors, opts);\n                }\n\n                return reject(validationErrors);\n            });\n        },\n\n        /**\n        * The primary goal of this method is to override the `save` method on Ember Data models.\n        * This allows us to run validation before actually trying to save the model to the server.\n        * You can supply options to be passed into the `validate` method, since the ED `save` method takes no options.\n        */\n        save: function save(options) {\n            var self = this,\n\n            // this is a hack, but needed for async _super calls.\n            // ref: https://github.com/emberjs/ember.js/pull/4301\n            _super = this.__nextSuper;\n\n            options = options || {};\n            options.wasSave = true;\n\n            // model.destroyRecord() calls model.save() behind the scenes.\n            // in that case, we don't need validation checks or error propagation,\n            // because the model itself is being destroyed.\n            if (this.get('isDeleted')) {\n                return this._super();\n            }\n\n            // If validation fails, reject with validation errors.\n            // If save to the server fails, reject with server response.\n            return this.validate(options).then(function () {\n                return _super.call(self, options);\n            })['catch'](function (result) {\n                // server save failed - validate() would have given back an array\n                if (!Ember['default'].isArray(result)) {\n                    if (options.format !== false) {\n                        // concatenate all errors into an array with a single object: [{message: 'concatted message'}]\n                        result = formatErrors(result, options);\n                    } else {\n                        // return the array of errors from the server\n                        result = getRequestErrorMessage['default'](result);\n                    }\n                }\n\n                return Ember['default'].RSVP.reject(result);\n            });\n        }\n    });\n\n});","define('ghost/models/notification', ['exports', 'ember-data'], function (exports, DS) {\n\n    'use strict';\n\n    var Notification = DS['default'].Model.extend({\n        dismissible: DS['default'].attr('boolean'),\n        location: DS['default'].attr('string'),\n        status: DS['default'].attr('string'),\n        type: DS['default'].attr('string'),\n        message: DS['default'].attr('string')\n    });\n\n    exports['default'] = Notification;\n\n});","define('ghost/models/post', ['exports', 'ember', 'ember-data', 'ghost/mixins/validation-engine'], function (exports, Ember, DS, ValidationEngine) {\n\n    'use strict';\n\n    exports['default'] = DS['default'].Model.extend(ValidationEngine['default'], {\n        validationType: 'post',\n\n        uuid: DS['default'].attr('string'),\n        title: DS['default'].attr('string', { defaultValue: '' }),\n        slug: DS['default'].attr('string'),\n        markdown: DS['default'].attr('string', { defaultValue: '' }),\n        html: DS['default'].attr('string'),\n        image: DS['default'].attr('string'),\n        featured: DS['default'].attr('boolean', { defaultValue: false }),\n        page: DS['default'].attr('boolean', { defaultValue: false }),\n        status: DS['default'].attr('string', { defaultValue: 'draft' }),\n        language: DS['default'].attr('string', { defaultValue: 'en_US' }),\n        meta_title: DS['default'].attr('string'),\n        meta_description: DS['default'].attr('string'),\n        author: DS['default'].belongsTo('user', { async: true }),\n        author_id: DS['default'].attr('number'),\n        updated_at: DS['default'].attr('moment-date'),\n        updated_by: DS['default'].attr(),\n        published_at: DS['default'].attr('moment-date'),\n        published_by: DS['default'].belongsTo('user', { async: true }),\n        created_at: DS['default'].attr('moment-date'),\n        created_by: DS['default'].attr(),\n        tags: DS['default'].hasMany('tag', { embedded: 'always' }),\n        url: DS['default'].attr('string'),\n\n        config: Ember['default'].inject.service(),\n        ghostPaths: Ember['default'].inject.service('ghost-paths'),\n\n        absoluteUrl: Ember['default'].computed('url', 'ghostPaths.url', 'config.blogUrl', function () {\n            var blogUrl = this.get('config.blogUrl'),\n                postUrl = this.get('url');\n            return this.get('ghostPaths.url').join(blogUrl, postUrl);\n        }),\n\n        previewUrl: Ember['default'].computed('uuid', 'ghostPaths.url', 'config.blogUrl', 'config.routeKeywords.preview', function () {\n            var blogUrl = this.get('config.blogUrl'),\n                uuid = this.get('uuid'),\n                previewKeyword = this.get('config.routeKeywords.preview');\n            // New posts don't have a preview\n            if (!uuid) {\n                return '';\n            }\n            return this.get('ghostPaths.url').join(blogUrl, previewKeyword, uuid);\n        }),\n\n        scratch: null,\n        titleScratch: null,\n\n        // Computed post properties\n\n        isPublished: Ember['default'].computed.equal('status', 'published'),\n        isDraft: Ember['default'].computed.equal('status', 'draft'),\n\n        // remove client-generated tags, which have `id: null`.\n        // Ember Data won't recognize/update them automatically\n        // when returned from the server with ids.\n        updateTags: function updateTags() {\n            var tags = this.get('tags'),\n                oldTags = tags.filterBy('id', null);\n\n            tags.removeObjects(oldTags);\n            oldTags.invoke('deleteRecord');\n        },\n\n        isAuthoredByUser: function isAuthoredByUser(user) {\n            return parseInt(user.get('id'), 10) === parseInt(this.get('author_id'), 10);\n        }\n\n    });\n\n});","define('ghost/models/role', ['exports', 'ember', 'ember-data'], function (exports, Ember, DS) {\n\n    'use strict';\n\n    var Role = DS['default'].Model.extend({\n        uuid: DS['default'].attr('string'),\n        name: DS['default'].attr('string'),\n        description: DS['default'].attr('string'),\n        created_at: DS['default'].attr('moment-date'),\n        updated_at: DS['default'].attr('moment-date'),\n        created_by: DS['default'].attr(),\n        updated_by: DS['default'].attr(),\n\n        lowerCaseName: Ember['default'].computed('name', function () {\n            return this.get('name').toLocaleLowerCase();\n        })\n    });\n\n    exports['default'] = Role;\n\n});","define('ghost/models/setting', ['exports', 'ember-data', 'ghost/mixins/validation-engine'], function (exports, DS, ValidationEngine) {\n\n    'use strict';\n\n    var Setting = DS['default'].Model.extend(ValidationEngine['default'], {\n        validationType: 'setting',\n\n        title: DS['default'].attr('string'),\n        description: DS['default'].attr('string'),\n        logo: DS['default'].attr('string'),\n        cover: DS['default'].attr('string'),\n        defaultLang: DS['default'].attr('string'),\n        postsPerPage: DS['default'].attr('number'),\n        forceI18n: DS['default'].attr('boolean'),\n        permalinks: DS['default'].attr('string'),\n        activeTheme: DS['default'].attr('string'),\n        availableThemes: DS['default'].attr(),\n        ghost_head: DS['default'].attr('string'),\n        ghost_foot: DS['default'].attr('string'),\n        labs: DS['default'].attr('string'),\n        navigation: DS['default'].attr('string'),\n        isPrivate: DS['default'].attr('boolean'),\n        password: DS['default'].attr('string')\n    });\n\n    exports['default'] = Setting;\n\n});","define('ghost/models/slug-generator', ['exports', 'ember', 'ic-ajax'], function (exports, Ember, ic_ajax) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Object.extend({\n        slugType: null,\n        value: null,\n\n        ghostPaths: Ember['default'].inject.service('ghost-paths'),\n\n        toString: function toString() {\n            return this.get('value');\n        },\n\n        generateSlug: function generateSlug(textToSlugify) {\n            var self = this,\n                url;\n\n            if (!textToSlugify) {\n                return Ember['default'].RSVP.resolve('');\n            }\n\n            url = this.get('ghostPaths.url').api('slugs', this.get('slugType'), encodeURIComponent(textToSlugify));\n\n            return ic_ajax.request(url, {\n                type: 'GET'\n            }).then(function (response) {\n                var slug = response.slugs[0].slug;\n\n                self.set('value', slug);\n\n                return slug;\n            });\n        }\n    });\n\n});","define('ghost/models/tag', ['exports', 'ember-data', 'ghost/mixins/validation-engine'], function (exports, DS, ValidationEngine) {\n\n    'use strict';\n\n    var Tag = DS['default'].Model.extend(ValidationEngine['default'], {\n        validationType: 'tag',\n\n        uuid: DS['default'].attr('string'),\n        name: DS['default'].attr('string'),\n        slug: DS['default'].attr('string'),\n        description: DS['default'].attr('string'),\n        parent: DS['default'].attr(),\n        meta_title: DS['default'].attr('string'),\n        meta_description: DS['default'].attr('string'),\n        image: DS['default'].attr('string'),\n        hidden: DS['default'].attr('boolean'),\n        created_at: DS['default'].attr('moment-date'),\n        updated_at: DS['default'].attr('moment-date'),\n        created_by: DS['default'].attr(),\n        updated_by: DS['default'].attr(),\n        post_count: DS['default'].attr('number')\n    });\n\n    exports['default'] = Tag;\n\n});","define('ghost/models/user', ['exports', 'ember', 'ember-data', 'ic-ajax', 'ghost/mixins/validation-engine'], function (exports, Ember, DS, ic_ajax, ValidationEngine) {\n\n    'use strict';\n\n    exports['default'] = DS['default'].Model.extend(ValidationEngine['default'], {\n        validationType: 'user',\n\n        uuid: DS['default'].attr('string'),\n        name: DS['default'].attr('string'),\n        slug: DS['default'].attr('string'),\n        email: DS['default'].attr('string'),\n        image: DS['default'].attr('string'),\n        cover: DS['default'].attr('string'),\n        bio: DS['default'].attr('string'),\n        website: DS['default'].attr('string'),\n        location: DS['default'].attr('string'),\n        accessibility: DS['default'].attr('string'),\n        status: DS['default'].attr('string'),\n        language: DS['default'].attr('string', { defaultValue: 'en_US' }),\n        meta_title: DS['default'].attr('string'),\n        meta_description: DS['default'].attr('string'),\n        last_login: DS['default'].attr('moment-date'),\n        created_at: DS['default'].attr('moment-date'),\n        created_by: DS['default'].attr('number'),\n        updated_at: DS['default'].attr('moment-date'),\n        updated_by: DS['default'].attr('number'),\n        roles: DS['default'].hasMany('role', { embedded: 'always' }),\n\n        ghostPaths: Ember['default'].inject.service('ghost-paths'),\n\n        role: Ember['default'].computed('roles', {\n            get: function get() {\n                return this.get('roles.firstObject');\n            },\n            set: function set(key, value) {\n                // Only one role per user, so remove any old data.\n                this.get('roles').clear();\n                this.get('roles').pushObject(value);\n\n                return value;\n            }\n        }),\n\n        // TODO: Once client-side permissions are in place,\n        // remove the hard role check.\n        isAuthor: Ember['default'].computed.equal('role.name', 'Author'),\n        isEditor: Ember['default'].computed.equal('role.name', 'Editor'),\n        isAdmin: Ember['default'].computed.equal('role.name', 'Administrator'),\n        isOwner: Ember['default'].computed.equal('role.name', 'Owner'),\n\n        saveNewPassword: function saveNewPassword() {\n            var url = this.get('ghostPaths.url').api('users', 'password');\n\n            return ic_ajax.request(url, {\n                type: 'PUT',\n                data: {\n                    password: [{\n                        user_id: this.get('id'),\n                        oldPassword: this.get('password'),\n                        newPassword: this.get('newPassword'),\n                        ne2Password: this.get('ne2Password')\n                    }]\n                }\n            });\n        },\n\n        resendInvite: function resendInvite() {\n            var fullUserData = this.toJSON(),\n                userData = {\n                email: fullUserData.email,\n                roles: fullUserData.roles\n            };\n\n            return ic_ajax.request(this.get('ghostPaths.url').api('users'), {\n                type: 'POST',\n                data: JSON.stringify({ users: [userData] }),\n                contentType: 'application/json'\n            });\n        },\n\n        passwordValidationErrors: Ember['default'].computed('password', 'newPassword', 'ne2Password', function () {\n            var validationErrors = [];\n\n            if (!validator.equals(this.get('newPassword'), this.get('ne2Password'))) {\n                validationErrors.push({ message: 'Your new passwords do not match' });\n            }\n\n            if (!validator.isLength(this.get('newPassword'), 8)) {\n                validationErrors.push({ message: 'Your password is not long enough. It must be at least 8 characters long.' });\n            }\n\n            return validationErrors;\n        }),\n\n        isPasswordValid: Ember['default'].computed.empty('passwordValidationErrors.[]'),\n\n        active: Ember['default'].computed('status', function () {\n            return ['active', 'warn-1', 'warn-2', 'warn-3', 'warn-4', 'locked'].indexOf(this.get('status')) > -1;\n        }),\n\n        invited: Ember['default'].computed('status', function () {\n            return ['invited', 'invited-pending'].indexOf(this.get('status')) > -1;\n        }),\n\n        pending: Ember['default'].computed.equal('status', 'invited-pending').property('status')\n    });\n\n});","define('ghost/router', ['exports', 'ember', 'ghost/utils/ghost-paths', 'ghost/utils/document-title'], function (exports, Ember, ghostPaths, documentTitle) {\n\n    'use strict';\n\n    var Router = Ember['default'].Router.extend({\n        location: 'trailing-history', // use HTML5 History API instead of hash-tag based URLs\n        rootURL: ghostPaths['default']().adminRoot, // admin interface lives under sub-directory /ghost\n\n        notifications: Ember['default'].inject.service(),\n\n        clearNotifications: Ember['default'].on('didTransition', function () {\n            var notifications = this.get('notifications');\n\n            notifications.closePassive();\n            notifications.displayDelayed();\n        })\n    });\n\n    documentTitle['default']();\n\n    Router.map(function () {\n        this.route('setup', function () {\n            this.route('one');\n            this.route('two');\n            this.route('three');\n        });\n\n        this.route('signin');\n        this.route('signout');\n        this.route('signup', { path: '/signup/:token' });\n        this.route('reset', { path: '/reset/:token' });\n        this.route('about', { path: '/about' });\n\n        this.route('posts', { path: '/' }, function () {\n            this.route('post', { path: ':post_id' });\n        });\n\n        this.route('editor', function () {\n            this.route('new', { path: '' });\n            this.route('edit', { path: ':post_id' });\n        });\n\n        this.route('team', { path: '/team' }, function () {\n            this.route('user', { path: ':slug' });\n        });\n\n        this.route('settings.general', { path: '/settings/general' });\n        this.route('settings.tags', { path: '/settings/tags' });\n        this.route('settings.labs', { path: '/settings/labs' });\n        this.route('settings.code-injection', { path: '/settings/code-injection' });\n        this.route('settings.navigation', { path: '/settings/navigation' });\n\n        this.route('error404', { path: '/*path' });\n    });\n\n    exports['default'] = Router;\n\n});","define('ghost/routes/about', ['exports', 'ember', 'ic-ajax', 'ghost/routes/authenticated', 'ghost/mixins/style-body'], function (exports, Ember, ic_ajax, AuthenticatedRoute, styleBody) {\n\n    'use strict';\n\n    exports['default'] = AuthenticatedRoute['default'].extend(styleBody['default'], {\n        titleToken: 'About',\n\n        classNames: ['view-about'],\n\n        ghostPaths: Ember['default'].inject.service('ghost-paths'),\n\n        cachedConfig: false,\n\n        model: function model() {\n            var cachedConfig = this.get('cachedConfig'),\n                self = this;\n\n            if (cachedConfig) {\n                return cachedConfig;\n            }\n\n            return ic_ajax.request(this.get('ghostPaths.url').api('configuration')).then(function (configurationResponse) {\n                var configKeyValues = configurationResponse.configuration;\n\n                cachedConfig = {};\n                configKeyValues.forEach(function (configKeyValue) {\n                    cachedConfig[configKeyValue.key] = configKeyValue.value;\n                });\n                self.set('cachedConfig', cachedConfig);\n\n                return cachedConfig;\n            });\n        }\n    });\n\n});","define('ghost/routes/application', ['exports', 'ember', 'simple-auth/mixins/application-route-mixin', 'simple-auth/configuration', 'ghost/mixins/shortcuts-route', 'ghost/utils/ctrl-or-cmd'], function (exports, Ember, ApplicationRouteMixin, Configuration, ShortcutsRoute, ctrlOrCmd) {\n\n    'use strict';\n\n    /* global key */\n\n    var shortcuts = {};\n\n    shortcuts.esc = { action: 'closeMenus', scope: 'all' };\n    shortcuts.enter = { action: 'confirmModal', scope: 'modal' };\n    shortcuts[ctrlOrCmd['default'] + '+s'] = { action: 'save', scope: 'all' };\n\n    exports['default'] = Ember['default'].Route.extend(ApplicationRouteMixin['default'], ShortcutsRoute['default'], {\n        shortcuts: shortcuts,\n\n        config: Ember['default'].inject.service(),\n        dropdown: Ember['default'].inject.service(),\n        notifications: Ember['default'].inject.service(),\n\n        afterModel: function afterModel(model, transition) {\n            if (this.get('session').isAuthenticated) {\n                transition.send('loadServerNotifications');\n            }\n        },\n\n        title: function title(tokens) {\n            return tokens.join(' - ') + ' - ' + this.get('config.blogTitle');\n        },\n\n        actions: {\n            openMobileMenu: function openMobileMenu() {\n                this.controller.set('showMobileMenu', true);\n            },\n\n            openSettingsMenu: function openSettingsMenu() {\n                this.controller.set('showSettingsMenu', true);\n            },\n\n            closeMenus: function closeMenus() {\n                this.get('dropdown').closeDropdowns();\n                this.get('notifications').closeAll();\n                this.send('closeModal');\n                this.controller.setProperties({\n                    showSettingsMenu: false,\n                    showMobileMenu: false\n                });\n            },\n\n            signedIn: function signedIn() {\n                this.send('loadServerNotifications', true);\n            },\n\n            invalidateSession: function invalidateSession() {\n                this.get('session').invalidate();\n            },\n\n            sessionAuthenticationFailed: function sessionAuthenticationFailed(error) {\n                if (error.errors) {\n                    // These are server side errors, which can be marked as htmlSafe\n                    error.errors.forEach(function (err) {\n                        err.message = err.message.htmlSafe();\n                    });\n\n                    this.get('notifications').showErrors(error.errors);\n                } else {\n                    // connection errors don't return proper status message, only req.body\n                    this.get('notifications').showError('There was a problem on the server.');\n                }\n            },\n\n            sessionAuthenticationSucceeded: function sessionAuthenticationSucceeded() {\n                var appController = this.controllerFor('application'),\n                    self = this;\n\n                if (appController && appController.get('skipAuthSuccessHandler')) {\n                    return;\n                }\n\n                this.get('session.user').then(function (user) {\n                    self.send('signedIn', user);\n                    var attemptedTransition = self.get('session').get('attemptedTransition');\n                    if (attemptedTransition) {\n                        attemptedTransition.retry();\n                        self.get('session').set('attemptedTransition', null);\n                    } else {\n                        self.transitionTo(Configuration['default'].routeAfterAuthentication);\n                    }\n                });\n            },\n\n            sessionInvalidationFailed: function sessionInvalidationFailed(error) {\n                this.get('notifications').showError(error.message);\n            },\n\n            openModal: function openModal(modalName, model, type) {\n                this.get('dropdown').closeDropdowns();\n                key.setScope('modal');\n                modalName = 'modals/' + modalName;\n                this.set('modalName', modalName);\n\n                // We don't always require a modal to have a controller\n                // so we're skipping asserting if one exists\n                if (this.controllerFor(modalName, true)) {\n                    this.controllerFor(modalName).set('model', model);\n\n                    if (type) {\n                        this.controllerFor(modalName).set('imageType', type);\n                        this.controllerFor(modalName).set('src', model.get(type));\n                    }\n                }\n\n                return this.render(modalName, {\n                    into: 'application',\n                    outlet: 'modal'\n                });\n            },\n\n            confirmModal: function confirmModal() {\n                var modalName = this.get('modalName');\n\n                this.send('closeModal');\n\n                if (this.controllerFor(modalName, true)) {\n                    this.controllerFor(modalName).send('confirmAccept');\n                }\n            },\n\n            closeModal: function closeModal() {\n                this.disconnectOutlet({\n                    outlet: 'modal',\n                    parentView: 'application'\n                });\n\n                key.setScope('default');\n            },\n\n            loadServerNotifications: function loadServerNotifications(isDelayed) {\n                var self = this;\n\n                if (this.session.isAuthenticated) {\n                    this.get('session.user').then(function (user) {\n                        if (!user.get('isAuthor') && !user.get('isEditor')) {\n                            self.store.findAll('notification').then(function (serverNotifications) {\n                                serverNotifications.forEach(function (notification) {\n                                    self.get('notifications').handleNotification(notification, isDelayed);\n                                });\n                            });\n                        }\n                    });\n                }\n            },\n\n            handleErrors: function handleErrors(errors) {\n                var notifications = this.get('notifications');\n\n                notifications.clear();\n                errors.forEach(function (errorObj) {\n                    notifications.showError(errorObj.message || errorObj);\n\n                    if (errorObj.hasOwnProperty('el')) {\n                        errorObj.el.addClass('input-error');\n                    }\n                });\n            },\n\n            // noop default for unhandled save (used from shortcuts)\n            save: Ember['default'].K\n        }\n    });\n\n});","define('ghost/routes/authenticated', ['exports', 'ember', 'simple-auth/mixins/authenticated-route-mixin'], function (exports, Ember, AuthenticatedRouteMixin) {\n\n\t'use strict';\n\n\tvar AuthenticatedRoute = Ember['default'].Route.extend(AuthenticatedRouteMixin['default']);\n\n\texports['default'] = AuthenticatedRoute;\n\n});","define('ghost/routes/editor/edit', ['exports', 'ghost/routes/authenticated', 'ghost/mixins/editor-base-route', 'ghost/utils/isNumber', 'ghost/utils/isFinite'], function (exports, AuthenticatedRoute, base, isNumber, isFinite) {\n\n    'use strict';\n\n    var EditorEditRoute = AuthenticatedRoute['default'].extend(base['default'], {\n        titleToken: 'Editor',\n\n        model: function model(params) {\n            var self = this,\n                postId,\n                query;\n\n            postId = Number(params.post_id);\n\n            if (!isNumber['default'](postId) || !isFinite['default'](postId) || postId % 1 !== 0 || postId <= 0) {\n                return this.transitionTo('error404', 'editor/' + params.post_id);\n            }\n\n            query = {\n                id: postId,\n                status: 'all',\n                staticPages: 'all'\n            };\n\n            return self.store.find('post', query).then(function (records) {\n                var post = records.get('firstObject');\n\n                if (post) {\n                    return post;\n                }\n\n                return self.replaceWith('posts.index');\n            });\n        },\n\n        afterModel: function afterModel(post) {\n            var self = this;\n\n            return self.get('session.user').then(function (user) {\n                if (user.get('isAuthor') && !post.isAuthoredByUser(user)) {\n                    return self.replaceWith('posts.index');\n                }\n            });\n        },\n\n        actions: {\n            authorizationFailed: function authorizationFailed() {\n                this.send('openModal', 'signin');\n            }\n        }\n    });\n\n    exports['default'] = EditorEditRoute;\n\n});","define('ghost/routes/editor/index', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    var EditorRoute = Ember['default'].Route.extend({\n        beforeModel: function beforeModel() {\n            this.transitionTo('editor.new');\n        }\n    });\n\n    exports['default'] = EditorRoute;\n\n});","define('ghost/routes/editor/new', ['exports', 'ghost/routes/authenticated', 'ghost/mixins/editor-base-route'], function (exports, AuthenticatedRoute, base) {\n\n    'use strict';\n\n    var EditorNewRoute = AuthenticatedRoute['default'].extend(base['default'], {\n        titleToken: 'Editor',\n\n        model: function model() {\n            var self = this;\n            return this.get('session.user').then(function (user) {\n                return self.store.createRecord('post', {\n                    author: user\n                });\n            });\n        },\n\n        setupController: function setupController(controller, model) {\n            var psm = this.controllerFor('post-settings-menu');\n\n            // make sure there are no titleObserver functions hanging around\n            // from previous posts\n            psm.removeObserver('titleScratch', psm, 'titleObserver');\n\n            // Ensure that the PSM Image Uploader and Publish Date selector resets\n            psm.send('resetUploader');\n            psm.send('resetPubDate');\n\n            this._super(controller, model);\n        }\n    });\n\n    exports['default'] = EditorNewRoute;\n\n});","define('ghost/routes/error404', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    var Error404Route = Ember['default'].Route.extend({\n        controllerName: 'error',\n        templateName: 'error',\n        titleToken: 'Error',\n\n        model: function model() {\n            return {\n                status: 404\n            };\n        }\n    });\n\n    exports['default'] = Error404Route;\n\n});","define('ghost/routes/mobile-index-route', ['exports', 'ember', 'ghost/utils/mobile'], function (exports, Ember, mobileQuery) {\n\n    'use strict';\n\n    var MobileIndexRoute = Ember['default'].Route.extend({\n        desktopTransition: Ember['default'].K,\n\n        activate: function attachDesktopTransition() {\n            this._super();\n            mobileQuery['default'].addListener(this.desktopTransitionMQ);\n        },\n\n        deactivate: function removeDesktopTransition() {\n            this._super();\n            mobileQuery['default'].removeListener(this.desktopTransitionMQ);\n        },\n\n        setDesktopTransitionMQ: Ember['default'].on('init', function () {\n            var self = this;\n            this.set('desktopTransitionMQ', function desktopTransitionMQ() {\n                if (!mobileQuery['default'].matches) {\n                    self.desktopTransition();\n                }\n            });\n        })\n    });\n\n    exports['default'] = MobileIndexRoute;\n\n});","define('ghost/routes/posts', ['exports', 'ember', 'ghost/routes/authenticated', 'ghost/mixins/style-body', 'ghost/mixins/shortcuts-route', 'ghost/mixins/pagination-route'], function (exports, Ember, AuthenticatedRoute, styleBody, ShortcutsRoute, PaginationRouteMixin) {\n\n    'use strict';\n\n    var paginationSettings, PostsRoute;\n\n    paginationSettings = {\n        status: 'all',\n        staticPages: 'all',\n        page: 1\n    };\n\n    PostsRoute = AuthenticatedRoute['default'].extend(ShortcutsRoute['default'], styleBody['default'], PaginationRouteMixin['default'], {\n        titleToken: 'Content',\n\n        classNames: ['manage'],\n\n        model: function model() {\n            var self = this;\n\n            return this.get('session.user').then(function (user) {\n                if (user.get('isAuthor')) {\n                    paginationSettings.author = user.get('slug');\n                }\n\n                // using `.filter` allows the template to auto-update when new models are pulled in from the server.\n                // we just need to 'return true' to allow all models by default.\n                return self.store.filter('post', paginationSettings, function (post) {\n                    if (user.get('isAuthor')) {\n                        return post.isAuthoredByUser(user);\n                    }\n\n                    return true;\n                });\n            });\n        },\n\n        setupController: function setupController(controller, model) {\n            this._super(controller, model);\n            this.setupPagination(paginationSettings);\n        },\n\n        stepThroughPosts: function stepThroughPosts(step) {\n            var currentPost = this.get('controller.currentPost'),\n                posts = this.get('controller.arrangedContent'),\n                length = posts.get('length'),\n                newPosition;\n\n            newPosition = posts.indexOf(currentPost) + step;\n\n            // if we are on the first or last item\n            // just do nothing (desired behavior is to not\n            // loop around)\n            if (newPosition >= length) {\n                return;\n            } else if (newPosition < 0) {\n                return;\n            }\n\n            this.transitionTo('posts.post', posts.objectAt(newPosition));\n        },\n\n        scrollContent: function scrollContent(amount) {\n            var content = Ember['default'].$('.js-content-preview'),\n                scrolled = content.scrollTop();\n\n            content.scrollTop(scrolled + 50 * amount);\n        },\n\n        shortcuts: {\n            'up, k': 'moveUp',\n            'down, j': 'moveDown',\n            left: 'focusList',\n            right: 'focusContent',\n            c: 'newPost'\n        },\n\n        actions: {\n            focusList: function focusList() {\n                this.controller.set('keyboardFocus', 'postList');\n            },\n            focusContent: function focusContent() {\n                this.controller.set('keyboardFocus', 'postContent');\n            },\n            newPost: function newPost() {\n                this.transitionTo('editor.new');\n            },\n\n            moveUp: function moveUp() {\n                if (this.controller.get('postContentFocused')) {\n                    this.scrollContent(-1);\n                } else {\n                    this.stepThroughPosts(-1);\n                }\n            },\n\n            moveDown: function moveDown() {\n                if (this.controller.get('postContentFocused')) {\n                    this.scrollContent(1);\n                } else {\n                    this.stepThroughPosts(1);\n                }\n            }\n        }\n    });\n\n    exports['default'] = PostsRoute;\n\n});","define('ghost/routes/posts/index', ['exports', 'simple-auth/mixins/authenticated-route-mixin', 'ghost/routes/mobile-index-route', 'ghost/utils/mobile'], function (exports, AuthenticatedRouteMixin, MobileIndexRoute, mobileQuery) {\n\n    'use strict';\n\n    var PostsIndexRoute = MobileIndexRoute['default'].extend(AuthenticatedRouteMixin['default'], {\n        noPosts: false,\n\n        // Transition to a specific post if we're not on mobile\n        beforeModel: function beforeModel() {\n            if (!mobileQuery['default'].matches) {\n                return this.goToPost();\n            }\n        },\n\n        setupController: function setupController(controller, model) {\n            /*jshint unused:false*/\n            controller.set('noPosts', this.get('noPosts'));\n        },\n\n        goToPost: function goToPost() {\n            var self = this,\n\n            // the store has been populated by PostsRoute\n            posts = this.store.all('post'),\n                post;\n\n            return this.get('session.user').then(function (user) {\n                post = posts.find(function (post) {\n                    // Authors can only see posts they've written\n                    if (user.get('isAuthor')) {\n                        return post.isAuthoredByUser(user);\n                    }\n\n                    return true;\n                });\n\n                if (post) {\n                    return self.transitionTo('posts.post', post);\n                }\n\n                self.set('noPosts', true);\n            });\n        },\n\n        // Mobile posts route callback\n        desktopTransition: function desktopTransition() {\n            this.goToPost();\n        }\n    });\n\n    exports['default'] = PostsIndexRoute;\n\n});","define('ghost/routes/posts/post', ['exports', 'ghost/routes/authenticated', 'ghost/mixins/shortcuts-route', 'ghost/utils/isNumber', 'ghost/utils/isFinite'], function (exports, AuthenticatedRoute, ShortcutsRoute, isNumber, isFinite) {\n\n    'use strict';\n\n    var PostsPostRoute = AuthenticatedRoute['default'].extend(ShortcutsRoute['default'], {\n        model: function model(params) {\n            var self = this,\n                post,\n                postId,\n                query;\n\n            postId = Number(params.post_id);\n\n            if (!isNumber['default'](postId) || !isFinite['default'](postId) || postId % 1 !== 0 || postId <= 0) {\n                return this.transitionTo('error404', params.post_id);\n            }\n\n            post = this.store.getById('post', postId);\n            if (post) {\n                return post;\n            }\n\n            query = {\n                id: postId,\n                status: 'all',\n                staticPages: 'all'\n            };\n\n            return self.store.find('post', query).then(function (records) {\n                var post = records.get('firstObject');\n\n                if (post) {\n                    return post;\n                }\n\n                return self.replaceWith('posts.index');\n            });\n        },\n\n        afterModel: function afterModel(post) {\n            var self = this;\n\n            return self.get('session.user').then(function (user) {\n                if (user.get('isAuthor') && !post.isAuthoredByUser(user)) {\n                    return self.replaceWith('posts.index');\n                }\n            });\n        },\n\n        setupController: function setupController(controller, model) {\n            this._super(controller, model);\n\n            this.controllerFor('posts').set('currentPost', model);\n        },\n\n        shortcuts: {\n            'enter, o': 'openEditor',\n            'command+backspace, ctrl+backspace': 'deletePost'\n        },\n\n        actions: {\n            openEditor: function openEditor() {\n                this.transitionTo('editor.edit', this.get('controller.model.id'));\n            },\n\n            deletePost: function deletePost() {\n                this.send('openModal', 'delete-post', this.get('controller.model'));\n            }\n        }\n    });\n\n    exports['default'] = PostsPostRoute;\n\n});","define('ghost/routes/reset', ['exports', 'ember', 'simple-auth/configuration', 'ghost/mixins/style-body'], function (exports, Ember, Configuration, styleBody) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Route.extend(styleBody['default'], {\n        classNames: ['ghost-reset'],\n\n        notifications: Ember['default'].inject.service(),\n\n        beforeModel: function beforeModel() {\n            if (this.get('session').isAuthenticated) {\n                this.get('notifications').showWarn('You can\\'t reset your password while you\\'re signed in.', { delayed: true });\n                this.transitionTo(Configuration['default'].routeAfterAuthentication);\n            }\n        },\n\n        setupController: function setupController(controller, params) {\n            controller.token = params.token;\n        },\n\n        // Clear out any sensitive information\n        deactivate: function deactivate() {\n            this._super();\n            this.controller.clearData();\n        }\n    });\n\n});","define('ghost/routes/settings/apps', ['exports', 'ember', 'ghost/routes/authenticated', 'ghost/mixins/current-user-settings', 'ghost/mixins/style-body'], function (exports, Ember, AuthenticatedRoute, CurrentUserSettings, styleBody) {\n\n    'use strict';\n\n    exports['default'] = AuthenticatedRoute['default'].extend(styleBody['default'], CurrentUserSettings['default'], {\n        titleToken: 'Apps',\n\n        classNames: ['settings-view-apps'],\n\n        config: Ember['default'].inject.service(),\n\n        beforeModel: function beforeModel(transition) {\n            this._super(transition);\n\n            if (!this.get('config.apps')) {\n                return this.transitionTo('settings.general');\n            }\n\n            return this.get('session.user').then(this.transitionAuthor()).then(this.transitionEditor());\n        },\n\n        model: function model() {\n            return this.store.find('app');\n        }\n    });\n\n});","define('ghost/routes/settings/code-injection', ['exports', 'ghost/routes/authenticated', 'ghost/mixins/current-user-settings', 'ghost/mixins/style-body'], function (exports, AuthenticatedRoute, CurrentUserSettings, styleBody) {\n\n    'use strict';\n\n    exports['default'] = AuthenticatedRoute['default'].extend(styleBody['default'], CurrentUserSettings['default'], {\n        titleToken: 'Settings - Code Injection',\n        classNames: ['settings-view-code'],\n\n        beforeModel: function beforeModel() {\n            return this.get('session.user').then(this.transitionAuthor()).then(this.transitionEditor());\n        },\n\n        model: function model() {\n            return this.store.find('setting', { type: 'blog,theme' }).then(function (records) {\n                return records.get('firstObject');\n            });\n        },\n\n        actions: {\n            save: function save() {\n                this.get('controller').send('save');\n            }\n        }\n    });\n\n});","define('ghost/routes/settings/general', ['exports', 'ghost/routes/authenticated', 'ghost/mixins/current-user-settings', 'ghost/mixins/style-body'], function (exports, AuthenticatedRoute, CurrentUserSettings, styleBody) {\n\n    'use strict';\n\n    exports['default'] = AuthenticatedRoute['default'].extend(styleBody['default'], CurrentUserSettings['default'], {\n        titleToken: 'Settings - General',\n\n        classNames: ['settings-view-general'],\n\n        beforeModel: function beforeModel(transition) {\n            this._super(transition);\n            return this.get('session.user').then(this.transitionAuthor()).then(this.transitionEditor());\n        },\n\n        model: function model() {\n            return this.store.find('setting', { type: 'blog,theme' }).then(function (records) {\n                return records.get('firstObject');\n            });\n        },\n\n        actions: {\n            save: function save() {\n                this.get('controller').send('save');\n            }\n        }\n    });\n\n});","define('ghost/routes/settings/labs', ['exports', 'ghost/routes/authenticated', 'ghost/mixins/style-body', 'ghost/mixins/current-user-settings'], function (exports, AuthenticatedRoute, styleBody, CurrentUserSettings) {\n\n    'use strict';\n\n    exports['default'] = AuthenticatedRoute['default'].extend(styleBody['default'], CurrentUserSettings['default'], {\n        titleToken: 'Settings - Labs',\n\n        classNames: ['settings'],\n\n        beforeModel: function beforeModel(transition) {\n            this._super(transition);\n            return this.get('session.user').then(this.transitionAuthor()).then(this.transitionEditor());\n        },\n\n        model: function model() {\n            return this.store.find('setting', { type: 'blog,theme' }).then(function (records) {\n                return records.get('firstObject');\n            });\n        }\n    });\n\n});","define('ghost/routes/settings/navigation', ['exports', 'ghost/routes/authenticated', 'ghost/mixins/current-user-settings', 'ghost/mixins/style-body'], function (exports, AuthenticatedRoute, CurrentUserSettings, styleBody) {\n\n    'use strict';\n\n    var NavigationRoute = AuthenticatedRoute['default'].extend(styleBody['default'], CurrentUserSettings['default'], {\n        titleToken: 'Settings - Navigation',\n\n        classNames: ['settings-view-navigation'],\n\n        beforeModel: function beforeModel(transition) {\n            this._super(transition);\n            return this.get('session.user').then(this.transitionAuthor());\n        },\n\n        model: function model() {\n            return this.store.find('setting', { type: 'blog,theme' }).then(function (records) {\n                return records.get('firstObject');\n            });\n        },\n\n        actions: {\n            save: function save() {\n                // since shortcuts are run on the route, we have to signal to the components\n                // on the page that we're about to save.\n                $('.page-actions .btn-blue').focus();\n\n                this.get('controller').send('save');\n            }\n        }\n    });\n\n    exports['default'] = NavigationRoute;\n\n});","define('ghost/routes/settings/tags', ['exports', 'ghost/routes/authenticated', 'ghost/mixins/current-user-settings', 'ghost/mixins/pagination-route'], function (exports, AuthenticatedRoute, CurrentUserSettings, PaginationRouteMixin) {\n\n    'use strict';\n\n    var TagsRoute, paginationSettings;\n\n    paginationSettings = {\n        page: 1,\n        include: 'post_count',\n        limit: 15\n    };\n\n    TagsRoute = AuthenticatedRoute['default'].extend(CurrentUserSettings['default'], PaginationRouteMixin['default'], {\n        titleToken: 'Settings - Tags',\n\n        beforeModel: function beforeModel(transition) {\n            this._super(transition);\n            return this.get('session.user').then(this.transitionAuthor());\n        },\n\n        model: function model() {\n            this.store.unloadAll('tag');\n\n            return this.store.filter('tag', paginationSettings, function (tag) {\n                return !tag.get('isNew');\n            });\n        },\n\n        setupController: function setupController(controller, model) {\n            this._super(controller, model);\n            this.setupPagination(paginationSettings);\n        },\n\n        renderTemplate: function renderTemplate(controller, model) {\n            this._super(controller, model);\n            this.render('settings/tags/settings-menu', {\n                into: 'application',\n                outlet: 'settings-menu',\n                view: 'settings/tags/settings-menu'\n            });\n        },\n\n        deactivate: function deactivate() {\n            this.controller.send('resetPagination');\n        }\n    });\n\n    exports['default'] = TagsRoute;\n\n});","define('ghost/routes/setup', ['exports', 'ember', 'ic-ajax', 'simple-auth/configuration', 'ghost/mixins/style-body'], function (exports, Ember, ic_ajax, Configuration, styleBody) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Route.extend(styleBody['default'], {\n        titleToken: 'Setup',\n\n        classNames: ['ghost-setup'],\n\n        ghostPaths: Ember['default'].inject.service('ghost-paths'),\n\n        // use the beforeModel hook to check to see whether or not setup has been\n        // previously completed.  If it has, stop the transition into the setup page.\n        beforeModel: function beforeModel() {\n            var self = this;\n\n            // If user is logged in, setup has already been completed.\n            if (this.get('session').isAuthenticated) {\n                this.transitionTo(Configuration['default'].routeAfterAuthentication);\n                return;\n            }\n\n            // If user is not logged in, check the state of the setup process via the API\n            return ic_ajax.request(this.get('ghostPaths.url').api('authentication/setup'), {\n                type: 'GET'\n            }).then(function (result) {\n                var setup = result.setup[0].status;\n\n                if (setup) {\n                    return self.transitionTo('signin');\n                }\n            });\n        }\n    });\n\n});","define('ghost/routes/setup/index', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    var SetupRoute = Ember['default'].Route.extend({\n        beforeModel: function beforeModel() {\n            this.transitionTo('setup.one');\n        }\n    });\n\n    exports['default'] = SetupRoute;\n\n});","define('ghost/routes/setup/one', ['exports', 'ember', 'ic-ajax'], function (exports, Ember, ic_ajax) {\n\n    'use strict';\n\n    var DownloadCountPoller = Ember['default'].Object.extend({\n        url: null,\n        count: 'many, many',\n        runId: null,\n\n        init: function init() {\n            this.downloadCounter();\n            this.poll();\n        },\n\n        poll: function poll() {\n            var interval = 3000,\n                runId;\n\n            runId = Ember['default'].run.later(this, function () {\n                this.downloadCounter();\n                this.poll();\n            }, interval);\n\n            this.set('runId', runId);\n        },\n\n        downloadCounter: function downloadCounter() {\n            var self = this;\n\n            ic_ajax.request(this.get('url')).then(function (data) {\n                self.set('count', data.count.toLocaleString());\n            })['catch'](function () {\n                self.set('count', 'many, many');\n            });\n        }\n    });\n\n    exports['default'] = Ember['default'].Route.extend({\n        ghostPaths: Ember['default'].inject.service('ghost-paths'),\n\n        model: function model() {\n            return DownloadCountPoller.create({ url: this.get('ghostPaths.count') });\n        },\n\n        resetController: function resetController(controller, isExiting) {\n            if (isExiting) {\n                Ember['default'].run.cancel(controller.get('model.runId'));\n                controller.set('model', null);\n            }\n        }\n    });\n\n});","define('ghost/routes/signin', ['exports', 'ember', 'simple-auth/configuration', 'ghost/mixins/style-body'], function (exports, Ember, Configuration, styleBody) {\n\n    'use strict';\n\n    var SigninRoute = Ember['default'].Route.extend(styleBody['default'], {\n        titleToken: 'Sign In',\n\n        classNames: ['ghost-login'],\n\n        beforeModel: function beforeModel() {\n            if (this.get('session').isAuthenticated) {\n                this.transitionTo(Configuration['default'].routeAfterAuthentication);\n            }\n        },\n\n        model: function model() {\n            return Ember['default'].Object.create({\n                identification: '',\n                password: ''\n            });\n        },\n\n        // the deactivate hook is called after a route has been exited.\n        deactivate: function deactivate() {\n            this._super();\n\n            var controller = this.controllerFor('signin');\n\n            // clear the properties that hold the credentials when we're no longer on the signin screen\n            controller.set('model.identification', '');\n            controller.set('model.password', '');\n        }\n    });\n\n    exports['default'] = SigninRoute;\n\n});","define('ghost/routes/signout', ['exports', 'ember', 'ghost/routes/authenticated', 'ghost/mixins/style-body'], function (exports, Ember, AuthenticatedRoute, styleBody) {\n\n    'use strict';\n\n    exports['default'] = AuthenticatedRoute['default'].extend(styleBody['default'], {\n        titleToken: 'Sign Out',\n\n        classNames: ['ghost-signout'],\n\n        notifications: Ember['default'].inject.service(),\n\n        afterModel: function afterModel(model, transition) {\n            this.get('notifications').closeAll();\n            if (Ember['default'].canInvoke(transition, 'send')) {\n                transition.send('invalidateSession');\n                transition.abort();\n            } else {\n                this.send('invalidateSession');\n            }\n        }\n    });\n\n});","define('ghost/routes/signup', ['exports', 'ember', 'ic-ajax', 'simple-auth/configuration', 'ghost/mixins/style-body'], function (exports, Ember, ic_ajax, Configuration, styleBody) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Route.extend(styleBody['default'], {\n        classNames: ['ghost-signup'],\n\n        ghostPaths: Ember['default'].inject.service('ghost-paths'),\n        notifications: Ember['default'].inject.service(),\n\n        beforeModel: function beforeModel() {\n            if (this.get('session').isAuthenticated) {\n                this.get('notifications').showWarn('You need to sign out to register as a new user.', { delayed: true });\n                this.transitionTo(Configuration['default'].routeAfterAuthentication);\n            }\n        },\n\n        model: function model(params) {\n            var self = this,\n                tokenText,\n                email,\n                model = Ember['default'].Object.create(),\n                re = /^(?:[A-Za-z0-9_\\-]{4})*(?:[A-Za-z0-9_\\-]{2}|[A-Za-z0-9_\\-]{3})?$/;\n\n            return new Ember['default'].RSVP.Promise(function (resolve) {\n                if (!re.test(params.token)) {\n                    self.get('notifications').showError('Invalid token.', { delayed: true });\n\n                    return resolve(self.transitionTo('signin'));\n                }\n\n                tokenText = atob(params.token);\n                email = tokenText.split('|')[1];\n\n                model.set('email', email);\n                model.set('token', params.token);\n\n                return ic_ajax.request({\n                    url: self.get('ghostPaths.url').api('authentication', 'invitation'),\n                    type: 'GET',\n                    dataType: 'json',\n                    data: {\n                        email: email\n                    }\n                }).then(function (response) {\n                    if (response && response.invitation && response.invitation[0].valid === false) {\n                        self.get('notifications').showError('The invitation does not exist or is no longer valid.', { delayed: true });\n\n                        return resolve(self.transitionTo('signin'));\n                    }\n\n                    resolve(model);\n                })['catch'](function () {\n                    resolve(model);\n                });\n            });\n        },\n\n        deactivate: function deactivate() {\n            this._super();\n\n            // clear the properties that hold the sensitive data from the controller\n            this.controllerFor('signup').setProperties({ email: '', password: '', token: '' });\n        }\n    });\n\n});","define('ghost/routes/team/index', ['exports', 'ghost/routes/authenticated', 'ghost/mixins/current-user-settings', 'ghost/mixins/pagination-route', 'ghost/mixins/style-body'], function (exports, AuthenticatedRoute, CurrentUserSettings, PaginationRouteMixin, styleBody) {\n\n    'use strict';\n\n    var paginationSettings, TeamIndexRoute;\n\n    paginationSettings = {\n        page: 1,\n        limit: 20,\n        status: 'active'\n    };\n\n    TeamIndexRoute = AuthenticatedRoute['default'].extend(styleBody['default'], CurrentUserSettings['default'], PaginationRouteMixin['default'], {\n        titleToken: 'Team',\n\n        classNames: ['view-users'],\n\n        setupController: function setupController(controller, model) {\n            this._super(controller, model);\n            this.setupPagination(paginationSettings);\n        },\n\n        beforeModel: function beforeModel(transition) {\n            this._super(transition);\n            return this.get('session.user').then(this.transitionAuthor());\n        },\n\n        model: function model() {\n            var self = this;\n\n            return self.store.find('user', { limit: 'all', status: 'invited' }).then(function () {\n                return self.get('session.user').then(function (currentUser) {\n                    if (currentUser.get('isEditor')) {\n                        // Editors only see authors in the list\n                        paginationSettings.role = 'Author';\n                    }\n\n                    return self.store.filter('user', paginationSettings, function (user) {\n                        if (currentUser.get('isEditor')) {\n                            return user.get('isAuthor') || user === currentUser;\n                        }\n                        return true;\n                    });\n                });\n            });\n        },\n\n        actions: {\n            reload: function reload() {\n                this.refresh();\n            }\n        }\n    });\n\n    exports['default'] = TeamIndexRoute;\n\n});","define('ghost/routes/team/user', ['exports', 'ghost/routes/authenticated', 'ghost/mixins/current-user-settings', 'ghost/mixins/style-body'], function (exports, AuthenticatedRoute, CurrentUserSettings, styleBody) {\n\n    'use strict';\n\n    var TeamUserRoute = AuthenticatedRoute['default'].extend(styleBody['default'], CurrentUserSettings['default'], {\n        titleToken: 'Team - User',\n\n        classNames: ['team-view-user'],\n\n        model: function model(params) {\n            var self = this;\n            // TODO: Make custom user adapter that uses /api/users/:slug endpoint\n            // return this.store.find('user', { slug: params.slug });\n\n            // Instead, get all the users and then find by slug\n            return this.store.find('user').then(function (result) {\n                var user = result.findBy('slug', params.slug);\n\n                if (!user) {\n                    return self.transitionTo('error404', 'team/' + params.slug);\n                }\n\n                return user;\n            });\n        },\n\n        afterModel: function afterModel(user) {\n            var self = this;\n            return this.get('session.user').then(function (currentUser) {\n                var isOwnProfile = user.get('id') === currentUser.get('id'),\n                    isAuthor = currentUser.get('isAuthor'),\n                    isEditor = currentUser.get('isEditor');\n                if (isAuthor && !isOwnProfile) {\n                    self.transitionTo('team.user', currentUser);\n                } else if (isEditor && !isOwnProfile && !user.get('isAuthor')) {\n                    self.transitionTo('team');\n                }\n            });\n        },\n\n        deactivate: function deactivate() {\n            var model = this.modelFor('team.user');\n\n            // we want to revert any unsaved changes on exit\n            if (model && model.get('isDirty')) {\n                model.rollback();\n            }\n\n            this._super();\n        },\n\n        actions: {\n            save: function save() {\n                this.get('controller').send('save');\n            }\n        }\n    });\n\n    exports['default'] = TeamUserRoute;\n\n});","define('ghost/serializers/application', ['exports', 'ember', 'ember-data'], function (exports, Ember, DS) {\n\n    'use strict';\n\n    var ApplicationSerializer = DS['default'].RESTSerializer.extend({\n        serializeIntoHash: function serializeIntoHash(hash, type, record, options) {\n            // Our API expects an id on the posted object\n            options = options || {};\n            options.includeId = true;\n\n            // We have a plural root in the API\n            var root = Ember['default'].String.pluralize(type.modelName),\n                data = this.serialize(record, options);\n\n            // Don't ever pass uuid's\n            delete data.uuid;\n\n            hash[root] = [data];\n        }\n    });\n\n    exports['default'] = ApplicationSerializer;\n\n});","define('ghost/serializers/post', ['exports', 'ember', 'ember-data', 'ghost/serializers/application'], function (exports, Ember, DS, ApplicationSerializer) {\n\n    'use strict';\n\n    var PostSerializer = ApplicationSerializer['default'].extend(DS['default'].EmbeddedRecordsMixin, {\n        // settings for the EmbeddedRecordsMixin.\n        attrs: {\n            tags: { embedded: 'always' }\n        },\n\n        normalize: function normalize(type, hash) {\n            // this is to enable us to still access the raw author_id\n            // without requiring an extra get request (since it is an\n            // async relationship).\n            hash.author_id = hash.author;\n\n            return this._super(type, hash);\n        },\n\n        extractSingle: function extractSingle(store, primaryType, payload) {\n            var root = this.keyForAttribute(primaryType.modelName),\n                pluralizedRoot = Ember['default'].String.pluralize(primaryType.modelName);\n\n            // make payload { post: { title: '', tags: [obj, obj], etc. } }.\n            // this allows ember-data to pull the embedded tags out again,\n            // in the function `updatePayloadWithEmbeddedHasMany` of the\n            // EmbeddedRecordsMixin (line: `if (!partial[attribute])`):\n            // https://github.com/emberjs/data/blob/master/packages/activemodel-adapter/lib/system/embedded_records_mixin.js#L499\n            payload[root] = payload[pluralizedRoot][0];\n            delete payload[pluralizedRoot];\n\n            return this._super.apply(this, arguments);\n        },\n\n        serializeIntoHash: function serializeIntoHash(hash, type, record, options) {\n            options = options || {};\n            options.includeId = true;\n\n            // We have a plural root in the API\n            var root = Ember['default'].String.pluralize(type.modelName),\n                data = this.serialize(record, options);\n\n            // Properties that exist on the model but we don't want sent in the payload\n\n            delete data.uuid;\n            delete data.html;\n            // Inserted locally as a convenience.\n            delete data.author_id;\n            // Read-only virtual property.\n            delete data.url;\n\n            hash[root] = [data];\n        }\n    });\n\n    exports['default'] = PostSerializer;\n\n});","define('ghost/serializers/setting', ['exports', 'ember', 'ghost/serializers/application'], function (exports, Ember, ApplicationSerializer) {\n\n    'use strict';\n\n    var SettingSerializer = ApplicationSerializer['default'].extend({\n        serializeIntoHash: function serializeIntoHash(hash, type, record, options) {\n            // Settings API does not want ids\n            options = options || {};\n            options.includeId = false;\n\n            var root = Ember['default'].String.pluralize(type.modelName),\n                data = this.serialize(record, options),\n                payload = [];\n\n            delete data.id;\n\n            Object.keys(data).forEach(function (k) {\n                payload.push({ key: k, value: data[k] });\n            });\n\n            hash[root] = payload;\n        },\n\n        extractArray: function extractArray(store, type, _payload) {\n            var payload = { id: '0' };\n\n            _payload.settings.forEach(function (setting) {\n                payload[setting.key] = setting.value;\n            });\n\n            payload = this.normalize(type, payload);\n\n            return [payload];\n        },\n\n        extractSingle: function extractSingle(store, type, payload) {\n            return this.extractArray(store, type, payload).pop();\n        }\n    });\n\n    exports['default'] = SettingSerializer;\n\n});","define('ghost/serializers/tag', ['exports', 'ember', 'ghost/serializers/application'], function (exports, Ember, ApplicationSerializer) {\n\n    'use strict';\n\n    var TagSerializer = ApplicationSerializer['default'].extend({\n        serializeIntoHash: function serializeIntoHash(hash, type, record, options) {\n            options = options || {};\n            options.includeId = true;\n\n            var root = Ember['default'].String.pluralize(type.modelName),\n                data = this.serialize(record, options);\n\n            // Properties that exist on the model but we don't want sent in the payload\n\n            delete data.uuid;\n            delete data.post_count;\n\n            hash[root] = [data];\n        }\n    });\n\n    exports['default'] = TagSerializer;\n\n});","define('ghost/serializers/user', ['exports', 'ember', 'ember-data', 'ghost/serializers/application'], function (exports, Ember, DS, ApplicationSerializer) {\n\n    'use strict';\n\n    var UserSerializer = ApplicationSerializer['default'].extend(DS['default'].EmbeddedRecordsMixin, {\n        attrs: {\n            roles: { embedded: 'always' }\n        },\n\n        extractSingle: function extractSingle(store, primaryType, payload) {\n            var root = this.keyForAttribute(primaryType.modelName),\n                pluralizedRoot = Ember['default'].String.pluralize(primaryType.modelName);\n\n            payload[root] = payload[pluralizedRoot][0];\n            delete payload[pluralizedRoot];\n\n            return this._super.apply(this, arguments);\n        }\n    });\n\n    exports['default'] = UserSerializer;\n\n});","define('ghost/services/config', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    function isNumeric(num) {\n        return !isNaN(num);\n    }\n\n    function _mapType(val) {\n        if (val === '') {\n            return null;\n        } else if (val === 'true') {\n            return true;\n        } else if (val === 'false') {\n            return false;\n        } else if (isNumeric(val)) {\n            return +val;\n        } else if (val.indexOf('{') === 0) {\n            try {\n                return JSON.parse(val);\n            } catch (e) {\n                /*jshint unused:false */\n                return val;\n            }\n        } else {\n            return val;\n        }\n    }\n\n    exports['default'] = Ember['default'].Service.extend(Ember['default']._ProxyMixin, {\n        content: Ember['default'].computed(function () {\n            var metaConfigTags = Ember['default'].$('meta[name^=\"env-\"]'),\n                config = {};\n\n            metaConfigTags.each(function (i, el) {\n                var key = el.name,\n                    value = el.content,\n                    propertyName = key.substring(4);\n\n                config[propertyName] = _mapType(value);\n            });\n\n            return config;\n        })\n    });\n\n});","define('ghost/services/dropdown', ['exports', 'ember', 'ghost/mixins/body-event-listener'], function (exports, Ember, BodyEventListener) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Service.extend(Ember['default'].Evented, BodyEventListener['default'], {\n        bodyClick: function bodyClick(event) {\n            /*jshint unused:false */\n            this.closeDropdowns();\n        },\n\n        closeDropdowns: function closeDropdowns() {\n            this.trigger('close');\n        },\n\n        toggleDropdown: function toggleDropdown(dropdownName, dropdownButton) {\n            this.trigger('toggle', { target: dropdownName, button: dropdownButton });\n        }\n    });\n\n});","define('ghost/services/ghost-paths', ['exports', 'ember', 'ghost/utils/ghost-paths'], function (exports, Ember, ghostPaths) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Service.extend(Ember['default']._ProxyMixin, {\n        content: ghostPaths['default']()\n    });\n\n});","define('ghost/services/notifications', ['exports', 'ember', 'ghost/models/notification'], function (exports, Ember, Notification) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Service.extend({\n        delayedNotifications: Ember['default'].A(),\n        content: Ember['default'].A(),\n        timeout: 3000,\n\n        pushObject: function pushObject(object) {\n            // object can be either a DS.Model or a plain JS object, so when working with\n            // it, we need to handle both cases.\n\n            // make sure notifications have all the necessary properties set.\n            if (typeof object.toJSON === 'function') {\n                // working with a DS.Model\n\n                if (object.get('location') === '') {\n                    object.set('location', 'bottom');\n                }\n            } else {\n                if (!object.location) {\n                    object.location = 'bottom';\n                }\n            }\n\n            this._super(object);\n        },\n\n        handleNotification: function handleNotification(message, delayed) {\n            if (typeof message.toJSON === 'function') {\n                // If this is a persistent message from the server, treat it as html safe\n                if (message.get('status') === 'persistent') {\n                    message.set('message', message.get('message').htmlSafe());\n                }\n\n                if (!message.get('status')) {\n                    message.set('status', 'passive');\n                }\n            } else {\n                if (!message.status) {\n                    message.status = 'passive';\n                }\n            }\n\n            if (!delayed) {\n                this.get('content').pushObject(message);\n            } else {\n                this.delayedNotifications.pushObject(message);\n            }\n        },\n\n        showError: function showError(message, options) {\n            options = options || {};\n\n            if (!options.doNotClosePassive) {\n                this.closePassive();\n            }\n\n            this.handleNotification({\n                type: 'error',\n                message: message\n            }, options.delayed);\n        },\n\n        showErrors: function showErrors(errors, options) {\n            options = options || {};\n\n            if (!options.doNotClosePassive) {\n                this.closePassive();\n            }\n\n            for (var i = 0; i < errors.length; i += 1) {\n                this.showError(errors[i].message || errors[i], { doNotClosePassive: true });\n            }\n        },\n\n        showAPIError: function showAPIError(resp, options) {\n            options = options || {};\n\n            if (!options.doNotClosePassive) {\n                this.closePassive();\n            }\n\n            options.defaultErrorText = options.defaultErrorText || 'There was a problem on the server, please try again.';\n\n            if (resp && resp.jqXHR && resp.jqXHR.responseJSON && resp.jqXHR.responseJSON.error) {\n                this.showError(resp.jqXHR.responseJSON.error, options);\n            } else if (resp && resp.jqXHR && resp.jqXHR.responseJSON && resp.jqXHR.responseJSON.errors) {\n                this.showErrors(resp.jqXHR.responseJSON.errors, options);\n            } else if (resp && resp.jqXHR && resp.jqXHR.responseJSON && resp.jqXHR.responseJSON.message) {\n                this.showError(resp.jqXHR.responseJSON.message, options);\n            } else {\n                this.showError(options.defaultErrorText, { doNotClosePassive: true });\n            }\n        },\n\n        showInfo: function showInfo(message, options) {\n            options = options || {};\n\n            if (!options.doNotClosePassive) {\n                this.closePassive();\n            }\n\n            this.handleNotification({\n                type: 'info',\n                message: message\n            }, options.delayed);\n        },\n\n        showSuccess: function showSuccess(message, options) {\n            options = options || {};\n\n            if (!options.doNotClosePassive) {\n                this.closePassive();\n            }\n\n            this.handleNotification({\n                type: 'success',\n                message: message\n            }, options.delayed);\n        },\n\n        showWarn: function showWarn(message, options) {\n            options = options || {};\n\n            if (!options.doNotClosePassive) {\n                this.closePassive();\n            }\n\n            this.handleNotification({\n                type: 'warn',\n                message: message\n            }, options.delayed);\n        },\n\n        displayDelayed: function displayDelayed() {\n            var self = this;\n\n            self.delayedNotifications.forEach(function (message) {\n                self.get('content').pushObject(message);\n            });\n            self.delayedNotifications = [];\n        },\n\n        closeNotification: function closeNotification(notification) {\n            var content = this.get('content');\n\n            if (notification instanceof Notification['default']) {\n                notification.deleteRecord();\n                notification.save()['finally'](function () {\n                    content.removeObject(notification);\n                });\n            } else {\n                content.removeObject(notification);\n            }\n        },\n\n        closePassive: function closePassive() {\n            this.set('content', this.get('content').rejectBy('status', 'passive'));\n        },\n\n        closePersistent: function closePersistent() {\n            this.set('content', this.get('content').rejectBy('status', 'persistent'));\n        },\n\n        closeAll: function closeAll() {\n            this.get('content').clear();\n        }\n    });\n\n});","define('ghost/templates/-contributors', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"article\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"a\");\n        dom.setAttribute(el2,\"href\",\"https://github.com/ErisDS\");\n        dom.setAttribute(el2,\"title\",\"ErisDS\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"img\");\n        dom.setAttribute(el3,\"alt\",\"ErisDS\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"article\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"a\");\n        dom.setAttribute(el2,\"href\",\"https://github.com/jaswilli\");\n        dom.setAttribute(el2,\"title\",\"jaswilli\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"img\");\n        dom.setAttribute(el3,\"alt\",\"jaswilli\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"article\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"a\");\n        dom.setAttribute(el2,\"href\",\"https://github.com/JohnONolan\");\n        dom.setAttribute(el2,\"title\",\"JohnONolan\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"img\");\n        dom.setAttribute(el3,\"alt\",\"JohnONolan\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"article\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"a\");\n        dom.setAttribute(el2,\"href\",\"https://github.com/PaulAdamDavis\");\n        dom.setAttribute(el2,\"title\",\"PaulAdamDavis\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"img\");\n        dom.setAttribute(el3,\"alt\",\"PaulAdamDavis\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"article\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"a\");\n        dom.setAttribute(el2,\"href\",\"https://github.com/novaugust\");\n        dom.setAttribute(el2,\"title\",\"novaugust\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"img\");\n        dom.setAttribute(el3,\"alt\",\"novaugust\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"article\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"a\");\n        dom.setAttribute(el2,\"href\",\"https://github.com/acburdine\");\n        dom.setAttribute(el2,\"title\",\"acburdine\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"img\");\n        dom.setAttribute(el3,\"alt\",\"acburdine\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"article\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"a\");\n        dom.setAttribute(el2,\"href\",\"https://github.com/cobbspur\");\n        dom.setAttribute(el2,\"title\",\"cobbspur\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"img\");\n        dom.setAttribute(el3,\"alt\",\"cobbspur\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"article\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"a\");\n        dom.setAttribute(el2,\"href\",\"https://github.com/rwjblue\");\n        dom.setAttribute(el2,\"title\",\"rwjblue\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"img\");\n        dom.setAttribute(el3,\"alt\",\"rwjblue\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"article\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"a\");\n        dom.setAttribute(el2,\"href\",\"https://github.com/felixrieseberg\");\n        dom.setAttribute(el2,\"title\",\"felixrieseberg\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"img\");\n        dom.setAttribute(el3,\"alt\",\"felixrieseberg\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"article\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"a\");\n        dom.setAttribute(el2,\"href\",\"https://github.com/halfdan\");\n        dom.setAttribute(el2,\"title\",\"halfdan\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"img\");\n        dom.setAttribute(el3,\"alt\",\"halfdan\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"article\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"a\");\n        dom.setAttribute(el2,\"href\",\"https://github.com/josephwegner\");\n        dom.setAttribute(el2,\"title\",\"josephwegner\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"img\");\n        dom.setAttribute(el3,\"alt\",\"josephwegner\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"article\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"a\");\n        dom.setAttribute(el2,\"href\",\"https://github.com/hex337\");\n        dom.setAttribute(el2,\"title\",\"hex337\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"img\");\n        dom.setAttribute(el3,\"alt\",\"hex337\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"article\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"a\");\n        dom.setAttribute(el2,\"href\",\"https://github.com/kevinansfield\");\n        dom.setAttribute(el2,\"title\",\"kevinansfield\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"img\");\n        dom.setAttribute(el3,\"alt\",\"kevinansfield\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"article\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"a\");\n        dom.setAttribute(el2,\"href\",\"https://github.com/dbalders\");\n        dom.setAttribute(el2,\"title\",\"dbalders\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"img\");\n        dom.setAttribute(el3,\"alt\",\"dbalders\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"article\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"a\");\n        dom.setAttribute(el2,\"href\",\"https://github.com/sebgie\");\n        dom.setAttribute(el2,\"title\",\"sebgie\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"img\");\n        dom.setAttribute(el3,\"alt\",\"sebgie\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"article\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"a\");\n        dom.setAttribute(el2,\"href\",\"https://github.com/chilts\");\n        dom.setAttribute(el2,\"title\",\"chilts\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"img\");\n        dom.setAttribute(el3,\"alt\",\"chilts\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"article\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"a\");\n        dom.setAttribute(el2,\"href\",\"https://github.com/nsfmc\");\n        dom.setAttribute(el2,\"title\",\"nsfmc\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"img\");\n        dom.setAttribute(el3,\"alt\",\"nsfmc\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"article\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"a\");\n        dom.setAttribute(el2,\"href\",\"https://github.com/harryhope\");\n        dom.setAttribute(el2,\"title\",\"harryhope\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"img\");\n        dom.setAttribute(el3,\"alt\",\"harryhope\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, subexpr = hooks.subexpr, concat = hooks.concat, attribute = hooks.attribute;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element0 = dom.childAt(fragment, [0, 1, 1]);\n        var element1 = dom.childAt(fragment, [2, 1, 1]);\n        var element2 = dom.childAt(fragment, [4, 1, 1]);\n        var element3 = dom.childAt(fragment, [6, 1, 1]);\n        var element4 = dom.childAt(fragment, [8, 1, 1]);\n        var element5 = dom.childAt(fragment, [10, 1, 1]);\n        var element6 = dom.childAt(fragment, [12, 1, 1]);\n        var element7 = dom.childAt(fragment, [14, 1, 1]);\n        var element8 = dom.childAt(fragment, [16, 1, 1]);\n        var element9 = dom.childAt(fragment, [18, 1, 1]);\n        var element10 = dom.childAt(fragment, [20, 1, 1]);\n        var element11 = dom.childAt(fragment, [22, 1, 1]);\n        var element12 = dom.childAt(fragment, [24, 1, 1]);\n        var element13 = dom.childAt(fragment, [26, 1, 1]);\n        var element14 = dom.childAt(fragment, [28, 1, 1]);\n        var element15 = dom.childAt(fragment, [30, 1, 1]);\n        var element16 = dom.childAt(fragment, [32, 1, 1]);\n        var element17 = dom.childAt(fragment, [34, 1, 1]);\n        var attrMorph0 = dom.createAttrMorph(element0, 'src');\n        var attrMorph1 = dom.createAttrMorph(element1, 'src');\n        var attrMorph2 = dom.createAttrMorph(element2, 'src');\n        var attrMorph3 = dom.createAttrMorph(element3, 'src');\n        var attrMorph4 = dom.createAttrMorph(element4, 'src');\n        var attrMorph5 = dom.createAttrMorph(element5, 'src');\n        var attrMorph6 = dom.createAttrMorph(element6, 'src');\n        var attrMorph7 = dom.createAttrMorph(element7, 'src');\n        var attrMorph8 = dom.createAttrMorph(element8, 'src');\n        var attrMorph9 = dom.createAttrMorph(element9, 'src');\n        var attrMorph10 = dom.createAttrMorph(element10, 'src');\n        var attrMorph11 = dom.createAttrMorph(element11, 'src');\n        var attrMorph12 = dom.createAttrMorph(element12, 'src');\n        var attrMorph13 = dom.createAttrMorph(element13, 'src');\n        var attrMorph14 = dom.createAttrMorph(element14, 'src');\n        var attrMorph15 = dom.createAttrMorph(element15, 'src');\n        var attrMorph16 = dom.createAttrMorph(element16, 'src');\n        var attrMorph17 = dom.createAttrMorph(element17, 'src');\n        attribute(env, attrMorph0, element0, \"src\", concat(env, [subexpr(env, context, \"gh-path\", [\"admin\", \"/img/contributors\"], {}), \"/ErisDS\"]));\n        attribute(env, attrMorph1, element1, \"src\", concat(env, [subexpr(env, context, \"gh-path\", [\"admin\", \"/img/contributors\"], {}), \"/jaswilli\"]));\n        attribute(env, attrMorph2, element2, \"src\", concat(env, [subexpr(env, context, \"gh-path\", [\"admin\", \"/img/contributors\"], {}), \"/JohnONolan\"]));\n        attribute(env, attrMorph3, element3, \"src\", concat(env, [subexpr(env, context, \"gh-path\", [\"admin\", \"/img/contributors\"], {}), \"/PaulAdamDavis\"]));\n        attribute(env, attrMorph4, element4, \"src\", concat(env, [subexpr(env, context, \"gh-path\", [\"admin\", \"/img/contributors\"], {}), \"/novaugust\"]));\n        attribute(env, attrMorph5, element5, \"src\", concat(env, [subexpr(env, context, \"gh-path\", [\"admin\", \"/img/contributors\"], {}), \"/acburdine\"]));\n        attribute(env, attrMorph6, element6, \"src\", concat(env, [subexpr(env, context, \"gh-path\", [\"admin\", \"/img/contributors\"], {}), \"/cobbspur\"]));\n        attribute(env, attrMorph7, element7, \"src\", concat(env, [subexpr(env, context, \"gh-path\", [\"admin\", \"/img/contributors\"], {}), \"/rwjblue\"]));\n        attribute(env, attrMorph8, element8, \"src\", concat(env, [subexpr(env, context, \"gh-path\", [\"admin\", \"/img/contributors\"], {}), \"/felixrieseberg\"]));\n        attribute(env, attrMorph9, element9, \"src\", concat(env, [subexpr(env, context, \"gh-path\", [\"admin\", \"/img/contributors\"], {}), \"/halfdan\"]));\n        attribute(env, attrMorph10, element10, \"src\", concat(env, [subexpr(env, context, \"gh-path\", [\"admin\", \"/img/contributors\"], {}), \"/josephwegner\"]));\n        attribute(env, attrMorph11, element11, \"src\", concat(env, [subexpr(env, context, \"gh-path\", [\"admin\", \"/img/contributors\"], {}), \"/hex337\"]));\n        attribute(env, attrMorph12, element12, \"src\", concat(env, [subexpr(env, context, \"gh-path\", [\"admin\", \"/img/contributors\"], {}), \"/kevinansfield\"]));\n        attribute(env, attrMorph13, element13, \"src\", concat(env, [subexpr(env, context, \"gh-path\", [\"admin\", \"/img/contributors\"], {}), \"/dbalders\"]));\n        attribute(env, attrMorph14, element14, \"src\", concat(env, [subexpr(env, context, \"gh-path\", [\"admin\", \"/img/contributors\"], {}), \"/sebgie\"]));\n        attribute(env, attrMorph15, element15, \"src\", concat(env, [subexpr(env, context, \"gh-path\", [\"admin\", \"/img/contributors\"], {}), \"/chilts\"]));\n        attribute(env, attrMorph16, element16, \"src\", concat(env, [subexpr(env, context, \"gh-path\", [\"admin\", \"/img/contributors\"], {}), \"/nsfmc\"]));\n        attribute(env, attrMorph17, element17, \"src\", concat(env, [subexpr(env, context, \"gh-path\", [\"admin\", \"/img/contributors\"], {}), \"/harryhope\"]));\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('ghost/templates/-import-errors', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.12.1\",\n          blockParams: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"    \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"tr\");\n            var el2 = dom.createElement(\"td\");\n            var el3 = dom.createComment(\"\");\n            dom.appendChild(el2, el3);\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement, blockArguments) {\n            var dom = env.dom;\n            var hooks = env.hooks, set = hooks.set, content = hooks.content;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 0]),0,0);\n            set(env, context, \"error\", blockArguments[0]);\n            content(env, morph0, context, \"error.message\");\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createElement(\"table\");\n          dom.setAttribute(el1,\"class\",\"table\");\n          var el2 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createComment(\"\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(dom.childAt(fragment, [0]),1,1);\n          block(env, morph0, context, \"each\", [get(env, context, \"importErrors\")], {}, child0, null);\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n        dom.insertBoundary(fragment, null);\n        dom.insertBoundary(fragment, 0);\n        block(env, morph0, context, \"if\", [get(env, context, \"importErrors\")], {}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('ghost/templates/-publish-bar', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"footer\");\n        dom.setAttribute(el1,\"id\",\"publish-bar\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"publish-bar-inner\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createComment(\"\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"div\");\n        dom.setAttribute(el3,\"class\",\"publish-bar-actions\");\n        var el4 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"button\");\n        dom.setAttribute(el4,\"type\",\"button\");\n        dom.setAttribute(el4,\"class\",\"post-settings\");\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"i\");\n        dom.setAttribute(el5,\"class\",\"icon-settings\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createComment(\"\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, inline = hooks.inline, element = hooks.element;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element0 = dom.childAt(fragment, [0, 1]);\n        var element1 = dom.childAt(element0, [3]);\n        var element2 = dom.childAt(element1, [1]);\n        var morph0 = dom.createMorphAt(element0,1,1);\n        var morph1 = dom.createMorphAt(element1,3,3);\n        inline(env, morph0, context, \"render\", [\"post-tags-input\"], {});\n        element(env, element2, context, \"action\", [\"openSettingsMenu\"], {});\n        inline(env, morph1, context, \"view\", [\"editor-save-button\"], {\"id\": \"entry-actions\", \"classNameBindings\": \"model.isNew:unsaved\"});\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('ghost/templates/-user-actions-menu', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createElement(\"li\");\n          var el2 = dom.createElement(\"button\");\n          var el3 = dom.createTextNode(\"Make Owner\");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, element = hooks.element;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element1 = dom.childAt(fragment, [0, 0]);\n          element(env, element1, context, \"action\", [\"openModal\", \"transfer-owner\", get(env, context, \"this\")], {});\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createElement(\"li\");\n          var el2 = dom.createElement(\"button\");\n          dom.setAttribute(el2,\"class\",\"delete\");\n          var el3 = dom.createTextNode(\"Delete User\");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, element = hooks.element;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element0 = dom.childAt(fragment, [0, 0]);\n          element(env, element0, context, \"action\", [\"openModal\", \"delete-user\", get(env, context, \"this\")], {});\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n        var morph1 = dom.createMorphAt(fragment,1,1,contextualElement);\n        dom.insertBoundary(fragment, null);\n        dom.insertBoundary(fragment, 0);\n        block(env, morph0, context, \"if\", [get(env, context, \"view.canMakeOwner\")], {}, child0, null);\n        block(env, morph1, context, \"if\", [get(env, context, \"view.deleteUserActionIsVisible\")], {}, child1, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('ghost/templates/about', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, content = hooks.content;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n          dom.insertBoundary(fragment, null);\n          dom.insertBoundary(fragment, 0);\n          content(env, morph0, context, \"model.mail\");\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"Native\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"section\");\n        dom.setAttribute(el1,\"class\",\"gh-view js-settings-content\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"section\");\n        dom.setAttribute(el2,\"class\",\"view-content\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"header\");\n        dom.setAttribute(el3,\"class\",\"gh-about-header\");\n        var el4 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"img\");\n        dom.setAttribute(el4,\"class\",\"gh-logo\");\n        dom.setAttribute(el4,\"alt\",\"Ghost\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createComment(\" TODO: fix about notifications \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createComment(\"\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"section\");\n        dom.setAttribute(el3,\"class\",\"gh-env-details\");\n        var el4 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"ul\");\n        dom.setAttribute(el4,\"class\",\"gh-env-list\");\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"li\");\n        dom.setAttribute(el5,\"class\",\"gh-env-list-version\");\n        var el6 = dom.createElement(\"strong\");\n        var el7 = dom.createTextNode(\"Version\");\n        dom.appendChild(el6, el7);\n        dom.appendChild(el5, el6);\n        var el6 = dom.createTextNode(\" \");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createComment(\"\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"li\");\n        var el6 = dom.createElement(\"strong\");\n        var el7 = dom.createTextNode(\"Environment\");\n        dom.appendChild(el6, el7);\n        dom.appendChild(el5, el6);\n        var el6 = dom.createTextNode(\" \");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createComment(\"\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"li\");\n        dom.setAttribute(el5,\"class\",\"gh-env-list-database-type\");\n        var el6 = dom.createElement(\"strong\");\n        var el7 = dom.createTextNode(\"Database\");\n        dom.appendChild(el6, el7);\n        dom.appendChild(el5, el6);\n        var el6 = dom.createTextNode(\" \");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createComment(\"\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"li\");\n        var el6 = dom.createElement(\"strong\");\n        var el7 = dom.createTextNode(\"Mail\");\n        dom.appendChild(el6, el7);\n        dom.appendChild(el5, el6);\n        var el6 = dom.createTextNode(\" \");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createComment(\"\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"div\");\n        dom.setAttribute(el4,\"class\",\"gh-env-help\");\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"a\");\n        dom.setAttribute(el5,\"href\",\"http://support.ghost.org\");\n        dom.setAttribute(el5,\"class\",\"btn btn-minor\");\n        dom.setAttribute(el5,\"target\",\"_blank\");\n        var el6 = dom.createTextNode(\"User Documentation\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"a\");\n        dom.setAttribute(el5,\"href\",\"https://ghost.org/slack/\");\n        dom.setAttribute(el5,\"class\",\"btn btn-minor\");\n        dom.setAttribute(el5,\"target\",\"_blank\");\n        var el6 = dom.createTextNode(\"Get Help With Ghost\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"section\");\n        dom.setAttribute(el3,\"class\",\"gh-credits\");\n        var el4 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"h2\");\n        var el5 = dom.createTextNode(\"The People Who Made it Possible\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"section\");\n        dom.setAttribute(el4,\"class\",\"gh-contributors\");\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createComment(\"\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"p\");\n        var el5 = dom.createTextNode(\"Ghost is built by an incredible group of contributors from all over the world. Here are just a few of the people who helped create the version you’re using right now.\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"a\");\n        dom.setAttribute(el4,\"href\",\"https://ghost.org/about/contribute/\");\n        dom.setAttribute(el4,\"class\",\"btn btn-blue btn-lg\");\n        var el5 = dom.createTextNode(\"Find out how you can get involved\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\\n        \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"footer\");\n        dom.setAttribute(el3,\"class\",\"gh-copyright-info\");\n        var el4 = dom.createTextNode(\"\\n            Copyright 2013 - 2015 Ghost Foundation, released under the \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"a\");\n        dom.setAttribute(el4,\"href\",\"https://github.com/TryGhost/Ghost/blob/master/LICENSE\");\n        var el5 = dom.createTextNode(\"MIT license\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\".\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"br\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"a\");\n        dom.setAttribute(el4,\"href\",\"https://ghost.org/\");\n        var el5 = dom.createTextNode(\"Ghost\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\" is a trademark of the \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"a\");\n        dom.setAttribute(el4,\"href\",\"https://ghost.org/about/\");\n        var el5 = dom.createTextNode(\"Ghost Foundation\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\".\\n        \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, subexpr = hooks.subexpr, concat = hooks.concat, attribute = hooks.attribute, inline = hooks.inline, content = hooks.content, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element0 = dom.childAt(fragment, [0, 1]);\n        var element1 = dom.childAt(element0, [1]);\n        var element2 = dom.childAt(element1, [1]);\n        var element3 = dom.childAt(element0, [3, 1]);\n        var attrMorph0 = dom.createAttrMorph(element2, 'src');\n        var morph0 = dom.createMorphAt(element1,5,5);\n        var morph1 = dom.createMorphAt(dom.childAt(element3, [1]),2,2);\n        var morph2 = dom.createMorphAt(dom.childAt(element3, [3]),2,2);\n        var morph3 = dom.createMorphAt(dom.childAt(element3, [5]),2,2);\n        var morph4 = dom.createMorphAt(dom.childAt(element3, [7]),2,2);\n        var morph5 = dom.createMorphAt(dom.childAt(element0, [5, 3]),1,1);\n        attribute(env, attrMorph0, element2, \"src\", concat(env, [subexpr(env, context, \"gh-path\", [\"admin\", \"/img/ghost-logo.png\"], {})]));\n        inline(env, morph0, context, \"gh-notifications\", [], {\"location\": \"about-upgrade\", \"notify\": \"updateNotificationChange\"});\n        content(env, morph1, context, \"model.version\");\n        content(env, morph2, context, \"model.environment\");\n        content(env, morph3, context, \"model.database\");\n        block(env, morph4, context, \"if\", [get(env, context, \"model.mail\")], {}, child0, child1);\n        inline(env, morph5, context, \"partial\", [\"contributors\"], {});\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('ghost/templates/application', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"        \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n          inline(env, morph0, context, \"gh-nav-menu\", [], {\"open\": get(env, context, \"autoNavOpen\"), \"onMouseEnter\": \"openAutoNav\", \"toggleAutoNav\": \"toggleAutoNav\", \"closeMobileMenu\": \"closeMobileMenu\", \"openModal\": \"openModal\"});\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"        \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, content = hooks.content;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n          content(env, morph0, context, \"outlet\");\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"a\");\n        dom.setAttribute(el1,\"class\",\"sr-only sr-only-focusable\");\n        dom.setAttribute(el1,\"href\",\"#gh-main\");\n        var el2 = dom.createTextNode(\"Skip to main content\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        var el2 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, inline = hooks.inline, get = hooks.get, subexpr = hooks.subexpr, concat = hooks.concat, attribute = hooks.attribute, block = hooks.block, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element0 = dom.childAt(fragment, [4]);\n        var morph0 = dom.createMorphAt(fragment,2,2,contextualElement);\n        var morph1 = dom.createMorphAt(element0,1,1);\n        var morph2 = dom.createMorphAt(element0,3,3);\n        var morph3 = dom.createMorphAt(element0,5,5);\n        var morph4 = dom.createMorphAt(element0,7,7);\n        var morph5 = dom.createMorphAt(element0,9,9);\n        var morph6 = dom.createMorphAt(element0,11,11);\n        var attrMorph0 = dom.createAttrMorph(element0, 'class');\n        inline(env, morph0, context, \"gh-alerts\", [], {\"notify\": \"topNotificationChange\"});\n        attribute(env, attrMorph0, element0, \"class\", concat(env, [\"gh-viewport \", subexpr(env, context, \"if\", [get(env, context, \"autoNav\"), \"gh-autonav\"], {}), \" \", subexpr(env, context, \"if\", [get(env, context, \"showSettingsMenu\"), \"settings-menu-expanded\"], {}), \" \", subexpr(env, context, \"if\", [get(env, context, \"showMobileMenu\"), \"mobile-menu-expanded\"], {})]));\n        block(env, morph1, context, \"unless\", [get(env, context, \"signedOut\")], {}, child0, null);\n        block(env, morph2, context, \"gh-main\", [], {\"onMouseEnter\": \"closeAutoNav\", \"data-notification-count\": get(env, context, \"topNotificationCount\")}, child1, null);\n        content(env, morph3, context, \"gh-notifications\");\n        inline(env, morph4, context, \"gh-content-cover\", [], {\"onClick\": \"closeMenus\", \"onMouseEnter\": \"closeAutoNav\"});\n        inline(env, morph5, context, \"outlet\", [\"modal\"], {});\n        inline(env, morph6, context, \"outlet\", [\"settings-menu\"], {});\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('ghost/templates/components/gh-activating-list-item', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, content = hooks.content;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n          var morph1 = dom.createMorphAt(fragment,1,1,contextualElement);\n          dom.insertBoundary(fragment, null);\n          dom.insertBoundary(fragment, 0);\n          content(env, morph0, context, \"title\");\n          content(env, morph1, context, \"yield\");\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n        dom.insertBoundary(fragment, 0);\n        block(env, morph0, context, \"link-to\", [get(env, context, \"route\")], {\"alternateActive\": get(env, context, \"active\"), \"classNameBindings\": \"linkClasses\"}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('ghost/templates/components/gh-alert', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"gh-alert-content\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"button\");\n        dom.setAttribute(el1,\"class\",\"gh-alert-close icon-x\");\n        var el2 = dom.createElement(\"span\");\n        dom.setAttribute(el2,\"class\",\"hidden\");\n        var el3 = dom.createTextNode(\"Close\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content, element = hooks.element;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element0 = dom.childAt(fragment, [2]);\n        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0]),1,1);\n        content(env, morph0, context, \"message.message\");\n        element(env, element0, context, \"action\", [\"closeNotification\"], {});\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('ghost/templates/components/gh-alerts', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 1,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement, blockArguments) {\n          var dom = env.dom;\n          var hooks = env.hooks, set = hooks.set, get = hooks.get, inline = hooks.inline;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n          set(env, context, \"message\", blockArguments[0]);\n          inline(env, morph0, context, \"gh-alert\", [], {\"message\": get(env, context, \"message\")});\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n        dom.insertBoundary(fragment, null);\n        dom.insertBoundary(fragment, 0);\n        block(env, morph0, context, \"each\", [get(env, context, \"messages\")], {}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('ghost/templates/components/gh-blog-url', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createUnsafeMorphAt(fragment,0,0,contextualElement);\n        dom.insertBoundary(fragment, null);\n        dom.insertBoundary(fragment, 0);\n        content(env, morph0, context, \"config.blogUrl\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('ghost/templates/components/gh-ed-preview', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n        dom.insertBoundary(fragment, 0);\n        inline(env, morph0, context, \"gh-format-markdown\", [get(env, context, \"markdown\")], {});\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('ghost/templates/components/gh-file-upload', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"input\");\n        dom.setAttribute(el1,\"data-url\",\"upload\");\n        dom.setAttribute(el1,\"class\",\"gh-input btn btn-green\");\n        dom.setAttribute(el1,\"type\",\"file\");\n        dom.setAttribute(el1,\"name\",\"importfile\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"button\");\n        dom.setAttribute(el1,\"type\",\"submit\");\n        dom.setAttribute(el1,\"class\",\"btn btn-blue\");\n        dom.setAttribute(el1,\"id\",\"startupload\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, concat = hooks.concat, attribute = hooks.attribute, element = hooks.element, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element0 = dom.childAt(fragment, [0]);\n        var element1 = dom.childAt(fragment, [2]);\n        var attrMorph0 = dom.createAttrMorph(element0, 'accept');\n        var morph0 = dom.createMorphAt(element1,1,1);\n        var attrMorph1 = dom.createAttrMorph(element1, 'disabled');\n        attribute(env, attrMorph0, element0, \"accept\", concat(env, [get(env, context, \"options.acceptEncoding\")]));\n        attribute(env, attrMorph1, element1, \"disabled\", get(env, context, \"uploadButtonDisabled\"));\n        element(env, element1, context, \"action\", [\"upload\"], {});\n        content(env, morph0, context, \"uploadButtonText\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('ghost/templates/components/gh-menu-toggle', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"i\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, concat = hooks.concat, attribute = hooks.attribute;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element0 = dom.childAt(fragment, [0]);\n        var attrMorph0 = dom.createAttrMorph(element0, 'class');\n        attribute(env, attrMorph0, element0, \"class\", concat(env, [get(env, context, \"iconClass\")]));\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('ghost/templates/components/gh-modal-dialog', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createElement(\"header\");\n          dom.setAttribute(el1,\"class\",\"modal-header\");\n          var el2 = dom.createElement(\"h1\");\n          var el3 = dom.createComment(\"\");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, content = hooks.content;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(dom.childAt(fragment, [0, 0]),0,0);\n          content(env, morph0, context, \"title\");\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createElement(\"a\");\n          dom.setAttribute(el1,\"class\",\"close icon-x\");\n          dom.setAttribute(el1,\"href\",\"\");\n          dom.setAttribute(el1,\"title\",\"Close\");\n          var el2 = dom.createElement(\"span\");\n          dom.setAttribute(el2,\"class\",\"hidden\");\n          var el3 = dom.createTextNode(\"Close\");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, element = hooks.element;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element3 = dom.childAt(fragment, [0]);\n          element(env, element3, context, \"action\", [\"closeModal\"], {});\n          return fragment;\n        }\n      };\n    }());\n    var child2 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"            \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"footer\");\n          dom.setAttribute(el1,\"class\",\"modal-footer\");\n          var el2 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"button\");\n          dom.setAttribute(el2,\"type\",\"button\");\n          var el3 = dom.createTextNode(\"\\n                    \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createComment(\"\");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createComment(\"\\n                Required to strip the white-space between buttons\\n                \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"button\");\n          dom.setAttribute(el2,\"type\",\"button\");\n          var el3 = dom.createTextNode(\"\\n                    \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createComment(\"\");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, concat = hooks.concat, attribute = hooks.attribute, element = hooks.element, content = hooks.content;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element0 = dom.childAt(fragment, [1]);\n          var element1 = dom.childAt(element0, [1]);\n          var element2 = dom.childAt(element0, [3]);\n          var morph0 = dom.createMorphAt(element1,1,1);\n          var attrMorph0 = dom.createAttrMorph(element1, 'class');\n          var morph1 = dom.createMorphAt(element2,1,1);\n          var attrMorph1 = dom.createAttrMorph(element2, 'class');\n          attribute(env, attrMorph0, element1, \"class\", concat(env, [get(env, context, \"rejectButtonClass\"), \" btn-minor js-button-reject\"]));\n          element(env, element1, context, \"action\", [\"confirm\", \"reject\"], {});\n          content(env, morph0, context, \"confirm.reject.text\");\n          attribute(env, attrMorph1, element2, \"class\", concat(env, [get(env, context, \"acceptButtonClass\"), \" js-button-accept\"]));\n          element(env, element2, context, \"action\", [\"confirm\", \"accept\"], {});\n          content(env, morph1, context, \"confirm.accept.text\");\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"modal-container js-modal-container\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"article\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"section\");\n        dom.setAttribute(el3,\"class\",\"modal-content\");\n        var el4 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createComment(\"\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createComment(\"\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"section\");\n        dom.setAttribute(el4,\"class\",\"modal-body\");\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createComment(\"\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createComment(\"\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"        \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"modal-background js-modal-background\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, element = hooks.element, get = hooks.get, concat = hooks.concat, attribute = hooks.attribute, block = hooks.block, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element4 = dom.childAt(fragment, [0]);\n        var element5 = dom.childAt(element4, [1]);\n        var element6 = dom.childAt(element5, [1]);\n        var attrMorph0 = dom.createAttrMorph(element5, 'class');\n        var morph0 = dom.createMorphAt(element6,1,1);\n        var morph1 = dom.createMorphAt(element6,3,3);\n        var morph2 = dom.createMorphAt(dom.childAt(element6, [5]),1,1);\n        var morph3 = dom.createMorphAt(element6,7,7);\n        element(env, element4, context, \"action\", [\"closeModal\"], {});\n        attribute(env, attrMorph0, element5, \"class\", concat(env, [get(env, context, \"klass\"), \" js-modal\"]));\n        element(env, element6, context, \"action\", [\"noBubble\"], {\"bubbles\": false, \"preventDefault\": false});\n        block(env, morph0, context, \"if\", [get(env, context, \"title\")], {}, child0, null);\n        block(env, morph1, context, \"if\", [get(env, context, \"showClose\")], {}, child1, null);\n        content(env, morph2, context, \"yield\");\n        block(env, morph3, context, \"if\", [get(env, context, \"confirm\")], {}, child2, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('ghost/templates/components/gh-nav-menu', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"class\",\"gh-nav-menu-icon\");\n          dom.setAttribute(el1,\"style\",\"background-image: url(https://s3.amazonaws.com/f.cl.ly/items/3I0g431b2b3q00253K1V/d16dc430c9c4f5c09d6ca09be3e5c72fdb21c1ac.png)\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"class\",\"gh-nav-menu-details\");\n          var el2 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"div\");\n          dom.setAttribute(el2,\"class\",\"gh-nav-menu-details-blog\");\n          var el3 = dom.createComment(\"\");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"div\");\n          dom.setAttribute(el2,\"class\",\"gh-nav-menu-details-user\");\n          var el3 = dom.createComment(\"\");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"i\");\n          dom.setAttribute(el1,\"class\",\"icon-arrow\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, content = hooks.content;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element3 = dom.childAt(fragment, [3]);\n          var morph0 = dom.createMorphAt(dom.childAt(element3, [1]),0,0);\n          var morph1 = dom.createMorphAt(dom.childAt(element3, [3]),0,0);\n          content(env, morph0, context, \"config.blogTitle\");\n          content(env, morph1, context, \"session.user.name\");\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.12.1\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createElement(\"i\");\n            dom.setAttribute(el1,\"class\",\"icon-shop\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\" About Ghost\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            return fragment;\n          }\n        };\n      }());\n      var child1 = (function() {\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.12.1\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createElement(\"i\");\n            dom.setAttribute(el1,\"class\",\"icon-user\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\" Your Profile\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            return fragment;\n          }\n        };\n      }());\n      var child2 = (function() {\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.12.1\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createElement(\"i\");\n            dom.setAttribute(el1,\"class\",\"icon-signout\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\" Sign Out\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"ul\");\n          dom.setAttribute(el1,\"class\",\"dropdown-menu dropdown-triangle-top js-user-menu-dropdown-menu\");\n          dom.setAttribute(el1,\"role\",\"menu\");\n          dom.setAttribute(el1,\"style\",\"right:-50%;left:auto;margin-right:40px\");\n          var el2 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"li\");\n          dom.setAttribute(el2,\"role\",\"presentation\");\n          var el3 = dom.createComment(\"\");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"li\");\n          dom.setAttribute(el2,\"class\",\"divider\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"li\");\n          dom.setAttribute(el2,\"role\",\"presentation\");\n          var el3 = dom.createComment(\"\");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"li\");\n          dom.setAttribute(el2,\"role\",\"presentation\");\n          var el3 = dom.createComment(\"\");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, block = hooks.block, get = hooks.get;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element2 = dom.childAt(fragment, [1]);\n          var morph0 = dom.createMorphAt(dom.childAt(element2, [1]),0,0);\n          var morph1 = dom.createMorphAt(dom.childAt(element2, [5]),0,0);\n          var morph2 = dom.createMorphAt(dom.childAt(element2, [7]),0,0);\n          block(env, morph0, context, \"link-to\", [\"about\"], {\"classNames\": \"gh-nav-menu-about dropdown-item js-nav-item\", \"role\": \"menuitem\", \"tabindex\": \"-1\"}, child0, null);\n          block(env, morph1, context, \"link-to\", [\"team.user\", get(env, context, \"session.user.slug\")], {\"classNames\": \"dropdown-item user-menu-profile js-nav-item\", \"role\": \"menuitem\", \"tabindex\": \"-1\"}, child1, null);\n          block(env, morph2, context, \"link-to\", [\"signout\"], {\"classNames\": \"dropdown-item user-menu-signout\", \"role\": \"menuitem\", \"tabindex\": \"-1\"}, child2, null);\n          return fragment;\n        }\n      };\n    }());\n    var child2 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createElement(\"i\");\n          dom.setAttribute(el1,\"class\",\"icon-pen\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"New Post\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    var child3 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createElement(\"i\");\n          dom.setAttribute(el1,\"class\",\"icon-content\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"Content\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    var child4 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createElement(\"i\");\n          dom.setAttribute(el1,\"class\",\"icon-team\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"Team\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    var child5 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.12.1\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createElement(\"i\");\n            dom.setAttribute(el1,\"class\",\"icon-settings\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"General\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            return fragment;\n          }\n        };\n      }());\n      var child1 = (function() {\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.12.1\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createElement(\"i\");\n            dom.setAttribute(el1,\"class\",\"icon-compass\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"Navigation\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            return fragment;\n          }\n        };\n      }());\n      var child2 = (function() {\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.12.1\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createElement(\"i\");\n            dom.setAttribute(el1,\"class\",\"icon-tag\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"Tags\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            return fragment;\n          }\n        };\n      }());\n      var child3 = (function() {\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.12.1\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createElement(\"i\");\n            dom.setAttribute(el1,\"class\",\"icon-code\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"Code Injection\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            return fragment;\n          }\n        };\n      }());\n      var child4 = (function() {\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.12.1\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createElement(\"i\");\n            dom.setAttribute(el1,\"class\",\"icon-apps\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"Labs\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"        \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"ul\");\n          dom.setAttribute(el1,\"class\",\"gh-nav-list gh-nav-settings\");\n          var el2 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"li\");\n          dom.setAttribute(el2,\"class\",\"gh-nav-list-h\");\n          var el3 = dom.createTextNode(\"Settings\");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"li\");\n          var el3 = dom.createComment(\"\");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"li\");\n          var el3 = dom.createComment(\"\");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"li\");\n          var el3 = dom.createComment(\"\");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"li\");\n          var el3 = dom.createComment(\"\");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"li\");\n          var el3 = dom.createComment(\"\");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element1 = dom.childAt(fragment, [1]);\n          var morph0 = dom.createMorphAt(dom.childAt(element1, [3]),0,0);\n          var morph1 = dom.createMorphAt(dom.childAt(element1, [5]),0,0);\n          var morph2 = dom.createMorphAt(dom.childAt(element1, [7]),0,0);\n          var morph3 = dom.createMorphAt(dom.childAt(element1, [9]),0,0);\n          var morph4 = dom.createMorphAt(dom.childAt(element1, [11]),0,0);\n          block(env, morph0, context, \"link-to\", [\"settings.general\"], {\"classNames\": \"gh-nav-settings-general\"}, child0, null);\n          block(env, morph1, context, \"link-to\", [\"settings.navigation\"], {\"classNames\": \"gh-nav-settings-navigation\"}, child1, null);\n          block(env, morph2, context, \"link-to\", [\"settings.tags\"], {\"classNames\": \"gh-nav-settings-tags\"}, child2, null);\n          block(env, morph3, context, \"link-to\", [\"settings.code-injection\"], {\"classNames\": \"gh-nav-settings-code-injection\"}, child3, null);\n          block(env, morph4, context, \"link-to\", [\"settings.labs\"], {\"classNames\": \"gh-nav-settings-labs\"}, child4, null);\n          return fragment;\n        }\n      };\n    }());\n    var child6 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"            \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"class\",\"gh-help-button\");\n          var el2 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"i\");\n          dom.setAttribute(el2,\"class\",\"icon-question\");\n          var el3 = dom.createElement(\"span\");\n          dom.setAttribute(el3,\"class\",\"hidden\");\n          var el4 = dom.createTextNode(\"Help\");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    var child7 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"            \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"ul\");\n          dom.setAttribute(el1,\"class\",\"dropdown-menu dropdown-triangle-bottom\");\n          dom.setAttribute(el1,\"role\",\"menu\");\n          var el2 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"li\");\n          dom.setAttribute(el2,\"role\",\"presentation\");\n          var el3 = dom.createElement(\"a\");\n          dom.setAttribute(el3,\"class\",\"dropdown-item help-menu-support\");\n          dom.setAttribute(el3,\"role\",\"menuitem\");\n          dom.setAttribute(el3,\"tabindex\",\"-1\");\n          dom.setAttribute(el3,\"href\",\"http://support.ghost.org/\");\n          dom.setAttribute(el3,\"target\",\"_blank\");\n          var el4 = dom.createElement(\"i\");\n          dom.setAttribute(el4,\"class\",\"icon-ambulance\");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createTextNode(\" Support Center\");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"li\");\n          dom.setAttribute(el2,\"role\",\"presentation\");\n          var el3 = dom.createElement(\"a\");\n          dom.setAttribute(el3,\"class\",\"dropdown-item help-menu-tweet\");\n          dom.setAttribute(el3,\"role\",\"menuitem\");\n          dom.setAttribute(el3,\"tabindex\",\"-1\");\n          dom.setAttribute(el3,\"href\",\"https://twitter.com/intent/tweet?text=%40TryGhost+Hi%21+Can+you+help+me+with+&related=TryGhost\");\n          dom.setAttribute(el3,\"target\",\"_blank\");\n          dom.setAttribute(el3,\"onclick\",\"window.open(this.href, 'twitter-share', 'width=550,height=235');return false;\");\n          var el4 = dom.createElement(\"i\");\n          dom.setAttribute(el4,\"class\",\"icon-twitter\");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createTextNode(\" Tweet @TryGhost!\");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"li\");\n          dom.setAttribute(el2,\"class\",\"divider\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"li\");\n          dom.setAttribute(el2,\"role\",\"presentation\");\n          var el3 = dom.createElement(\"a\");\n          dom.setAttribute(el3,\"class\",\"dropdown-item help-menu-how-to\");\n          dom.setAttribute(el3,\"role\",\"menuitem\");\n          dom.setAttribute(el3,\"tabindex\",\"-1\");\n          dom.setAttribute(el3,\"href\",\"http://support.ghost.org/how-to-use-ghost/\");\n          dom.setAttribute(el3,\"target\",\"_blank\");\n          var el4 = dom.createElement(\"i\");\n          dom.setAttribute(el4,\"class\",\"icon-book\");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createTextNode(\" How to Use Ghost\");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"li\");\n          dom.setAttribute(el2,\"role\",\"presentation\");\n          var el3 = dom.createElement(\"a\");\n          dom.setAttribute(el3,\"class\",\"dropdown-item help-menu-markdown\");\n          dom.setAttribute(el3,\"role\",\"menuitem\");\n          dom.setAttribute(el3,\"tabindex\",\"-1\");\n          dom.setAttribute(el3,\"href\",\"\");\n          var el4 = dom.createElement(\"i\");\n          dom.setAttribute(el4,\"class\",\"icon-markdown\");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createTextNode(\" Markdown Help\");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"li\");\n          dom.setAttribute(el2,\"class\",\"divider\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"li\");\n          dom.setAttribute(el2,\"role\",\"presentation\");\n          var el3 = dom.createElement(\"a\");\n          dom.setAttribute(el3,\"class\",\"dropdown-item help-menu-wishlist\");\n          dom.setAttribute(el3,\"role\",\"menuitem\");\n          dom.setAttribute(el3,\"tabindex\",\"-1\");\n          dom.setAttribute(el3,\"href\",\"http://ideas.ghost.org/\");\n          dom.setAttribute(el3,\"target\",\"_blank\");\n          var el4 = dom.createElement(\"i\");\n          dom.setAttribute(el4,\"class\",\"icon-idea\");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createTextNode(\" Wishlist\");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, element = hooks.element;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element0 = dom.childAt(fragment, [1, 9, 0]);\n          element(env, element0, context, \"action\", [\"openModal\", \"markdown\"], {});\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"section\");\n        dom.setAttribute(el1,\"class\",\"gh-nav-body\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"section\");\n        dom.setAttribute(el2,\"class\",\"gh-nav-search\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"input\");\n        dom.setAttribute(el3,\"class\",\"gh-nav-search-input gh-input\");\n        dom.setAttribute(el3,\"type\",\"text\");\n        dom.setAttribute(el3,\"placeholder\",\"Search\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"button\");\n        dom.setAttribute(el3,\"class\",\"gh-nav-search-button\");\n        var el4 = dom.createElement(\"i\");\n        dom.setAttribute(el4,\"class\",\"icon-search\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"span\");\n        dom.setAttribute(el4,\"class\",\"sr-only\");\n        var el5 = dom.createTextNode(\"Search\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"ul\");\n        dom.setAttribute(el2,\"class\",\"gh-nav-list gh-nav-main\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"li\");\n        var el4 = dom.createComment(\"\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"li\");\n        var el4 = dom.createComment(\"\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"li\");\n        var el4 = dom.createComment(\"\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"footer\");\n        dom.setAttribute(el1,\"class\",\"gh-nav-footer\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"a\");\n        dom.setAttribute(el2,\"class\",\"gh-nav-footer-sitelink\");\n        dom.setAttribute(el2,\"target\",\"_blank\");\n        var el3 = dom.createTextNode(\"View blog\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"gh-help-menu\");\n        var el3 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createComment(\"\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createComment(\"\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, block = hooks.block, get = hooks.get, subexpr = hooks.subexpr, inline = hooks.inline, concat = hooks.concat, attribute = hooks.attribute;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element4 = dom.childAt(fragment, [2]);\n        var element5 = dom.childAt(element4, [3]);\n        var element6 = dom.childAt(fragment, [4]);\n        var element7 = dom.childAt(element6, [3]);\n        var element8 = dom.childAt(element6, [5]);\n        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n        var morph1 = dom.createMorphAt(fragment,1,1,contextualElement);\n        var morph2 = dom.createMorphAt(dom.childAt(element5, [1]),0,0);\n        var morph3 = dom.createMorphAt(dom.childAt(element5, [3]),0,0);\n        var morph4 = dom.createMorphAt(dom.childAt(element5, [5]),0,0);\n        var morph5 = dom.createMorphAt(element4,5,5);\n        var morph6 = dom.createMorphAt(element6,1,1);\n        var attrMorph0 = dom.createAttrMorph(element7, 'href');\n        var morph7 = dom.createMorphAt(element8,1,1);\n        var morph8 = dom.createMorphAt(element8,2,2);\n        dom.insertBoundary(fragment, 0);\n        block(env, morph0, context, \"gh-dropdown-button\", [], {\"tagName\": \"header\", \"class\": \"gh-nav-menu\", \"dropdownName\": \"user-menu\"}, child0, null);\n        block(env, morph1, context, \"gh-dropdown\", [], {\"tagName\": \"div\", \"classNames\": \"dropdown\", \"name\": \"user-menu\", \"closeOnClick\": \"true\"}, child1, null);\n        block(env, morph2, context, \"link-to\", [\"editor.new\"], {\"classNames\": \"gh-nav-main-editor\"}, child2, null);\n        block(env, morph3, context, \"link-to\", [\"posts\"], {\"classNames\": \"gh-nav-main-content\"}, child3, null);\n        block(env, morph4, context, \"link-to\", [\"team\"], {\"classNames\": \"gh-nav-main-users\"}, child4, null);\n        block(env, morph5, context, \"if\", [subexpr(env, context, \"gh-user-can\", [get(env, context, \"session.user\"), \"admin\"], {})], {}, child5, null);\n        inline(env, morph6, context, \"gh-menu-toggle\", [], {\"desktopAction\": \"toggleAutoNav\", \"mobileAction\": \"closeMobileMenu\"});\n        attribute(env, attrMorph0, element7, \"href\", concat(env, [get(env, context, \"config.blogUrl\"), \"/\"]));\n        block(env, morph7, context, \"gh-dropdown-button\", [], {\"dropdownName\": \"help-menu\", \"tagName\": \"div\"}, child6, null);\n        block(env, morph8, context, \"gh-dropdown\", [], {\"tagName\": \"div\", \"classNames\": \"dropdown\", \"name\": \"help-menu\", \"closeOnClick\": \"true\"}, child7, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('ghost/templates/components/gh-navitem', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createElement(\"span\");\n          dom.setAttribute(el1,\"class\",\"gh-blognav-grab icon-grab\");\n          var el2 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"span\");\n          dom.setAttribute(el2,\"class\",\"sr-only\");\n          var el3 = dom.createTextNode(\"Reorder\");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"button\");\n          dom.setAttribute(el1,\"type\",\"button\");\n          dom.setAttribute(el1,\"class\",\"gh-blognav-add\");\n          var el2 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"i\");\n          dom.setAttribute(el2,\"class\",\"icon-add2\");\n          var el3 = dom.createElement(\"span\");\n          dom.setAttribute(el3,\"class\",\"sr-only\");\n          var el4 = dom.createTextNode(\"Add\");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, element = hooks.element;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element1 = dom.childAt(fragment, [1]);\n          element(env, element1, context, \"action\", [\"addItem\"], {});\n          return fragment;\n        }\n      };\n    }());\n    var child2 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"button\");\n          dom.setAttribute(el1,\"type\",\"button\");\n          dom.setAttribute(el1,\"class\",\"gh-blognav-delete\");\n          var el2 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"i\");\n          dom.setAttribute(el2,\"class\",\"icon-trash\");\n          var el3 = dom.createElement(\"span\");\n          dom.setAttribute(el3,\"class\",\"sr-only\");\n          var el4 = dom.createTextNode(\"Delete\");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, element = hooks.element;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element0 = dom.childAt(fragment, [1]);\n          element(env, element0, context, \"action\", [\"deleteItem\", get(env, context, \"navItem\")], {});\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"gh-blognav-line\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"span\");\n        dom.setAttribute(el2,\"class\",\"gh-blognav-label\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createComment(\"\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"span\");\n        dom.setAttribute(el2,\"class\",\"gh-blognav-url\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createComment(\"\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block, inline = hooks.inline;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element2 = dom.childAt(fragment, [2]);\n        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n        var morph1 = dom.createMorphAt(dom.childAt(element2, [1]),1,1);\n        var morph2 = dom.createMorphAt(dom.childAt(element2, [3]),1,1);\n        var morph3 = dom.createMorphAt(fragment,4,4,contextualElement);\n        dom.insertBoundary(fragment, null);\n        dom.insertBoundary(fragment, 0);\n        block(env, morph0, context, \"unless\", [get(env, context, \"navItem.last\")], {}, child0, null);\n        inline(env, morph1, context, \"gh-trim-focus-input\", [], {\"class\": \"gh-input\", \"focus\": get(env, context, \"navItem.last\"), \"placeholder\": \"Label\", \"value\": get(env, context, \"navItem.label\")});\n        inline(env, morph2, context, \"gh-navitem-url-input\", [], {\"class\": \"gh-input\", \"baseUrl\": get(env, context, \"baseUrl\"), \"url\": get(env, context, \"navItem.url\"), \"last\": get(env, context, \"navItem.last\"), \"change\": \"updateUrl\"});\n        block(env, morph3, context, \"if\", [get(env, context, \"navItem.last\")], {}, child1, child2);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('ghost/templates/components/gh-notification', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"gh-notification-content\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"button\");\n        dom.setAttribute(el1,\"class\",\"gh-notification-close icon-x\");\n        var el2 = dom.createElement(\"span\");\n        dom.setAttribute(el2,\"class\",\"hidden\");\n        var el3 = dom.createTextNode(\"Close\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content, element = hooks.element;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element0 = dom.childAt(fragment, [2]);\n        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0]),1,1);\n        content(env, morph0, context, \"message.message\");\n        element(env, element0, context, \"action\", [\"closeNotification\"], {});\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('ghost/templates/components/gh-notifications', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 1,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement, blockArguments) {\n          var dom = env.dom;\n          var hooks = env.hooks, set = hooks.set, get = hooks.get, inline = hooks.inline;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n          set(env, context, \"message\", blockArguments[0]);\n          inline(env, morph0, context, \"gh-notification\", [], {\"message\": get(env, context, \"message\")});\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n        dom.insertBoundary(fragment, null);\n        dom.insertBoundary(fragment, 0);\n        block(env, morph0, context, \"each\", [get(env, context, \"messages\")], {}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('ghost/templates/components/gh-role-selector', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 1,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createElement(\"option\");\n          var el2 = dom.createComment(\"\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement, blockArguments) {\n          var dom = env.dom;\n          var hooks = env.hooks, set = hooks.set, get = hooks.get, attribute = hooks.attribute, content = hooks.content;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element0 = dom.childAt(fragment, [0]);\n          var morph0 = dom.createMorphAt(element0,0,0);\n          var attrMorph0 = dom.createAttrMorph(element0, 'value');\n          set(env, context, \"role\", blockArguments[0]);\n          attribute(env, attrMorph0, element0, \"value\", get(env, context, \"role.id\"));\n          content(env, morph0, context, \"role.name\");\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"select\");\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, concat = hooks.concat, attribute = hooks.attribute, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element1 = dom.childAt(fragment, [0]);\n        var morph0 = dom.createMorphAt(element1,1,1);\n        var attrMorph0 = dom.createAttrMorph(element1, 'id');\n        var attrMorph1 = dom.createAttrMorph(element1, 'name');\n        attribute(env, attrMorph0, element1, \"id\", concat(env, [get(env, context, \"selectId\")]));\n        attribute(env, attrMorph1, element1, \"name\", concat(env, [get(env, context, \"selectName\")]));\n        block(env, morph0, context, \"each\", [get(env, context, \"roles\")], {}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('ghost/templates/components/gh-uploader', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"img\");\n        dom.setAttribute(el1,\"class\",\"js-upload-target\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"description\");\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"strong\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"input\");\n        dom.setAttribute(el1,\"data-url\",\"upload\");\n        dom.setAttribute(el1,\"class\",\"gh-input js-fileupload main fileupload\");\n        dom.setAttribute(el1,\"type\",\"file\");\n        dom.setAttribute(el1,\"name\",\"uploadimage\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, concat = hooks.concat, attribute = hooks.attribute, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element0 = dom.childAt(fragment, [0]);\n        var attrMorph0 = dom.createAttrMorph(element0, 'src');\n        var morph0 = dom.createMorphAt(dom.childAt(fragment, [2]),0,0);\n        attribute(env, attrMorph0, element0, \"src\", concat(env, [get(env, context, \"imageSource\")]));\n        content(env, morph0, context, \"description\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('ghost/templates/components/gh-url-preview', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n        dom.insertBoundary(fragment, 0);\n        content(env, morph0, context, \"url\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('ghost/templates/components/gh-view-title', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"button\");\n        dom.setAttribute(el1,\"class\",\"gh-mobilemenu-button\");\n        dom.setAttribute(el1,\"role\",\"presentation\");\n        var el2 = dom.createElement(\"i\");\n        dom.setAttribute(el2,\"class\",\"icon-gh\");\n        var el3 = dom.createElement(\"span\");\n        dom.setAttribute(el3,\"class\",\"sr-only\");\n        var el4 = dom.createTextNode(\"Menu\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\" \\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, element = hooks.element, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element0 = dom.childAt(fragment, [0]);\n        var morph0 = dom.createMorphAt(fragment,2,2,contextualElement);\n        element(env, element0, context, \"action\", [\"openMobileMenu\"], {});\n        content(env, morph0, context, \"yield\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('ghost/templates/editor-save-button', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"i\");\n          dom.setAttribute(el1,\"class\",\"options icon-arrow2\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"span\");\n          dom.setAttribute(el1,\"class\",\"sr-only\");\n          var el2 = dom.createTextNode(\"Toggle Settings Menu\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"ul\");\n          dom.setAttribute(el1,\"class\",\"dropdown-menu dropdown-triangle-bottom-right\");\n          var el2 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"li\");\n          var el3 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"a\");\n          dom.setAttribute(el3,\"href\",\"#\");\n          var el4 = dom.createComment(\"\");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"li\");\n          var el3 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"a\");\n          dom.setAttribute(el3,\"href\",\"#\");\n          var el4 = dom.createComment(\"\");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"li\");\n          dom.setAttribute(el2,\"class\",\"divider delete\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"li\");\n          dom.setAttribute(el2,\"class\",\"delete\");\n          var el3 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"a\");\n          dom.setAttribute(el3,\"href\",\"#\");\n          var el4 = dom.createComment(\"\");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, subexpr = hooks.subexpr, concat = hooks.concat, attribute = hooks.attribute, element = hooks.element, content = hooks.content;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element0 = dom.childAt(fragment, [1]);\n          var element1 = dom.childAt(element0, [1]);\n          var element2 = dom.childAt(element1, [1]);\n          var element3 = dom.childAt(element0, [3]);\n          var element4 = dom.childAt(element3, [1]);\n          var element5 = dom.childAt(element0, [7, 1]);\n          var attrMorph0 = dom.createAttrMorph(element1, 'class');\n          var morph0 = dom.createMorphAt(element2,0,0);\n          var attrMorph1 = dom.createAttrMorph(element3, 'class');\n          var morph1 = dom.createMorphAt(element4,0,0);\n          var morph2 = dom.createMorphAt(element5,0,0);\n          attribute(env, attrMorph0, element1, \"class\", concat(env, [\"post-save-publish \", subexpr(env, context, \"if\", [get(env, context, \"willPublish\"), \"active\"], {})]));\n          element(env, element2, context, \"action\", [\"setSaveType\", \"publish\"], {});\n          content(env, morph0, context, \"view.publishText\");\n          attribute(env, attrMorph1, element3, \"class\", concat(env, [\"post-save-draft \", subexpr(env, context, \"unless\", [get(env, context, \"willPublish\"), \"active\"], {})]));\n          element(env, element4, context, \"action\", [\"setSaveType\", \"draft\"], {});\n          content(env, morph1, context, \"view.draftText\");\n          element(env, element5, context, \"action\", [\"openModal\", \"delete-post\", get(env, context, \"this\")], {});\n          content(env, morph2, context, \"view.deleteText\");\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"button\");\n        dom.setAttribute(el1,\"type\",\"button\");\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, subexpr = hooks.subexpr, concat = hooks.concat, attribute = hooks.attribute, element = hooks.element, content = hooks.content, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element6 = dom.childAt(fragment, [0]);\n        var morph0 = dom.createMorphAt(element6,0,0);\n        var attrMorph0 = dom.createAttrMorph(element6, 'class');\n        var morph1 = dom.createMorphAt(fragment,2,2,contextualElement);\n        var morph2 = dom.createMorphAt(fragment,3,3,contextualElement);\n        dom.insertBoundary(fragment, null);\n        attribute(env, attrMorph0, element6, \"class\", concat(env, [\"btn btn-sm js-publish-button \", subexpr(env, context, \"if\", [get(env, context, \"view.isDangerous\"), \"btn-red\", \"btn-blue\"], {})]));\n        element(env, element6, context, \"action\", [\"save\"], {});\n        content(env, morph0, context, \"view.saveText\");\n        block(env, morph1, context, \"gh-dropdown-button\", [], {\"dropdownName\": \"post-save-menu\", \"classNameBindings\": \":btn :btn-sm view.isDangerous:btn-red:btn-blue btnopen:active :dropdown-toggle :up\"}, child0, null);\n        block(env, morph2, context, \"gh-dropdown\", [], {\"name\": \"post-save-menu\", \"closeOnClick\": \"true\", \"tagName\": \"div\", \"classNames\": \"dropdown editor-options\"}, child1, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('ghost/templates/editor/edit', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"        \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n          inline(env, morph0, context, \"gh-trim-focus-input\", [], {\"type\": \"text\", \"id\": \"entry-title\", \"class\": \"gh-input\", \"placeholder\": \"Your Post Title\", \"value\": get(env, context, \"model.titleScratch\"), \"tabindex\": \"1\", \"focus\": get(env, context, \"shouldFocusTitle\")});\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"header\");\n        dom.setAttribute(el1,\"class\",\"view-header\");\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"section\");\n        dom.setAttribute(el2,\"class\",\"view-actions\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"button\");\n        dom.setAttribute(el3,\"type\",\"button\");\n        dom.setAttribute(el3,\"class\",\"post-settings\");\n        var el4 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"i\");\n        dom.setAttribute(el4,\"class\",\"icon-settings\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createComment(\"\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"section\");\n        dom.setAttribute(el1,\"class\",\"view-container view-editor\");\n        var el2 = dom.createTextNode(\"\\n\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"section\");\n        dom.setAttribute(el2,\"class\",\"entry-markdown js-entry-markdown\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"header\");\n        dom.setAttribute(el3,\"class\",\"floatingheader\");\n        var el4 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"span\");\n        var el5 = dom.createTextNode(\"Markdown\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"a\");\n        dom.setAttribute(el4,\"class\",\"markdown-help\");\n        dom.setAttribute(el4,\"href\",\"\");\n        var el5 = dom.createElement(\"i\");\n        dom.setAttribute(el5,\"class\",\"icon-markdown\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"section\");\n        dom.setAttribute(el3,\"id\",\"entry-markdown-content\");\n        dom.setAttribute(el3,\"class\",\"entry-markdown-content\");\n        var el4 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createComment(\"\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"section\");\n        dom.setAttribute(el2,\"class\",\"entry-preview js-entry-preview\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"header\");\n        dom.setAttribute(el3,\"class\",\"floatingheader\");\n        var el4 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"span\");\n        var el5 = dom.createTextNode(\"Preview\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"span\");\n        dom.setAttribute(el4,\"class\",\"entry-word-count js-entry-word-count\");\n        var el5 = dom.createComment(\"\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"section\");\n        dom.setAttribute(el3,\"class\",\"entry-preview-content js-entry-preview-content\");\n        var el4 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createComment(\"\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, block = hooks.block, element = hooks.element, inline = hooks.inline, get = hooks.get;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element0 = dom.childAt(fragment, [0]);\n        var element1 = dom.childAt(element0, [3]);\n        var element2 = dom.childAt(element1, [1]);\n        var element3 = dom.childAt(fragment, [2]);\n        var element4 = dom.childAt(element3, [1]);\n        var element5 = dom.childAt(element4, [1, 3]);\n        var element6 = dom.childAt(element3, [3]);\n        var morph0 = dom.createMorphAt(element0,1,1);\n        var morph1 = dom.createMorphAt(element1,3,3);\n        var morph2 = dom.createMorphAt(dom.childAt(element4, [3]),1,1);\n        var morph3 = dom.createMorphAt(dom.childAt(element6, [1, 3]),0,0);\n        var morph4 = dom.createMorphAt(dom.childAt(element6, [3]),1,1);\n        block(env, morph0, context, \"gh-view-title\", [], {\"classNames\": \"gh-editor-title\", \"openMobileMenu\": \"openMobileMenu\"}, child0, null);\n        element(env, element2, context, \"action\", [\"openSettingsMenu\"], {});\n        inline(env, morph1, context, \"view\", [\"editor-save-button\"], {\"id\": \"entry-actions\", \"classNameBindings\": \"model.isNew:unsaved\"});\n        element(env, element5, context, \"action\", [\"openModal\", \"markdown\"], {});\n        inline(env, morph2, context, \"gh-ed-editor\", [], {\"classNames\": \"markdown-editor js-markdown-editor\", \"tabindex\": \"1\", \"spellcheck\": \"true\", \"value\": get(env, context, \"model.scratch\"), \"scrollInfo\": get(env, context, \"view.editorScrollInfo\"), \"setEditor\": \"setEditor\", \"openModal\": \"openModal\", \"onFocusIn\": \"autoSaveNew\"});\n        inline(env, morph3, context, \"gh-count-words\", [get(env, context, \"model.scratch\")], {});\n        inline(env, morph4, context, \"gh-ed-preview\", [], {\"classNames\": \"rendered-markdown js-rendered-markdown\", \"markdown\": get(env, context, \"model.scratch\"), \"scrollPosition\": get(env, context, \"view.scrollPosition\"), \"height\": get(env, context, \"view.height\"), \"uploadStarted\": \"disableEditor\", \"uploadFinished\": \"enableEditor\", \"uploadSuccess\": \"handleImgUpload\"});\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('ghost/templates/error', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      var child0 = (function() {\n        var child0 = (function() {\n          return {\n            isHTMLBars: true,\n            revision: \"Ember@1.12.1\",\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createElement(\"em\");\n              dom.setAttribute(el1,\"class\",\"error-stack-function\");\n              var el2 = dom.createComment(\"\");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, content = hooks.content;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var morph0 = dom.createMorphAt(dom.childAt(fragment, [0]),0,0);\n              content(env, morph0, context, \"item.function\");\n              return fragment;\n            }\n          };\n        }());\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.12.1\",\n          blockParams: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"                    \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"li\");\n            var el2 = dom.createTextNode(\"\\n                        at\\n                        \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createComment(\"\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n                        \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"span\");\n            dom.setAttribute(el2,\"class\",\"error-stack-file\");\n            var el3 = dom.createTextNode(\"(\");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createComment(\"\");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createTextNode(\")\");\n            dom.appendChild(el2, el3);\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n                    \");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement, blockArguments) {\n            var dom = env.dom;\n            var hooks = env.hooks, set = hooks.set, get = hooks.get, block = hooks.block, content = hooks.content;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var element0 = dom.childAt(fragment, [1]);\n            var morph0 = dom.createMorphAt(element0,1,1);\n            var morph1 = dom.createMorphAt(dom.childAt(element0, [3]),1,1);\n            set(env, context, \"item\", blockArguments[0]);\n            block(env, morph0, context, \"if\", [get(env, context, \"item.function\")], {}, child0, null);\n            content(env, morph1, context, \"item.at\");\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"        \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"section\");\n          dom.setAttribute(el1,\"class\",\"error-stack\");\n          var el2 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"h3\");\n          var el3 = dom.createTextNode(\"Stack Trace\");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"p\");\n          var el3 = dom.createElement(\"strong\");\n          var el4 = dom.createComment(\"\");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"ul\");\n          dom.setAttribute(el2,\"class\",\"error-stack-list\");\n          var el3 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createComment(\"\");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"            \");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, content = hooks.content, get = hooks.get, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element1 = dom.childAt(fragment, [1]);\n          var morph0 = dom.createMorphAt(dom.childAt(element1, [3, 0]),0,0);\n          var morph1 = dom.createMorphAt(dom.childAt(element1, [5]),1,1);\n          content(env, morph0, context, \"message\");\n          block(env, morph1, context, \"each\", [get(env, context, \"stack\")], {}, child0, null);\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"gh-view\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"section\");\n        dom.setAttribute(el2,\"class\",\"error-content error-404 js-error-container\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"section\");\n        dom.setAttribute(el3,\"class\",\"error-details\");\n        var el4 = dom.createTextNode(\"\\n             \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"img\");\n        dom.setAttribute(el4,\"class\",\"error-ghost\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n             \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"section\");\n        dom.setAttribute(el4,\"class\",\"error-message\");\n        var el5 = dom.createTextNode(\"\\n                 \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"h1\");\n        dom.setAttribute(el5,\"class\",\"error-code\");\n        var el6 = dom.createComment(\"\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n                 \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"h2\");\n        dom.setAttribute(el5,\"class\",\"error-description\");\n        var el6 = dom.createComment(\"\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n             \");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, subexpr = hooks.subexpr, concat = hooks.concat, attribute = hooks.attribute, content = hooks.content, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element2 = dom.childAt(fragment, [0]);\n        var element3 = dom.childAt(element2, [1, 1]);\n        var element4 = dom.childAt(element3, [1]);\n        var element5 = dom.childAt(element3, [3]);\n        var attrMorph0 = dom.createAttrMorph(element4, 'src');\n        var attrMorph1 = dom.createAttrMorph(element4, 'srcset');\n        var morph0 = dom.createMorphAt(dom.childAt(element5, [1]),0,0);\n        var morph1 = dom.createMorphAt(dom.childAt(element5, [3]),0,0);\n        var morph2 = dom.createMorphAt(element2,3,3);\n        attribute(env, attrMorph0, element4, \"src\", concat(env, [subexpr(env, context, \"gh-path\", [\"admin\", \"/img/404-ghost@2x.png\"], {})]));\n        attribute(env, attrMorph1, element4, \"srcset\", concat(env, [subexpr(env, context, \"gh-path\", [\"admin\", \"/img/404-ghost.png\"], {}), \" 1x, \", subexpr(env, context, \"gh-path\", [\"admin\", \"/img/404-ghost@2x.png\"], {}), \" 2x\"]));\n        content(env, morph0, context, \"code\");\n        content(env, morph1, context, \"message\");\n        block(env, morph2, context, \"if\", [get(env, context, \"stack\")], {}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('ghost/templates/modals/copy-html', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n          inline(env, morph0, context, \"textarea\", [], {\"value\": get(env, context, \"generatedHTML\"), \"rows\": \"6\"});\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n        dom.insertBoundary(fragment, null);\n        dom.insertBoundary(fragment, 0);\n        block(env, morph0, context, \"gh-modal-dialog\", [], {\"action\": \"closeModal\", \"showClose\": true, \"type\": \"action\", \"title\": \"Generated HTML\", \"confirm\": get(env, context, \"confirm\"), \"class\": \"copy-html\"}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('ghost/templates/modals/delete-all', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"p\");\n          var el2 = dom.createTextNode(\"This is permanent! No backups, no restores, no magic undo button. \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"br\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\" We warned you, ok?\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n        dom.insertBoundary(fragment, null);\n        dom.insertBoundary(fragment, 0);\n        block(env, morph0, context, \"gh-modal-dialog\", [], {\"action\": \"closeModal\", \"type\": \"action\", \"style\": \"wide\", \"title\": \"Would you really like to delete all content from your blog?\", \"confirm\": get(env, context, \"confirm\")}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('ghost/templates/modals/delete-post', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"p\");\n          var el2 = dom.createTextNode(\"You're about to delete \\\"\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"strong\");\n          var el3 = dom.createComment(\"\");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\\".\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"br\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"This is permanent! No backups, no restores, no magic undo button. \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"br\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\" We warned you, ok?\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, content = hooks.content;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 1]),0,0);\n          content(env, morph0, context, \"model.title\");\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n        dom.insertBoundary(fragment, null);\n        dom.insertBoundary(fragment, 0);\n        block(env, morph0, context, \"gh-modal-dialog\", [], {\"action\": \"closeModal\", \"showClose\": true, \"type\": \"action\", \"style\": \"wide\", \"title\": \"Are you sure you want to delete this post?\", \"confirm\": get(env, context, \"confirm\")}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('ghost/templates/modals/delete-tag', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.12.1\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"        \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"strong\");\n            var el2 = dom.createTextNode(\"WARNING:\");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\" \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"span\");\n            dom.setAttribute(el1,\"class\",\"red\");\n            var el2 = dom.createTextNode(\"This tag is attached to \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createComment(\"\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\" \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createComment(\"\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\".\");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\" You're about to delete \\\"\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"strong\");\n            var el2 = dom.createComment(\"\");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\\". This is permanent! No backups, no restores, no magic undo button. We warned you, ok?\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, content = hooks.content;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var element0 = dom.childAt(fragment, [3]);\n            var morph0 = dom.createMorphAt(element0,1,1);\n            var morph1 = dom.createMorphAt(element0,3,3);\n            var morph2 = dom.createMorphAt(dom.childAt(fragment, [5]),0,0);\n            content(env, morph0, context, \"model.post_count\");\n            content(env, morph1, context, \"postInflection\");\n            content(env, morph2, context, \"model.name\");\n            return fragment;\n          }\n        };\n      }());\n      var child1 = (function() {\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.12.1\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"        \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"strong\");\n            var el2 = dom.createTextNode(\"WARNING:\");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\" You're about to delete \\\"\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"strong\");\n            var el2 = dom.createComment(\"\");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\\". This is permanent! No backups, no restores, no magic undo button. We warned you, ok?\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, content = hooks.content;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(dom.childAt(fragment, [3]),0,0);\n            content(env, morph0, context, \"model.name\");\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n          dom.insertBoundary(fragment, null);\n          block(env, morph0, context, \"if\", [get(env, context, \"model.post_count\")], {}, child0, child1);\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n        dom.insertBoundary(fragment, null);\n        dom.insertBoundary(fragment, 0);\n        block(env, morph0, context, \"gh-modal-dialog\", [], {\"action\": \"closeModal\", \"showClose\": true, \"type\": \"action\", \"style\": \"wide\", \"title\": \"Are you sure you want to delete this tag?\", \"confirm\": get(env, context, \"confirm\")}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('ghost/templates/modals/delete-user', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      var child0 = (function() {\n        var child0 = (function() {\n          return {\n            isHTMLBars: true,\n            revision: \"Ember@1.12.1\",\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"            \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"strong\");\n              var el2 = dom.createTextNode(\"WARNING:\");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\" \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"span\");\n              dom.setAttribute(el1,\"class\",\"red\");\n              var el2 = dom.createTextNode(\"This user is the author of \");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createComment(\"\");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\" \");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createComment(\"\");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\".\");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\" All posts and user data will be deleted. There is no way to recover this.\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, content = hooks.content;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var element0 = dom.childAt(fragment, [3]);\n              var morph0 = dom.createMorphAt(element0,1,1);\n              var morph1 = dom.createMorphAt(element0,3,3);\n              content(env, morph0, context, \"userPostCount.count\");\n              content(env, morph1, context, \"userPostCount.inflection\");\n              return fragment;\n            }\n          };\n        }());\n        var child1 = (function() {\n          return {\n            isHTMLBars: true,\n            revision: \"Ember@1.12.1\",\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"            \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"strong\");\n              var el2 = dom.createTextNode(\"WARNING:\");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\" All user data will be deleted. There is no way to recover this.\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              return fragment;\n            }\n          };\n        }());\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.12.1\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createComment(\"\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, block = hooks.block;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n            dom.insertBoundary(fragment, null);\n            dom.insertBoundary(fragment, 0);\n            block(env, morph0, context, \"if\", [get(env, context, \"userPostCount.count\")], {}, child0, child1);\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n          block(env, morph0, context, \"unless\", [get(env, context, \"userPostCount.isPending\")], {}, child0, null);\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n        dom.insertBoundary(fragment, null);\n        dom.insertBoundary(fragment, 0);\n        block(env, morph0, context, \"gh-modal-dialog\", [], {\"action\": \"closeModal\", \"showClose\": true, \"type\": \"action\", \"style\": \"wide\", \"title\": \"Are you sure you want to delete this user?\", \"confirm\": get(env, context, \"confirm\")}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('ghost/templates/modals/invite-new-user', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"fieldset\");\n          var el2 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"div\");\n          dom.setAttribute(el2,\"class\",\"form-group\");\n          var el3 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"label\");\n          dom.setAttribute(el3,\"for\",\"new-user-email\");\n          var el4 = dom.createTextNode(\"Email Address\");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createComment(\"\");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n\\n            \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"div\");\n          dom.setAttribute(el2,\"class\",\"form-group for-select\");\n          var el3 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"label\");\n          dom.setAttribute(el3,\"for\",\"new-user-role\");\n          var el4 = dom.createTextNode(\"Role\");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createComment(\"\");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n\\n        \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element0 = dom.childAt(fragment, [1]);\n          var morph0 = dom.createMorphAt(dom.childAt(element0, [1]),3,3);\n          var morph1 = dom.createMorphAt(dom.childAt(element0, [3]),3,3);\n          inline(env, morph0, context, \"input\", [], {\"action\": \"confirmAccept\", \"class\": \"gh-input email\", \"id\": \"new-user-email\", \"type\": \"email\", \"placeholder\": \"Email Address\", \"name\": \"email\", \"autofocus\": \"autofocus\", \"autocapitalize\": \"off\", \"autocorrect\": \"off\", \"value\": get(env, context, \"email\")});\n          inline(env, morph1, context, \"gh-role-selector\", [], {\"initialValue\": get(env, context, \"authorRole\"), \"onChange\": \"setRole\", \"selectId\": \"new-user-role\"});\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n        dom.insertBoundary(fragment, null);\n        dom.insertBoundary(fragment, 0);\n        block(env, morph0, context, \"gh-modal-dialog\", [], {\"action\": \"closeModal\", \"showClose\": true, \"type\": \"action\", \"title\": \"Invite a New User\", \"confirm\": get(env, context, \"confirm\"), \"class\": \"invite-new-user\"}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('ghost/templates/modals/leave-editor', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"p\");\n          var el2 = dom.createTextNode(\"Hey there! It looks like you're in the middle of writing something and you haven't saved all of your\\n    content.\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\\n    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"p\");\n          var el2 = dom.createTextNode(\"Save before you go!\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n        dom.insertBoundary(fragment, null);\n        dom.insertBoundary(fragment, 0);\n        block(env, morph0, context, \"gh-modal-dialog\", [], {\"action\": \"closeModal\", \"showClose\": true, \"type\": \"action\", \"style\": \"wide\", \"title\": \"Are you sure you want to leave this page?\", \"confirm\": get(env, context, \"confirm\")}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('ghost/templates/modals/markdown', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"section\");\n          dom.setAttribute(el1,\"class\",\"markdown-help-container\");\n          var el2 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"table\");\n          dom.setAttribute(el2,\"class\",\"modal-markdown-help-table\");\n          var el3 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"thead\");\n          var el4 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createElement(\"tr\");\n          var el5 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createElement(\"th\");\n          var el6 = dom.createTextNode(\"Markdown\");\n          dom.appendChild(el5, el6);\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createElement(\"th\");\n          var el6 = dom.createTextNode(\"Result\");\n          dom.appendChild(el5, el6);\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createElement(\"th\");\n          var el6 = dom.createTextNode(\"Shortcut\");\n          dom.appendChild(el5, el6);\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el4, el5);\n          dom.appendChild(el3, el4);\n          var el4 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"tbody\");\n          var el4 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createElement(\"tr\");\n          var el5 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createElement(\"td\");\n          var el6 = dom.createTextNode(\"**text**\");\n          dom.appendChild(el5, el6);\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createElement(\"td\");\n          var el6 = dom.createElement(\"strong\");\n          var el7 = dom.createTextNode(\"Bold\");\n          dom.appendChild(el6, el7);\n          dom.appendChild(el5, el6);\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createElement(\"td\");\n          var el6 = dom.createTextNode(\"Ctrl/⌘ + B \");\n          dom.appendChild(el5, el6);\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el4, el5);\n          dom.appendChild(el3, el4);\n          var el4 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createElement(\"tr\");\n          var el5 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createElement(\"td\");\n          var el6 = dom.createTextNode(\"*text*\");\n          dom.appendChild(el5, el6);\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createElement(\"td\");\n          var el6 = dom.createElement(\"em\");\n          var el7 = dom.createTextNode(\"Emphasize\");\n          dom.appendChild(el6, el7);\n          dom.appendChild(el5, el6);\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createElement(\"td\");\n          var el6 = dom.createTextNode(\"Ctrl/⌘ + I\");\n          dom.appendChild(el5, el6);\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el4, el5);\n          dom.appendChild(el3, el4);\n          var el4 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createElement(\"tr\");\n          var el5 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createElement(\"td\");\n          var el6 = dom.createTextNode(\"~~text~~\");\n          dom.appendChild(el5, el6);\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createElement(\"td\");\n          var el6 = dom.createElement(\"del\");\n          var el7 = dom.createTextNode(\"Strike-through\");\n          dom.appendChild(el6, el7);\n          dom.appendChild(el5, el6);\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createElement(\"td\");\n          var el6 = dom.createTextNode(\"Ctrl + Alt + U\");\n          dom.appendChild(el5, el6);\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el4, el5);\n          dom.appendChild(el3, el4);\n          var el4 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createElement(\"tr\");\n          var el5 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createElement(\"td\");\n          var el6 = dom.createTextNode(\"[title](http://)\");\n          dom.appendChild(el5, el6);\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createElement(\"td\");\n          var el6 = dom.createElement(\"a\");\n          dom.setAttribute(el6,\"href\",\"#\");\n          var el7 = dom.createTextNode(\"Link\");\n          dom.appendChild(el6, el7);\n          dom.appendChild(el5, el6);\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createElement(\"td\");\n          var el6 = dom.createTextNode(\"Ctrl/⌘ + K\");\n          dom.appendChild(el5, el6);\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el4, el5);\n          dom.appendChild(el3, el4);\n          var el4 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createElement(\"tr\");\n          var el5 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createElement(\"td\");\n          var el6 = dom.createTextNode(\"`code`\");\n          dom.appendChild(el5, el6);\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createElement(\"td\");\n          var el6 = dom.createElement(\"code\");\n          var el7 = dom.createTextNode(\"Inline Code\");\n          dom.appendChild(el6, el7);\n          dom.appendChild(el5, el6);\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createElement(\"td\");\n          var el6 = dom.createTextNode(\"Ctrl/⌘ + Shift + K\");\n          dom.appendChild(el5, el6);\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el4, el5);\n          dom.appendChild(el3, el4);\n          var el4 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createElement(\"tr\");\n          var el5 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createElement(\"td\");\n          var el6 = dom.createTextNode(\"![alt](http://)\");\n          dom.appendChild(el5, el6);\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createElement(\"td\");\n          var el6 = dom.createTextNode(\"Image\");\n          dom.appendChild(el5, el6);\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createElement(\"td\");\n          var el6 = dom.createTextNode(\"Ctrl/⌘ + Shift + I\");\n          dom.appendChild(el5, el6);\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el4, el5);\n          dom.appendChild(el3, el4);\n          var el4 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createElement(\"tr\");\n          var el5 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createElement(\"td\");\n          var el6 = dom.createTextNode(\"* item\");\n          dom.appendChild(el5, el6);\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createElement(\"td\");\n          var el6 = dom.createTextNode(\"List\");\n          dom.appendChild(el5, el6);\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createElement(\"td\");\n          var el6 = dom.createTextNode(\"Ctrl + L\");\n          dom.appendChild(el5, el6);\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el4, el5);\n          dom.appendChild(el3, el4);\n          var el4 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createElement(\"tr\");\n          var el5 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createElement(\"td\");\n          var el6 = dom.createTextNode(\"> quote\");\n          dom.appendChild(el5, el6);\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createElement(\"td\");\n          var el6 = dom.createTextNode(\"Blockquote\");\n          dom.appendChild(el5, el6);\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createElement(\"td\");\n          var el6 = dom.createTextNode(\"Ctrl + Q\");\n          dom.appendChild(el5, el6);\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el4, el5);\n          dom.appendChild(el3, el4);\n          var el4 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createElement(\"tr\");\n          var el5 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createElement(\"td\");\n          var el6 = dom.createTextNode(\"==Highlight==\");\n          dom.appendChild(el5, el6);\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createElement(\"td\");\n          var el6 = dom.createElement(\"mark\");\n          var el7 = dom.createTextNode(\"Highlight\");\n          dom.appendChild(el6, el7);\n          dom.appendChild(el5, el6);\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createElement(\"td\");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el4, el5);\n          dom.appendChild(el3, el4);\n          var el4 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createElement(\"tr\");\n          var el5 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createElement(\"td\");\n          var el6 = dom.createTextNode(\"# Heading\");\n          dom.appendChild(el5, el6);\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createElement(\"td\");\n          var el6 = dom.createTextNode(\"H1\");\n          dom.appendChild(el5, el6);\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createElement(\"td\");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el4, el5);\n          dom.appendChild(el3, el4);\n          var el4 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createElement(\"tr\");\n          var el5 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createElement(\"td\");\n          var el6 = dom.createTextNode(\"## Heading\");\n          dom.appendChild(el5, el6);\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createElement(\"td\");\n          var el6 = dom.createTextNode(\"H2\");\n          dom.appendChild(el5, el6);\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createElement(\"td\");\n          var el6 = dom.createTextNode(\"Ctrl/⌘ + H\");\n          dom.appendChild(el5, el6);\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el4, el5);\n          dom.appendChild(el3, el4);\n          var el4 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createElement(\"tr\");\n          var el5 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createElement(\"td\");\n          var el6 = dom.createTextNode(\"### Heading\");\n          dom.appendChild(el5, el6);\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createElement(\"td\");\n          var el6 = dom.createTextNode(\"H3\");\n          dom.appendChild(el5, el6);\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createElement(\"td\");\n          var el6 = dom.createTextNode(\"Ctrl/⌘ + H (x2)\");\n          dom.appendChild(el5, el6);\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el4, el5);\n          dom.appendChild(el3, el4);\n          var el4 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n        For further Markdown syntax reference: \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"a\");\n          dom.setAttribute(el2,\"href\",\"http://support.ghost.org/markdown-guide/\");\n          dom.setAttribute(el2,\"target\",\"_blank\");\n          var el3 = dom.createTextNode(\"Markdown Documentation\");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n        dom.insertBoundary(fragment, null);\n        dom.insertBoundary(fragment, 0);\n        block(env, morph0, context, \"gh-modal-dialog\", [], {\"action\": \"closeModal\", \"showClose\": true, \"style\": \"wide\", \"title\": \"Markdown Help\"}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('ghost/templates/modals/signin', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"form\");\n          dom.setAttribute(el1,\"id\",\"login\");\n          dom.setAttribute(el1,\"class\",\"login-form\");\n          dom.setAttribute(el1,\"method\",\"post\");\n          dom.setAttribute(el1,\"novalidate\",\"novalidate\");\n          var el2 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"div\");\n          dom.setAttribute(el2,\"class\",\"password-wrap\");\n          var el3 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createComment(\"\");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"button\");\n          dom.setAttribute(el2,\"class\",\"btn btn-blue\");\n          dom.setAttribute(el2,\"type\",\"submit\");\n          var el3 = dom.createTextNode(\"Log in\");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n       \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, element = hooks.element, get = hooks.get, inline = hooks.inline, attribute = hooks.attribute;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element0 = dom.childAt(fragment, [1]);\n          var element1 = dom.childAt(element0, [3]);\n          var morph0 = dom.createMorphAt(dom.childAt(element0, [1]),1,1);\n          var attrMorph0 = dom.createAttrMorph(element1, 'disabled');\n          element(env, element0, context, \"action\", [\"validateAndAuthenticate\"], {\"on\": \"submit\"});\n          inline(env, morph0, context, \"input\", [], {\"class\": \"gh-input password\", \"type\": \"password\", \"placeholder\": \"Password\", \"name\": \"password\", \"value\": get(env, context, \"password\")});\n          attribute(env, attrMorph0, element1, \"disabled\", get(env, context, \"submitting\"));\n          element(env, element1, context, \"action\", [\"validateAndAuthenticate\"], {});\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n        dom.insertBoundary(fragment, null);\n        dom.insertBoundary(fragment, 0);\n        block(env, morph0, context, \"gh-modal-dialog\", [], {\"action\": \"closeModal\", \"showClose\": true, \"type\": \"action\", \"style\": \"wide\", \"animation\": \"fade\", \"title\": \"Please re-authenticate\", \"confirm\": get(env, context, \"confirm\")}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('ghost/templates/modals/transfer-owner', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"p\");\n          var el2 = dom.createTextNode(\"Are you sure you want to transfer the ownership of this blog? You will not be able to undo this action.\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n        dom.insertBoundary(fragment, null);\n        dom.insertBoundary(fragment, 0);\n        block(env, morph0, context, \"gh-modal-dialog\", [], {\"action\": \"closeModal\", \"showClose\": true, \"type\": \"action\", \"style\": \"wide\", \"title\": \"Transfer Ownership\", \"confirm\": get(env, context, \"confirm\")}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('ghost/templates/modals/upload', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"  \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"section\");\n          dom.setAttribute(el1,\"class\",\"js-drop-zone\");\n          var el2 = dom.createTextNode(\"\\n      \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"img\");\n          dom.setAttribute(el2,\"class\",\"js-upload-target\");\n          dom.setAttribute(el2,\"alt\",\"logo\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n      \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"input\");\n          dom.setAttribute(el2,\"data-url\",\"upload\");\n          dom.setAttribute(el2,\"class\",\"js-fileupload main\");\n          dom.setAttribute(el2,\"type\",\"file\");\n          dom.setAttribute(el2,\"name\",\"uploadimage\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n  \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, concat = hooks.concat, attribute = hooks.attribute;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element0 = dom.childAt(fragment, [1]);\n          var element1 = dom.childAt(element0, [1]);\n          var element2 = dom.childAt(element0, [3]);\n          var attrMorph0 = dom.createAttrMorph(element1, 'src');\n          var attrMorph1 = dom.createAttrMorph(element2, 'accept');\n          attribute(env, attrMorph0, element1, \"src\", concat(env, [get(env, context, \"src\")]));\n          attribute(env, attrMorph1, element2, \"accept\", concat(env, [get(env, context, \"acceptEncoding\")]));\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n        dom.insertBoundary(fragment, null);\n        dom.insertBoundary(fragment, 0);\n        block(env, morph0, context, \"gh-upload-modal\", [], {\"action\": \"closeModal\", \"close\": true, \"type\": \"action\", \"style\": \"wide\", \"model\": get(env, context, \"model\"), \"imageType\": get(env, context, \"imageType\")}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('ghost/templates/post-settings-menu', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.12.1\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"                \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"a\");\n            dom.setAttribute(el1,\"class\",\"post-view-link\");\n            dom.setAttribute(el1,\"target\",\"_blank\");\n            var el2 = dom.createTextNode(\"\\n                    View post \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"i\");\n            dom.setAttribute(el2,\"class\",\"icon-external\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n                \");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, concat = hooks.concat, attribute = hooks.attribute;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var element6 = dom.childAt(fragment, [1]);\n            var attrMorph0 = dom.createAttrMorph(element6, 'href');\n            attribute(env, attrMorph0, element6, \"href\", concat(env, [get(env, context, \"model.absoluteUrl\")]));\n            return fragment;\n          }\n        };\n      }());\n      var child1 = (function() {\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.12.1\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"                \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"a\");\n            dom.setAttribute(el1,\"class\",\"post-view-link\");\n            dom.setAttribute(el1,\"target\",\"_blank\");\n            var el2 = dom.createTextNode(\"\\n                    Preview \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"i\");\n            dom.setAttribute(el2,\"class\",\"icon-external\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n                \");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, concat = hooks.concat, attribute = hooks.attribute;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var element5 = dom.childAt(fragment, [1]);\n            var attrMorph0 = dom.createAttrMorph(element5, 'href');\n            attribute(env, attrMorph0, element5, \"href\", concat(env, [get(env, context, \"model.previewUrl\")]));\n            return fragment;\n          }\n        };\n      }());\n      var child2 = (function() {\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.12.1\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"            \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"div\");\n            dom.setAttribute(el1,\"class\",\"form-group for-select\");\n            var el2 = dom.createTextNode(\"\\n                \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"label\");\n            dom.setAttribute(el2,\"for\",\"author-list\");\n            var el3 = dom.createTextNode(\"Author\");\n            dom.appendChild(el2, el3);\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n                \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"span\");\n            dom.setAttribute(el2,\"class\",\"input-icon icon-user\");\n            var el3 = dom.createTextNode(\"\\n                    \");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createElement(\"span\");\n            dom.setAttribute(el3,\"class\",\"gh-select\");\n            dom.setAttribute(el3,\"tabindex\",\"0\");\n            var el4 = dom.createTextNode(\"\\n                    \");\n            dom.appendChild(el3, el4);\n            var el4 = dom.createComment(\"\");\n            dom.appendChild(el3, el4);\n            var el4 = dom.createTextNode(\"\\n                    \");\n            dom.appendChild(el3, el4);\n            dom.appendChild(el2, el3);\n            var el3 = dom.createTextNode(\"\\n                \");\n            dom.appendChild(el2, el3);\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n            \");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 3, 1]),1,1);\n            inline(env, morph0, context, \"view\", [\"select\"], {\"name\": \"post-setting-author\", \"id\": \"author-list\", \"content\": get(env, context, \"authors\"), \"optionValuePath\": \"content.id\", \"optionLabelPath\": \"content.name\", \"selection\": get(env, context, \"selectedAuthor\")});\n            return fragment;\n          }\n        };\n      }());\n      var child3 = (function() {\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.12.1\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"                    \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"button\");\n            dom.setAttribute(el1,\"type\",\"button\");\n            var el2 = dom.createTextNode(\"\\n                        \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"b\");\n            var el3 = dom.createTextNode(\"Meta Data\");\n            dom.appendChild(el2, el3);\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n                        \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"span\");\n            var el3 = dom.createTextNode(\"Extra content for SEO and social media.\");\n            dom.appendChild(el2, el3);\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n                    \");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n                    \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"i\");\n            dom.setAttribute(el1,\"class\",\"icon-arrow-right\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            return fragment;\n          }\n        };\n      }());\n      var child4 = (function() {\n        var child0 = (function() {\n          return {\n            isHTMLBars: true,\n            revision: \"Ember@1.12.1\",\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"        \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"div\");\n              dom.setAttribute(el1,\"class\",\"settings-menu-header subview\");\n              var el2 = dom.createTextNode(\"\\n            \");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createElement(\"button\");\n              dom.setAttribute(el2,\"class\",\"back icon-arrow-left settings-menu-header-action\");\n              var el3 = dom.createElement(\"span\");\n              dom.setAttribute(el3,\"class\",\"hidden\");\n              var el4 = dom.createTextNode(\"Back\");\n              dom.appendChild(el3, el4);\n              dom.appendChild(el2, el3);\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"\\n            \");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createElement(\"h4\");\n              var el3 = dom.createTextNode(\"Meta Data\");\n              dom.appendChild(el2, el3);\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"\\n            \");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createElement(\"div\");\n              dom.setAttribute(el2,\"style\",\"width:23px;\");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"\\n        \");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\\n        \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"div\");\n              dom.setAttribute(el1,\"class\",\"settings-menu-content\");\n              var el2 = dom.createTextNode(\"\\n            \");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createElement(\"form\");\n              var el3 = dom.createTextNode(\"\\n            \");\n              dom.appendChild(el2, el3);\n              var el3 = dom.createElement(\"div\");\n              dom.setAttribute(el3,\"class\",\"form-group\");\n              var el4 = dom.createTextNode(\"\\n                \");\n              dom.appendChild(el3, el4);\n              var el4 = dom.createElement(\"label\");\n              dom.setAttribute(el4,\"for\",\"meta-title\");\n              var el5 = dom.createTextNode(\"Meta Title\");\n              dom.appendChild(el4, el5);\n              dom.appendChild(el3, el4);\n              var el4 = dom.createTextNode(\"\\n                \");\n              dom.appendChild(el3, el4);\n              var el4 = dom.createComment(\"\");\n              dom.appendChild(el3, el4);\n              var el4 = dom.createTextNode(\"\\n                \");\n              dom.appendChild(el3, el4);\n              var el4 = dom.createElement(\"p\");\n              var el5 = dom.createTextNode(\"Recommended: \");\n              dom.appendChild(el4, el5);\n              var el5 = dom.createElement(\"b\");\n              var el6 = dom.createTextNode(\"70\");\n              dom.appendChild(el5, el6);\n              dom.appendChild(el4, el5);\n              var el5 = dom.createTextNode(\" characters. You’ve used \");\n              dom.appendChild(el4, el5);\n              var el5 = dom.createComment(\"\");\n              dom.appendChild(el4, el5);\n              dom.appendChild(el3, el4);\n              var el4 = dom.createTextNode(\"\\n            \");\n              dom.appendChild(el3, el4);\n              dom.appendChild(el2, el3);\n              var el3 = dom.createTextNode(\"\\n\\n            \");\n              dom.appendChild(el2, el3);\n              var el3 = dom.createElement(\"div\");\n              dom.setAttribute(el3,\"class\",\"form-group\");\n              var el4 = dom.createTextNode(\"\\n                \");\n              dom.appendChild(el3, el4);\n              var el4 = dom.createElement(\"label\");\n              dom.setAttribute(el4,\"for\",\"meta-description\");\n              var el5 = dom.createTextNode(\"Meta Description\");\n              dom.appendChild(el4, el5);\n              dom.appendChild(el3, el4);\n              var el4 = dom.createTextNode(\"\\n                \");\n              dom.appendChild(el3, el4);\n              var el4 = dom.createComment(\"\");\n              dom.appendChild(el3, el4);\n              var el4 = dom.createTextNode(\"\\n                \");\n              dom.appendChild(el3, el4);\n              var el4 = dom.createElement(\"p\");\n              var el5 = dom.createTextNode(\"Recommended: \");\n              dom.appendChild(el4, el5);\n              var el5 = dom.createElement(\"b\");\n              var el6 = dom.createTextNode(\"156\");\n              dom.appendChild(el5, el6);\n              dom.appendChild(el4, el5);\n              var el5 = dom.createTextNode(\" characters. You’ve used \");\n              dom.appendChild(el4, el5);\n              var el5 = dom.createComment(\"\");\n              dom.appendChild(el4, el5);\n              dom.appendChild(el3, el4);\n              var el4 = dom.createTextNode(\"\\n            \");\n              dom.appendChild(el3, el4);\n              dom.appendChild(el2, el3);\n              var el3 = dom.createTextNode(\"\\n\\n            \");\n              dom.appendChild(el2, el3);\n              var el3 = dom.createElement(\"div\");\n              dom.setAttribute(el3,\"class\",\"form-group\");\n              var el4 = dom.createTextNode(\"\\n                \");\n              dom.appendChild(el3, el4);\n              var el4 = dom.createElement(\"label\");\n              var el5 = dom.createTextNode(\"Search Engine Result Preview\");\n              dom.appendChild(el4, el5);\n              dom.appendChild(el3, el4);\n              var el4 = dom.createTextNode(\"\\n                \");\n              dom.appendChild(el3, el4);\n              var el4 = dom.createElement(\"div\");\n              dom.setAttribute(el4,\"class\",\"seo-preview\");\n              var el5 = dom.createTextNode(\"\\n                    \");\n              dom.appendChild(el4, el5);\n              var el5 = dom.createElement(\"div\");\n              dom.setAttribute(el5,\"class\",\"seo-preview-title\");\n              var el6 = dom.createComment(\"\");\n              dom.appendChild(el5, el6);\n              dom.appendChild(el4, el5);\n              var el5 = dom.createTextNode(\"\\n                    \");\n              dom.appendChild(el4, el5);\n              var el5 = dom.createElement(\"div\");\n              dom.setAttribute(el5,\"class\",\"seo-preview-link\");\n              var el6 = dom.createComment(\"\");\n              dom.appendChild(el5, el6);\n              dom.appendChild(el4, el5);\n              var el5 = dom.createTextNode(\"\\n                    \");\n              dom.appendChild(el4, el5);\n              var el5 = dom.createElement(\"div\");\n              dom.setAttribute(el5,\"class\",\"seo-preview-description\");\n              var el6 = dom.createComment(\"\");\n              dom.appendChild(el5, el6);\n              dom.appendChild(el4, el5);\n              var el5 = dom.createTextNode(\"\\n                \");\n              dom.appendChild(el4, el5);\n              dom.appendChild(el3, el4);\n              var el4 = dom.createTextNode(\"\\n            \");\n              dom.appendChild(el3, el4);\n              dom.appendChild(el2, el3);\n              var el3 = dom.createTextNode(\"\\n            \");\n              dom.appendChild(el2, el3);\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"\\n        \");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, element = hooks.element, get = hooks.get, inline = hooks.inline, content = hooks.content;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var element0 = dom.childAt(fragment, [1, 1]);\n              var element1 = dom.childAt(fragment, [3, 1]);\n              var element2 = dom.childAt(element1, [1]);\n              var element3 = dom.childAt(element1, [3]);\n              var element4 = dom.childAt(element1, [5, 3]);\n              var morph0 = dom.createMorphAt(element2,3,3);\n              var morph1 = dom.createMorphAt(dom.childAt(element2, [5]),3,3);\n              var morph2 = dom.createMorphAt(element3,3,3);\n              var morph3 = dom.createMorphAt(dom.childAt(element3, [5]),3,3);\n              var morph4 = dom.createMorphAt(dom.childAt(element4, [1]),0,0);\n              var morph5 = dom.createMorphAt(dom.childAt(element4, [3]),0,0);\n              var morph6 = dom.createMorphAt(dom.childAt(element4, [5]),0,0);\n              element(env, element0, context, \"action\", [\"closeSubview\"], {});\n              inline(env, morph0, context, \"gh-input\", [], {\"class\": \"gh-input post-setting-meta-title\", \"id\": \"meta-title\", \"value\": get(env, context, \"metaTitleScratch\"), \"name\": \"post-setting-meta-title\", \"focus-out\": \"setMetaTitle\", \"stopEnterKeyDownPropagation\": \"true\"});\n              inline(env, morph1, context, \"gh-count-down-characters\", [get(env, context, \"metaTitleScratch\"), 70], {});\n              inline(env, morph2, context, \"gh-textarea\", [], {\"class\": \"gh-input post-setting-meta-description\", \"id\": \"meta-description\", \"value\": get(env, context, \"metaDescriptionScratch\"), \"name\": \"post-setting-meta-description\", \"focus-out\": \"setMetaDescription\", \"stopEnterKeyDownPropagation\": \"true\"});\n              inline(env, morph3, context, \"gh-count-down-characters\", [get(env, context, \"metaDescriptionScratch\"), 156], {});\n              content(env, morph4, context, \"seoTitle\");\n              content(env, morph5, context, \"seoURL\");\n              content(env, morph6, context, \"seoDescription\");\n              return fragment;\n            }\n          };\n        }());\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.12.1\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createComment(\"\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, block = hooks.block;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n            dom.insertBoundary(fragment, null);\n            dom.insertBoundary(fragment, 0);\n            block(env, morph0, context, \"if\", [get(env, context, \"isViewingSubview\")], {}, child0, null);\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"id\",\"entry-controls\");\n          var el2 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"div\");\n          var el3 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"div\");\n          dom.setAttribute(el3,\"class\",\"settings-menu-header\");\n          var el4 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createElement(\"h4\");\n          var el5 = dom.createTextNode(\"Post Settings\");\n          dom.appendChild(el4, el5);\n          dom.appendChild(el3, el4);\n          var el4 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createElement(\"button\");\n          dom.setAttribute(el4,\"class\",\"close icon-x settings-menu-header-action\");\n          var el5 = dom.createElement(\"span\");\n          dom.setAttribute(el5,\"class\",\"hidden\");\n          var el6 = dom.createTextNode(\"Close\");\n          dom.appendChild(el5, el6);\n          dom.appendChild(el4, el5);\n          dom.appendChild(el3, el4);\n          var el4 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"div\");\n          dom.setAttribute(el3,\"class\",\"settings-menu-content\");\n          var el4 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createComment(\"\");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createElement(\"form\");\n          var el5 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createElement(\"div\");\n          dom.setAttribute(el5,\"class\",\"form-group\");\n          var el6 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el5, el6);\n          var el6 = dom.createElement(\"label\");\n          dom.setAttribute(el6,\"for\",\"url\");\n          var el7 = dom.createTextNode(\"Post URL\");\n          dom.appendChild(el6, el7);\n          dom.appendChild(el5, el6);\n          var el6 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el5, el6);\n          var el6 = dom.createComment(\"\");\n          dom.appendChild(el5, el6);\n          var el6 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el5, el6);\n          var el6 = dom.createElement(\"span\");\n          dom.setAttribute(el6,\"class\",\"input-icon icon-link\");\n          var el7 = dom.createTextNode(\"\\n                    \");\n          dom.appendChild(el6, el7);\n          var el7 = dom.createComment(\"\");\n          dom.appendChild(el6, el7);\n          var el7 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el6, el7);\n          dom.appendChild(el5, el6);\n          var el6 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el5, el6);\n          var el6 = dom.createComment(\"\");\n          dom.appendChild(el5, el6);\n          var el6 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el5, el6);\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n\\n            \");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createElement(\"div\");\n          dom.setAttribute(el5,\"class\",\"form-group\");\n          var el6 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el5, el6);\n          var el6 = dom.createElement(\"label\");\n          dom.setAttribute(el6,\"for\",\"post-setting-date\");\n          var el7 = dom.createTextNode(\"Publish Date\");\n          dom.appendChild(el6, el7);\n          dom.appendChild(el5, el6);\n          var el6 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el5, el6);\n          var el6 = dom.createElement(\"span\");\n          dom.setAttribute(el6,\"class\",\"input-icon icon-calendar\");\n          var el7 = dom.createTextNode(\"\\n                    \");\n          dom.appendChild(el6, el7);\n          var el7 = dom.createComment(\"\");\n          dom.appendChild(el6, el7);\n          var el7 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el6, el7);\n          dom.appendChild(el5, el6);\n          var el6 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el5, el6);\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n\\n\");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createComment(\"\");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createElement(\"ul\");\n          dom.setAttribute(el5,\"class\",\"nav-list nav-list-block\");\n          var el6 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el5, el6);\n          var el6 = dom.createComment(\"\");\n          dom.appendChild(el5, el6);\n          var el6 = dom.createTextNode(\"            \");\n          dom.appendChild(el5, el6);\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n\\n            \");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createElement(\"div\");\n          dom.setAttribute(el5,\"class\",\"form-group for-checkbox\");\n          var el6 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el5, el6);\n          var el6 = dom.createElement(\"label\");\n          dom.setAttribute(el6,\"class\",\"checkbox\");\n          dom.setAttribute(el6,\"for\",\"static-page\");\n          var el7 = dom.createTextNode(\"\\n                    \");\n          dom.appendChild(el6, el7);\n          var el7 = dom.createComment(\"\");\n          dom.appendChild(el6, el7);\n          var el7 = dom.createTextNode(\"\\n                    \");\n          dom.appendChild(el6, el7);\n          var el7 = dom.createElement(\"span\");\n          dom.setAttribute(el7,\"class\",\"input-toggle-component\");\n          dom.appendChild(el6, el7);\n          var el7 = dom.createTextNode(\"\\n                    \");\n          dom.appendChild(el6, el7);\n          var el7 = dom.createElement(\"p\");\n          var el8 = dom.createTextNode(\"Turn this post into a static page\");\n          dom.appendChild(el7, el8);\n          dom.appendChild(el6, el7);\n          var el7 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el6, el7);\n          dom.appendChild(el5, el6);\n          var el6 = dom.createTextNode(\"\\n\\n                \");\n          dom.appendChild(el5, el6);\n          var el6 = dom.createElement(\"label\");\n          dom.setAttribute(el6,\"class\",\"checkbox\");\n          dom.setAttribute(el6,\"for\",\"featured\");\n          var el7 = dom.createTextNode(\"\\n                    \");\n          dom.appendChild(el6, el7);\n          var el7 = dom.createComment(\"\");\n          dom.appendChild(el6, el7);\n          var el7 = dom.createTextNode(\"\\n                    \");\n          dom.appendChild(el6, el7);\n          var el7 = dom.createElement(\"span\");\n          dom.setAttribute(el7,\"class\",\"input-toggle-component\");\n          dom.appendChild(el6, el7);\n          var el7 = dom.createTextNode(\"\\n                    \");\n          dom.appendChild(el6, el7);\n          var el7 = dom.createElement(\"p\");\n          var el8 = dom.createTextNode(\"Feature this post\");\n          dom.appendChild(el7, el8);\n          dom.appendChild(el6, el7);\n          var el7 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el6, el7);\n          dom.appendChild(el5, el6);\n          var el6 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el5, el6);\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n\\n            \");\n          dom.appendChild(el4, el5);\n          dom.appendChild(el3, el4);\n          var el4 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n\\n    \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"div\");\n          var el3 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createComment(\"\");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"    \");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, subexpr = hooks.subexpr, concat = hooks.concat, attribute = hooks.attribute, element = hooks.element, inline = hooks.inline, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element7 = dom.childAt(fragment, [0]);\n          var element8 = dom.childAt(element7, [1]);\n          var element9 = dom.childAt(element8, [1, 3]);\n          var element10 = dom.childAt(element8, [3]);\n          var element11 = dom.childAt(element10, [3]);\n          var element12 = dom.childAt(element11, [1]);\n          var element13 = dom.childAt(element11, [9]);\n          var element14 = dom.childAt(element13, [1]);\n          var element15 = dom.childAt(element13, [3]);\n          var element16 = dom.childAt(element7, [3]);\n          var attrMorph0 = dom.createAttrMorph(element8, 'class');\n          var morph0 = dom.createMorphAt(element10,1,1);\n          var morph1 = dom.createMorphAt(element12,3,3);\n          var morph2 = dom.createMorphAt(dom.childAt(element12, [5]),1,1);\n          var morph3 = dom.createMorphAt(element12,7,7);\n          var morph4 = dom.createMorphAt(dom.childAt(element11, [3, 3]),1,1);\n          var morph5 = dom.createMorphAt(element11,5,5);\n          var morph6 = dom.createMorphAt(dom.childAt(element11, [7]),1,1);\n          var morph7 = dom.createMorphAt(element14,1,1);\n          var morph8 = dom.createMorphAt(element15,1,1);\n          var morph9 = dom.createMorphAt(element16,1,1);\n          var attrMorph1 = dom.createAttrMorph(element16, 'class');\n          attribute(env, attrMorph0, element8, \"class\", concat(env, [subexpr(env, context, \"if\", [get(env, context, \"isViewingSubview\"), \"settings-menu-pane-out-left\", \"settings-menu-pane-in\"], {}), \" settings-menu settings-menu-pane\"]));\n          element(env, element9, context, \"action\", [\"closeMenus\"], {});\n          inline(env, morph0, context, \"gh-uploader\", [], {\"uploaded\": \"setCoverImage\", \"canceled\": \"clearCoverImage\", \"description\": \"Add post image\", \"image\": get(env, context, \"model.image\"), \"uploaderReference\": get(env, context, \"uploaderReference\"), \"tagName\": \"section\"});\n          block(env, morph1, context, \"if\", [get(env, context, \"model.isPublished\")], {}, child0, child1);\n          inline(env, morph2, context, \"gh-input\", [], {\"class\": \"gh-input post-setting-slug\", \"id\": \"url\", \"value\": get(env, context, \"slugValue\"), \"name\": \"post-setting-slug\", \"focus-out\": \"updateSlug\", \"selectOnClick\": \"true\", \"stopEnterKeyDownPropagation\": \"true\"});\n          inline(env, morph3, context, \"gh-url-preview\", [], {\"slug\": get(env, context, \"slugValue\"), \"tagName\": \"p\", \"classNames\": \"description\"});\n          inline(env, morph4, context, \"gh-input\", [], {\"class\": \"gh-input post-setting-date\", \"id\": \"post-setting-date\", \"value\": get(env, context, \"publishedAtValue\"), \"name\": \"post-setting-date\", \"focus-out\": \"setPublishedAt\", \"stopEnterKeyDownPropagation\": \"true\"});\n          block(env, morph5, context, \"unless\", [get(env, context, \"session.user.isAuthor\")], {}, child2, null);\n          block(env, morph6, context, \"gh-tab\", [], {\"tagName\": \"li\", \"classNames\": \"nav-list-item\"}, child3, null);\n          element(env, element14, context, \"action\", [\"togglePage\"], {\"bubbles\": \"false\"});\n          inline(env, morph7, context, \"input\", [], {\"type\": \"checkbox\", \"name\": \"static-page\", \"id\": \"static-page\", \"class\": \"gh-input post-setting-static-page\", \"checked\": get(env, context, \"model.page\")});\n          element(env, element15, context, \"action\", [\"toggleFeatured\"], {\"bubbles\": \"false\"});\n          inline(env, morph8, context, \"input\", [], {\"type\": \"checkbox\", \"name\": \"featured\", \"id\": \"featured\", \"class\": \"gh-input post-setting-featured\", \"checked\": get(env, context, \"model.featured\")});\n          attribute(env, attrMorph1, element16, \"class\", concat(env, [subexpr(env, context, \"if\", [get(env, context, \"isViewingSubview\"), \"settings-menu-pane-in\", \"settings-menu-pane-out-right\"], {}), \" settings-menu settings-menu-pane\"]));\n          block(env, morph9, context, \"gh-tab-pane\", [], {}, child4, null);\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n        dom.insertBoundary(fragment, null);\n        dom.insertBoundary(fragment, 0);\n        block(env, morph0, context, \"gh-tabs-manager\", [], {\"selected\": \"showSubview\", \"id\": \"entry-controls\", \"class\": \"settings-menu-container\"}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('ghost/templates/post-tags-input', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 1,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"           \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"span\");\n          dom.setAttribute(el1,\"class\",\"tag\");\n          var el2 = dom.createComment(\"\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\" \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"i\");\n          dom.setAttribute(el2,\"class\",\"icon-x\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement, blockArguments) {\n          var dom = env.dom;\n          var hooks = env.hooks, set = hooks.set, get = hooks.get, element = hooks.element, content = hooks.content;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element0 = dom.childAt(fragment, [1]);\n          var morph0 = dom.createMorphAt(element0,0,0);\n          set(env, context, \"tag\", blockArguments[0]);\n          element(env, element0, context, \"action\", [\"deleteTag\", get(env, context, \"tag\")], {\"target\": get(env, context, \"view\")});\n          content(env, morph0, context, \"tag.name\");\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.12.1\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"                \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"a\");\n            dom.setAttribute(el1,\"href\",\"javascript:void(0);\");\n            var el2 = dom.createComment(\"\");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, content = hooks.content;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);\n            content(env, morph0, context, \"view.suggestion.highlightedName\");\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 1,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement, blockArguments) {\n          var dom = env.dom;\n          var hooks = env.hooks, set = hooks.set, get = hooks.get, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n          dom.insertBoundary(fragment, null);\n          dom.insertBoundary(fragment, 0);\n          set(env, context, \"suggestion\", blockArguments[0]);\n          block(env, morph0, context, \"view\", [get(env, context, \"view.suggestionView\")], {\"suggestion\": get(env, context, \"suggestion\")}, child0, null);\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"publish-bar-tags-icon\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"label\");\n        dom.setAttribute(el2,\"class\",\"tag-label icon-tag\");\n        dom.setAttribute(el2,\"for\",\"tags\");\n        dom.setAttribute(el2,\"title\",\"Tags\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"span\");\n        dom.setAttribute(el3,\"class\",\"sr-only\");\n        var el4 = dom.createTextNode(\"Tags\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"publish-bar-tags\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"tags-wrapper tags\");\n        var el3 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createComment(\"\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"publish-bar-tags-input\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"input\");\n        dom.setAttribute(el2,\"type\",\"hidden\");\n        dom.setAttribute(el2,\"class\",\"tags-holder\");\n        dom.setAttribute(el2,\"id\",\"tags-holder\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"ul\");\n        dom.setAttribute(el2,\"class\",\"suggestions dropdown-menu dropdown-triangle-bottom\");\n        var el3 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createComment(\"\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block, inline = hooks.inline, attribute = hooks.attribute;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element1 = dom.childAt(fragment, [4]);\n        var element2 = dom.childAt(element1, [5]);\n        var morph0 = dom.createMorphAt(dom.childAt(fragment, [2, 1]),1,1);\n        var morph1 = dom.createMorphAt(element1,3,3);\n        var morph2 = dom.createMorphAt(element2,1,1);\n        var attrMorph0 = dom.createAttrMorph(element2, 'style');\n        block(env, morph0, context, \"each\", [get(env, context, \"controller.tags\")], {}, child0, null);\n        inline(env, morph1, context, \"view\", [get(env, context, \"view.tagInputView\")], {\"class\": \"tag-input js-tag-input\", \"id\": \"tags\", \"value\": get(env, context, \"newTagText\")});\n        attribute(env, attrMorph0, element2, \"style\", get(env, context, \"view.overlayStyles\"));\n        block(env, morph2, context, \"each\", [get(env, context, \"suggestions\")], {}, child1, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('ghost/templates/posts', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"Content\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"New Post\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    var child2 = (function() {\n      var child0 = (function() {\n        var child0 = (function() {\n          var child0 = (function() {\n            var child0 = (function() {\n              return {\n                isHTMLBars: true,\n                revision: \"Ember@1.12.1\",\n                blockParams: 0,\n                cachedFragment: null,\n                hasRendered: false,\n                build: function build(dom) {\n                  var el0 = dom.createDocumentFragment();\n                  var el1 = dom.createTextNode(\"                                    \");\n                  dom.appendChild(el0, el1);\n                  var el1 = dom.createElement(\"span\");\n                  dom.setAttribute(el1,\"class\",\"page\");\n                  var el2 = dom.createTextNode(\"Page\");\n                  dom.appendChild(el1, el2);\n                  dom.appendChild(el0, el1);\n                  var el1 = dom.createTextNode(\"\\n\");\n                  dom.appendChild(el0, el1);\n                  return el0;\n                },\n                render: function render(context, env, contextualElement) {\n                  var dom = env.dom;\n                  dom.detectNamespace(contextualElement);\n                  var fragment;\n                  if (env.useFragmentCache && dom.canClone) {\n                    if (this.cachedFragment === null) {\n                      fragment = this.build(dom);\n                      if (this.hasRendered) {\n                        this.cachedFragment = fragment;\n                      } else {\n                        this.hasRendered = true;\n                      }\n                    }\n                    if (this.cachedFragment) {\n                      fragment = dom.cloneNode(this.cachedFragment, true);\n                    }\n                  } else {\n                    fragment = this.build(dom);\n                  }\n                  return fragment;\n                }\n              };\n            }());\n            var child1 = (function() {\n              return {\n                isHTMLBars: true,\n                revision: \"Ember@1.12.1\",\n                blockParams: 0,\n                cachedFragment: null,\n                hasRendered: false,\n                build: function build(dom) {\n                  var el0 = dom.createDocumentFragment();\n                  var el1 = dom.createTextNode(\"                                    \");\n                  dom.appendChild(el0, el1);\n                  var el1 = dom.createElement(\"time\");\n                  dom.setAttribute(el1,\"class\",\"date published\");\n                  var el2 = dom.createTextNode(\"\\n                                        Published \");\n                  dom.appendChild(el1, el2);\n                  var el2 = dom.createComment(\"\");\n                  dom.appendChild(el1, el2);\n                  var el2 = dom.createTextNode(\"\\n                                    \");\n                  dom.appendChild(el1, el2);\n                  dom.appendChild(el0, el1);\n                  var el1 = dom.createTextNode(\"\\n\");\n                  dom.appendChild(el0, el1);\n                  return el0;\n                },\n                render: function render(context, env, contextualElement) {\n                  var dom = env.dom;\n                  var hooks = env.hooks, get = hooks.get, concat = hooks.concat, attribute = hooks.attribute, inline = hooks.inline;\n                  dom.detectNamespace(contextualElement);\n                  var fragment;\n                  if (env.useFragmentCache && dom.canClone) {\n                    if (this.cachedFragment === null) {\n                      fragment = this.build(dom);\n                      if (this.hasRendered) {\n                        this.cachedFragment = fragment;\n                      } else {\n                        this.hasRendered = true;\n                      }\n                    }\n                    if (this.cachedFragment) {\n                      fragment = dom.cloneNode(this.cachedFragment, true);\n                    }\n                  } else {\n                    fragment = this.build(dom);\n                  }\n                  var element0 = dom.childAt(fragment, [1]);\n                  var morph0 = dom.createMorphAt(element0,1,1);\n                  var attrMorph0 = dom.createAttrMorph(element0, 'datetime');\n                  attribute(env, attrMorph0, element0, \"datetime\", concat(env, [get(env, context, \"post.model.published_at\")]));\n                  inline(env, morph0, context, \"gh-format-timeago\", [get(env, context, \"post.model.published_at\")], {});\n                  return fragment;\n                }\n              };\n            }());\n            return {\n              isHTMLBars: true,\n              revision: \"Ember@1.12.1\",\n              blockParams: 0,\n              cachedFragment: null,\n              hasRendered: false,\n              build: function build(dom) {\n                var el0 = dom.createDocumentFragment();\n                var el1 = dom.createComment(\"\");\n                dom.appendChild(el0, el1);\n                return el0;\n              },\n              render: function render(context, env, contextualElement) {\n                var dom = env.dom;\n                var hooks = env.hooks, get = hooks.get, block = hooks.block;\n                dom.detectNamespace(contextualElement);\n                var fragment;\n                if (env.useFragmentCache && dom.canClone) {\n                  if (this.cachedFragment === null) {\n                    fragment = this.build(dom);\n                    if (this.hasRendered) {\n                      this.cachedFragment = fragment;\n                    } else {\n                      this.hasRendered = true;\n                    }\n                  }\n                  if (this.cachedFragment) {\n                    fragment = dom.cloneNode(this.cachedFragment, true);\n                  }\n                } else {\n                  fragment = this.build(dom);\n                }\n                var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n                dom.insertBoundary(fragment, null);\n                dom.insertBoundary(fragment, 0);\n                block(env, morph0, context, \"if\", [get(env, context, \"post.model.page\")], {}, child0, child1);\n                return fragment;\n              }\n            };\n          }());\n          var child1 = (function() {\n            return {\n              isHTMLBars: true,\n              revision: \"Ember@1.12.1\",\n              blockParams: 0,\n              cachedFragment: null,\n              hasRendered: false,\n              build: function build(dom) {\n                var el0 = dom.createDocumentFragment();\n                var el1 = dom.createTextNode(\"                                \");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createElement(\"span\");\n                dom.setAttribute(el1,\"class\",\"draft\");\n                var el2 = dom.createTextNode(\"Draft\");\n                dom.appendChild(el1, el2);\n                dom.appendChild(el0, el1);\n                var el1 = dom.createTextNode(\"\\n\");\n                dom.appendChild(el0, el1);\n                return el0;\n              },\n              render: function render(context, env, contextualElement) {\n                var dom = env.dom;\n                dom.detectNamespace(contextualElement);\n                var fragment;\n                if (env.useFragmentCache && dom.canClone) {\n                  if (this.cachedFragment === null) {\n                    fragment = this.build(dom);\n                    if (this.hasRendered) {\n                      this.cachedFragment = fragment;\n                    } else {\n                      this.hasRendered = true;\n                    }\n                  }\n                  if (this.cachedFragment) {\n                    fragment = dom.cloneNode(this.cachedFragment, true);\n                  }\n                } else {\n                  fragment = this.build(dom);\n                }\n                return fragment;\n              }\n            };\n          }());\n          return {\n            isHTMLBars: true,\n            revision: \"Ember@1.12.1\",\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"                    \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"h3\");\n              dom.setAttribute(el1,\"class\",\"entry-title\");\n              var el2 = dom.createComment(\"\");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n                    \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"section\");\n              dom.setAttribute(el1,\"class\",\"entry-meta\");\n              var el2 = dom.createTextNode(\"\\n                        \");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createElement(\"span\");\n              dom.setAttribute(el2,\"class\",\"avatar\");\n              var el3 = dom.createTextNode(\"\\n                            \");\n              dom.appendChild(el2, el3);\n              var el3 = dom.createElement(\"img\");\n              dom.appendChild(el2, el3);\n              var el3 = dom.createTextNode(\"\\n                        \");\n              dom.appendChild(el2, el3);\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"\\n                        \");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createElement(\"span\");\n              dom.setAttribute(el2,\"class\",\"author\");\n              var el3 = dom.createComment(\"\");\n              dom.appendChild(el2, el3);\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"\\n                        \");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createElement(\"span\");\n              dom.setAttribute(el2,\"class\",\"status\");\n              var el3 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el2, el3);\n              var el3 = dom.createComment(\"\");\n              dom.appendChild(el2, el3);\n              var el3 = dom.createTextNode(\"                        \");\n              dom.appendChild(el2, el3);\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"\\n                    \");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, content = hooks.content, get = hooks.get, attribute = hooks.attribute, concat = hooks.concat, block = hooks.block;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var element1 = dom.childAt(fragment, [3]);\n              var element2 = dom.childAt(element1, [1]);\n              var element3 = dom.childAt(element2, [1]);\n              var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);\n              var attrMorph0 = dom.createAttrMorph(element2, 'style');\n              var attrMorph1 = dom.createAttrMorph(element3, 'src');\n              var attrMorph2 = dom.createAttrMorph(element3, 'title');\n              var morph1 = dom.createMorphAt(dom.childAt(element1, [3]),0,0);\n              var morph2 = dom.createMorphAt(dom.childAt(element1, [5]),1,1);\n              content(env, morph0, context, \"post.model.title\");\n              attribute(env, attrMorph0, element2, \"style\", get(env, context, \"post.authorAvatarBackground\"));\n              attribute(env, attrMorph1, element3, \"src\", concat(env, [get(env, context, \"post.authorAvatar\")]));\n              attribute(env, attrMorph2, element3, \"title\", concat(env, [get(env, context, \"post.authorName\")]));\n              content(env, morph1, context, \"post.authorName\");\n              block(env, morph2, context, \"if\", [get(env, context, \"post.isPublished\")], {}, child0, child1);\n              return fragment;\n            }\n          };\n        }());\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.12.1\",\n          blockParams: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createComment(\"\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement, blockArguments) {\n            var dom = env.dom;\n            var hooks = env.hooks, set = hooks.set, get = hooks.get, block = hooks.block;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n            dom.insertBoundary(fragment, null);\n            dom.insertBoundary(fragment, 0);\n            set(env, context, \"post\", blockArguments[0]);\n            block(env, morph0, context, \"link-to\", [\"posts.post\", get(env, context, \"post.model.id\")], {\"class\": \"permalink\", \"alternateActive\": get(env, context, \"view.active\"), \"title\": \"Edit this post\"}, child0, null);\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"        \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"ol\");\n          dom.setAttribute(el1,\"class\",\"posts-list\");\n          var el2 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createComment(\"\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"        \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);\n          block(env, morph0, context, \"each\", [get(env, context, \"controller\")], {\"itemController\": \"posts/post\", \"itemView\": \"post-item-view\", \"itemTagName\": \"li\"}, child0, null);\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"section\");\n        dom.setAttribute(el1,\"class\",\"gh-view content-view-container\");\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"header\");\n        dom.setAttribute(el2,\"class\",\"view-header\");\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createComment(\"\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"section\");\n        dom.setAttribute(el3,\"class\",\"view-actions\");\n        var el4 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createComment(\"\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"view-container\");\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"section\");\n        var el4 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createComment(\"\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"    \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"section\");\n        var el4 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createComment(\"\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, block = hooks.block, get = hooks.get, subexpr = hooks.subexpr, concat = hooks.concat, attribute = hooks.attribute, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element4 = dom.childAt(fragment, [0]);\n        var element5 = dom.childAt(element4, [1]);\n        var element6 = dom.childAt(element4, [3]);\n        var element7 = dom.childAt(element6, [1]);\n        var element8 = dom.childAt(element6, [3]);\n        var morph0 = dom.createMorphAt(element5,1,1);\n        var morph1 = dom.createMorphAt(dom.childAt(element5, [3]),1,1);\n        var morph2 = dom.createMorphAt(element7,1,1);\n        var attrMorph0 = dom.createAttrMorph(element7, 'class');\n        var morph3 = dom.createMorphAt(element8,1,1);\n        var attrMorph1 = dom.createAttrMorph(element8, 'class');\n        block(env, morph0, context, \"gh-view-title\", [], {\"openMobileMenu\": \"openMobileMenu\"}, child0, null);\n        block(env, morph1, context, \"link-to\", [\"editor.new\"], {\"class\": \"btn btn-green\", \"title\": \"New Post\"}, child1, null);\n        attribute(env, attrMorph0, element7, \"class\", concat(env, [\"content-list js-content-list \", subexpr(env, context, \"if\", [get(env, context, \"postListFocused\"), \"keyboard-focused\"], {})]));\n        block(env, morph2, context, \"view\", [\"paginated-scroll-box\"], {\"tagName\": \"section\", \"classNames\": \"content-list-content js-content-scrollbox\"}, child2, null);\n        attribute(env, attrMorph1, element8, \"class\", concat(env, [\"content-preview js-content-preview \", subexpr(env, context, \"if\", [get(env, context, \"postContentFocused\"), \"keyboard-focused\"], {})]));\n        content(env, morph3, context, \"outlet\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('ghost/templates/posts/index', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.12.1\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createElement(\"button\");\n            dom.setAttribute(el1,\"type\",\"button\");\n            dom.setAttribute(el1,\"class\",\"btn btn-green btn-lg\");\n            dom.setAttribute(el1,\"title\",\"New Post\");\n            var el2 = dom.createTextNode(\"Write a new Post\");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"class\",\"no-posts\");\n          var el2 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"h3\");\n          var el3 = dom.createTextNode(\"You Haven't Written Any Posts Yet!\");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createComment(\"\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(dom.childAt(fragment, [0]),3,3);\n          block(env, morph0, context, \"link-to\", [\"editor.new\"], {}, child0, null);\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n        dom.insertBoundary(fragment, null);\n        dom.insertBoundary(fragment, 0);\n        block(env, morph0, context, \"if\", [get(env, context, \"noPosts\")], {}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('ghost/templates/posts/post', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createElement(\"i\");\n          dom.setAttribute(el1,\"class\",\"icon-edit\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.12.1\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createComment(\"\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, content = hooks.content;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n            dom.insertBoundary(fragment, null);\n            dom.insertBoundary(fragment, 0);\n            content(env, morph0, context, \"model.title\");\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"class\",\"wrapper\");\n          var el2 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"h1\");\n          dom.setAttribute(el2,\"class\",\"content-preview-title\");\n          var el3 = dom.createComment(\"\");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createComment(\"\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, block = hooks.block, inline = hooks.inline;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element0 = dom.childAt(fragment, [1]);\n          var morph0 = dom.createMorphAt(dom.childAt(element0, [1]),0,0);\n          var morph1 = dom.createMorphAt(element0,3,3);\n          block(env, morph0, context, \"link-to\", [\"editor.edit\", get(env, context, \"model.id\")], {}, child0, null);\n          inline(env, morph1, context, \"gh-format-html\", [get(env, context, \"model.html\")], {});\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"section\");\n        dom.setAttribute(el1,\"class\",\"post-controls\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0]),1,1);\n        var morph1 = dom.createMorphAt(fragment,2,2,contextualElement);\n        dom.insertBoundary(fragment, null);\n        block(env, morph0, context, \"link-to\", [\"editor.edit\", get(env, context, \"model.id\")], {\"class\": \"btn btn-minor post-edit\"}, child0, null);\n        block(env, morph1, context, \"view\", [\"content-preview-content-view\"], {\"tagName\": \"section\"}, child1, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('ghost/templates/reset', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"section\");\n        dom.setAttribute(el1,\"class\",\"reset-box js-reset-box fade-in\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"form\");\n        dom.setAttribute(el2,\"id\",\"reset\");\n        dom.setAttribute(el2,\"class\",\"reset-form\");\n        dom.setAttribute(el2,\"method\",\"post\");\n        dom.setAttribute(el2,\"novalidate\",\"novalidate\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"div\");\n        dom.setAttribute(el3,\"class\",\"password-wrap\");\n        var el4 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createComment(\"\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"div\");\n        dom.setAttribute(el3,\"class\",\"password-wrap\");\n        var el4 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createComment(\"\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"button\");\n        dom.setAttribute(el3,\"class\",\"btn btn-blue\");\n        dom.setAttribute(el3,\"type\",\"submit\");\n        var el4 = dom.createTextNode(\"Reset Password\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, element = hooks.element, get = hooks.get, inline = hooks.inline, attribute = hooks.attribute;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element0 = dom.childAt(fragment, [0, 1]);\n        var element1 = dom.childAt(element0, [5]);\n        var morph0 = dom.createMorphAt(dom.childAt(element0, [1]),1,1);\n        var morph1 = dom.createMorphAt(dom.childAt(element0, [3]),1,1);\n        var attrMorph0 = dom.createAttrMorph(element1, 'disabled');\n        element(env, element0, context, \"action\", [\"submit\"], {\"on\": \"submit\"});\n        inline(env, morph0, context, \"input\", [], {\"value\": get(env, context, \"newPassword\"), \"class\": \"gh-input password\", \"type\": \"password\", \"placeholder\": \"Password\", \"name\": \"newpassword\", \"autofocus\": \"autofocus\"});\n        inline(env, morph1, context, \"input\", [], {\"value\": get(env, context, \"ne2Password\"), \"class\": \"gh-input password\", \"type\": \"password\", \"placeholder\": \"Confirm Password\", \"name\": \"ne2password\"});\n        attribute(env, attrMorph0, element1, \"disabled\", get(env, context, \"submitting\"));\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('ghost/templates/settings/apps', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"Apps\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.12.1\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createComment(\"\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\" - \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment(\"\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, content = hooks.content;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n            var morph1 = dom.createMorphAt(fragment,2,2,contextualElement);\n            dom.insertBoundary(fragment, null);\n            dom.insertBoundary(fragment, 0);\n            content(env, morph0, context, \"appController.model.package.name\");\n            content(env, morph1, context, \"appController.model.package.version\");\n            return fragment;\n          }\n        };\n      }());\n      var child1 = (function() {\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.12.1\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createComment(\"\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\" - package.json missing :(\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, content = hooks.content;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n            dom.insertBoundary(fragment, 0);\n            content(env, morph0, context, \"appController.model.name\");\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 1,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"        \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"tr\");\n          var el2 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"td\");\n          var el3 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createComment(\"\");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"td\");\n          var el3 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"button\");\n          dom.setAttribute(el3,\"type\",\"button\");\n          var el4 = dom.createTextNode(\"\\n                    \");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createComment(\"\");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement, blockArguments) {\n          var dom = env.dom;\n          var hooks = env.hooks, set = hooks.set, get = hooks.get, block = hooks.block, subexpr = hooks.subexpr, concat = hooks.concat, attribute = hooks.attribute, element = hooks.element, content = hooks.content;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element0 = dom.childAt(fragment, [1]);\n          var element1 = dom.childAt(element0, [3, 1]);\n          var morph0 = dom.createMorphAt(dom.childAt(element0, [1]),1,1);\n          var morph1 = dom.createMorphAt(element1,1,1);\n          var attrMorph0 = dom.createAttrMorph(element1, 'class');\n          set(env, context, \"appController\", blockArguments[0]);\n          block(env, morph0, context, \"if\", [get(env, context, \"appController.model.package\")], {}, child0, child1);\n          attribute(env, attrMorph0, element1, \"class\", concat(env, [\"btn js-button-active \", subexpr(env, context, \"if\", [get(env, context, \"activeClass\"), \"btn-red js-button-deactivate\"], {}), \" \", subexpr(env, context, \"if\", [get(env, context, \"inactiveClass\"), \"btn-green\"], {})]));\n          element(env, element1, context, \"action\", [get(env, context, \"toggleApp\"), get(env, context, \"appController\")], {});\n          content(env, morph1, context, \"appController.buttonText\");\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"header\");\n        dom.setAttribute(el1,\"class\",\"view-header\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"section\");\n        dom.setAttribute(el1,\"class\",\"view-content settings-apps\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"table\");\n        dom.setAttribute(el2,\"class\",\"js-apps\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"thead\");\n        var el4 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"th\");\n        var el5 = dom.createTextNode(\"App name\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"th\");\n        var el5 = dom.createTextNode(\"Status\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"tbody\");\n        var el4 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createComment(\"\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"        \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, block = hooks.block, get = hooks.get;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0]),1,1);\n        var morph1 = dom.createMorphAt(dom.childAt(fragment, [2, 1, 3]),1,1);\n        block(env, morph0, context, \"gh-view-title\", [], {\"openMobileMenu\": \"openMobileMenu\"}, child0, null);\n        block(env, morph1, context, \"each\", [get(env, context, \"model\")], {\"itemController\": \"settings/app\"}, child1, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('ghost/templates/settings/code-injection', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"Code Injection\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"header\");\n        dom.setAttribute(el1,\"class\",\"view-header\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"section\");\n        dom.setAttribute(el2,\"class\",\"view-actions\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"button\");\n        dom.setAttribute(el3,\"type\",\"button\");\n        dom.setAttribute(el3,\"class\",\"btn btn-blue\");\n        var el4 = dom.createTextNode(\"Save\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"section\");\n        dom.setAttribute(el1,\"class\",\"view-content\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"form\");\n        dom.setAttribute(el2,\"id\",\"settings-code\");\n        dom.setAttribute(el2,\"novalidate\",\"novalidate\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"fieldset\");\n        var el4 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"p\");\n        var el5 = dom.createTextNode(\"\\n                Ghost allows you to inject code into the top and bottom of your theme files without editing them. This allows for quick modifications to insert useful things like tracking codes and meta tags.\\n            \");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"div\");\n        dom.setAttribute(el4,\"class\",\"form-group settings-code\");\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"label\");\n        dom.setAttribute(el5,\"for\",\"ghost-head\");\n        var el6 = dom.createTextNode(\"Blog Header\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"p\");\n        var el6 = dom.createTextNode(\"Code here will be injected into the \");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createElement(\"code\");\n        var el7 = dom.createTextNode(\"{{ghost_head}}\");\n        dom.appendChild(el6, el7);\n        dom.appendChild(el5, el6);\n        var el6 = dom.createTextNode(\" tag on every page of your blog\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createComment(\"\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"div\");\n        dom.setAttribute(el4,\"class\",\"form-group settings-code\");\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"label\");\n        dom.setAttribute(el5,\"for\",\"ghost-foot\");\n        var el6 = dom.createTextNode(\"Blog Footer\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"p\");\n        var el6 = dom.createTextNode(\"Code here will be injected into the \");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createElement(\"code\");\n        var el7 = dom.createTextNode(\"{{ghost_foot}}\");\n        dom.appendChild(el6, el7);\n        dom.appendChild(el5, el6);\n        var el6 = dom.createTextNode(\" tag on every page of your blog\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createComment(\"\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, block = hooks.block, element = hooks.element, get = hooks.get, inline = hooks.inline;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element0 = dom.childAt(fragment, [0]);\n        var element1 = dom.childAt(element0, [3, 1]);\n        var element2 = dom.childAt(fragment, [2, 1, 1]);\n        var morph0 = dom.createMorphAt(element0,1,1);\n        var morph1 = dom.createMorphAt(dom.childAt(element2, [3]),5,5);\n        var morph2 = dom.createMorphAt(dom.childAt(element2, [5]),5,5);\n        block(env, morph0, context, \"gh-view-title\", [], {\"openMobileMenu\": \"openMobileMenu\"}, child0, null);\n        element(env, element1, context, \"action\", [\"save\"], {});\n        inline(env, morph1, context, \"gh-cm-editor\", [], {\"id\": \"ghost-head\", \"class\": \"gh-input settings-code-editor\", \"name\": \"codeInjection[ghost_head]\", \"type\": \"text\", \"value\": get(env, context, \"model.ghost_head\")});\n        inline(env, morph2, context, \"gh-cm-editor\", [], {\"id\": \"ghost-foot\", \"class\": \"gh-input settings-code-editor\", \"name\": \"codeInjection[ghost_foot]\", \"type\": \"text\", \"value\": get(env, context, \"model.ghost_foot\")});\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('ghost/templates/settings/general', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"General\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"                \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"img\");\n          dom.setAttribute(el1,\"class\",\"blog-logo\");\n          dom.setAttribute(el1,\"alt\",\"logo\");\n          dom.setAttribute(el1,\"role\",\"button\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, concat = hooks.concat, attribute = hooks.attribute, element = hooks.element;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element3 = dom.childAt(fragment, [1]);\n          var attrMorph0 = dom.createAttrMorph(element3, 'src');\n          attribute(env, attrMorph0, element3, \"src\", concat(env, [get(env, context, \"model.logo\")]));\n          element(env, element3, context, \"action\", [\"openModal\", \"upload\", get(env, context, \"this\"), \"logo\"], {});\n          return fragment;\n        }\n      };\n    }());\n    var child2 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"                \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"button\");\n          dom.setAttribute(el1,\"type\",\"button\");\n          dom.setAttribute(el1,\"class\",\"btn btn-green js-modal-logo\");\n          var el2 = dom.createTextNode(\"Upload Image\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, element = hooks.element;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element2 = dom.childAt(fragment, [1]);\n          element(env, element2, context, \"action\", [\"openModal\", \"upload\", get(env, context, \"this\"), \"logo\"], {});\n          return fragment;\n        }\n      };\n    }());\n    var child3 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"                \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"img\");\n          dom.setAttribute(el1,\"class\",\"blog-cover\");\n          dom.setAttribute(el1,\"alt\",\"cover photo\");\n          dom.setAttribute(el1,\"role\",\"button\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, concat = hooks.concat, attribute = hooks.attribute, element = hooks.element;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element1 = dom.childAt(fragment, [1]);\n          var attrMorph0 = dom.createAttrMorph(element1, 'src');\n          attribute(env, attrMorph0, element1, \"src\", concat(env, [get(env, context, \"model.cover\")]));\n          element(env, element1, context, \"action\", [\"openModal\", \"upload\", get(env, context, \"this\"), \"cover\"], {});\n          return fragment;\n        }\n      };\n    }());\n    var child4 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"                \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"button\");\n          dom.setAttribute(el1,\"type\",\"button\");\n          dom.setAttribute(el1,\"class\",\"btn btn-green js-modal-cover\");\n          var el2 = dom.createTextNode(\"Upload Image\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, element = hooks.element;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element0 = dom.childAt(fragment, [1]);\n          element(env, element0, context, \"action\", [\"openModal\", \"upload\", get(env, context, \"this\"), \"cover\"], {});\n          return fragment;\n        }\n      };\n    }());\n    var child5 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"            \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"class\",\"form-group\");\n          var el2 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createComment(\"\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"p\");\n          var el3 = dom.createTextNode(\"This password will be needed to access your blog. All search engine optimization and social features are now disabled. This password is stored in plaintext.\");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);\n          inline(env, morph0, context, \"input\", [], {\"name\": \"general[password]\", \"type\": \"text\", \"value\": get(env, context, \"model.password\")});\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"header\");\n        dom.setAttribute(el1,\"class\",\"view-header\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"section\");\n        dom.setAttribute(el2,\"class\",\"view-actions\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"button\");\n        dom.setAttribute(el3,\"type\",\"button\");\n        dom.setAttribute(el3,\"class\",\"btn btn-blue\");\n        var el4 = dom.createTextNode(\"Save\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"section\");\n        dom.setAttribute(el1,\"class\",\"view-content\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"form\");\n        dom.setAttribute(el2,\"id\",\"settings-general\");\n        dom.setAttribute(el2,\"novalidate\",\"novalidate\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"fieldset\");\n        var el4 = dom.createTextNode(\"\\n\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"div\");\n        dom.setAttribute(el4,\"class\",\"form-group\");\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"label\");\n        dom.setAttribute(el5,\"for\",\"blog-title\");\n        var el6 = dom.createTextNode(\"Blog Title\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createComment(\"\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"p\");\n        var el6 = dom.createTextNode(\"The name of your blog\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"div\");\n        dom.setAttribute(el4,\"class\",\"form-group description-container\");\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"label\");\n        dom.setAttribute(el5,\"for\",\"blog-description\");\n        var el6 = dom.createTextNode(\"Blog Description\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createComment(\"\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"p\");\n        var el6 = dom.createTextNode(\"\\n                    Describe what your blog is about\\n                    \");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createComment(\"\");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n\\n            \");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"div\");\n        dom.setAttribute(el3,\"class\",\"form-group\");\n        var el4 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"label\");\n        var el5 = dom.createTextNode(\"Blog Logo\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createComment(\"\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"p\");\n        var el5 = dom.createTextNode(\"Display a sexy logo for your publication\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"div\");\n        dom.setAttribute(el3,\"class\",\"form-group\");\n        var el4 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"label\");\n        var el5 = dom.createTextNode(\"Blog Cover\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createComment(\"\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"p\");\n        var el5 = dom.createTextNode(\"Display a cover image on your site\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"fieldset\");\n        var el4 = dom.createTextNode(\"\\n\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"div\");\n        dom.setAttribute(el4,\"class\",\"form-group\");\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"label\");\n        dom.setAttribute(el5,\"for\",\"postsPerPage\");\n        var el6 = dom.createTextNode(\"Posts per page\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createComment(\"\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"p\");\n        var el6 = dom.createTextNode(\"How many posts should be displayed on each page\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"div\");\n        dom.setAttribute(el4,\"class\",\"form-group for-checkbox\");\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"label\");\n        dom.setAttribute(el5,\"for\",\"permalinks\");\n        var el6 = dom.createTextNode(\"Dated Permalinks\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"label\");\n        dom.setAttribute(el5,\"class\",\"checkbox\");\n        dom.setAttribute(el5,\"for\",\"permalinks\");\n        var el6 = dom.createTextNode(\"\\n                    \");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createComment(\"\");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createTextNode(\"\\n                    \");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createElement(\"span\");\n        dom.setAttribute(el6,\"class\",\"input-toggle-component\");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createTextNode(\"\\n                    \");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createElement(\"p\");\n        var el7 = dom.createTextNode(\"Include the date in your post URLs\");\n        dom.appendChild(el6, el7);\n        dom.appendChild(el5, el6);\n        var el6 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"div\");\n        dom.setAttribute(el4,\"class\",\"form-group for-select\");\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"label\");\n        dom.setAttribute(el5,\"for\",\"activeTheme\");\n        var el6 = dom.createTextNode(\"Theme\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"span\");\n        dom.setAttribute(el5,\"class\",\"gh-select\");\n        dom.setAttribute(el5,\"tabindex\",\"0\");\n        var el6 = dom.createTextNode(\"\\n                   \");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createComment(\"\");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createTextNode(\"\\n               \");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"p\");\n        var el6 = dom.createTextNode(\"Select a theme for your blog\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"div\");\n        dom.setAttribute(el4,\"class\",\"form-group for-checkbox\");\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"label\");\n        dom.setAttribute(el5,\"for\",\"isPrivate\");\n        var el6 = dom.createTextNode(\"Make this blog private\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"label\");\n        dom.setAttribute(el5,\"class\",\"checkbox\");\n        dom.setAttribute(el5,\"for\",\"isPrivate\");\n        var el6 = dom.createTextNode(\"\\n                    \");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createComment(\"\");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createTextNode(\"\\n                    \");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createElement(\"span\");\n        dom.setAttribute(el6,\"class\",\"input-toggle-component\");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createTextNode(\"\\n                    \");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createElement(\"p\");\n        var el7 = dom.createTextNode(\"Enable password protection\");\n        dom.appendChild(el6, el7);\n        dom.appendChild(el5, el6);\n        var el6 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createComment(\"\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"        \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, block = hooks.block, element = hooks.element, get = hooks.get, inline = hooks.inline, concat = hooks.concat, attribute = hooks.attribute;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element4 = dom.childAt(fragment, [0]);\n        var element5 = dom.childAt(element4, [3, 1]);\n        var element6 = dom.childAt(fragment, [2, 1]);\n        var element7 = dom.childAt(element6, [1]);\n        var element8 = dom.childAt(element7, [3]);\n        var element9 = dom.childAt(element6, [7]);\n        var element10 = dom.childAt(element9, [5, 3]);\n        var morph0 = dom.createMorphAt(element4,1,1);\n        var morph1 = dom.createMorphAt(dom.childAt(element7, [1]),3,3);\n        var morph2 = dom.createMorphAt(element8,3,3);\n        var morph3 = dom.createMorphAt(dom.childAt(element8, [5]),1,1);\n        var morph4 = dom.createMorphAt(dom.childAt(element6, [3]),3,3);\n        var morph5 = dom.createMorphAt(dom.childAt(element6, [5]),3,3);\n        var morph6 = dom.createMorphAt(dom.childAt(element9, [1]),3,3);\n        var morph7 = dom.createMorphAt(dom.childAt(element9, [3, 3]),1,1);\n        var morph8 = dom.createMorphAt(element10,1,1);\n        var attrMorph0 = dom.createAttrMorph(element10, 'data-select-text');\n        var morph9 = dom.createMorphAt(dom.childAt(element9, [7, 3]),1,1);\n        var morph10 = dom.createMorphAt(element9,9,9);\n        block(env, morph0, context, \"gh-view-title\", [], {\"openMobileMenu\": \"openMobileMenu\"}, child0, null);\n        element(env, element5, context, \"action\", [\"save\"], {});\n        inline(env, morph1, context, \"input\", [], {\"id\": \"blog-title\", \"class\": \"gh-input\", \"name\": \"general[title]\", \"type\": \"text\", \"value\": get(env, context, \"model.title\")});\n        inline(env, morph2, context, \"textarea\", [], {\"id\": \"blog-description\", \"class\": \"gh-input\", \"name\": \"general[description]\", \"value\": get(env, context, \"model.description\")});\n        inline(env, morph3, context, \"gh-count-characters\", [get(env, context, \"model.description\")], {});\n        block(env, morph4, context, \"if\", [get(env, context, \"model.logo\")], {}, child1, child2);\n        block(env, morph5, context, \"if\", [get(env, context, \"model.cover\")], {}, child3, child4);\n        inline(env, morph6, context, \"input\", [], {\"id\": \"postsPerPage\", \"class\": \"gh-input\", \"name\": \"general[postsPerPage]\", \"focus-out\": \"checkPostsPerPage\", \"value\": get(env, context, \"model.postsPerPage\"), \"min\": \"1\", \"max\": \"1000\", \"type\": \"number\", \"pattern\": \"[0-9]*\"});\n        inline(env, morph7, context, \"input\", [], {\"id\": \"permalinks\", \"class\": \"gh-input\", \"name\": \"general[permalinks]\", \"type\": \"checkbox\", \"checked\": get(env, context, \"isDatedPermalinks\")});\n        attribute(env, attrMorph0, element10, \"data-select-text\", concat(env, [get(env, context, \"selectedTheme.label\")]));\n        inline(env, morph8, context, \"view\", [\"select\"], {\"id\": \"activeTheme\", \"name\": \"general[activeTheme]\", \"content\": get(env, context, \"themes\"), \"optionValuePath\": \"content.name\", \"optionLabelPath\": \"content.label\", \"value\": get(env, context, \"model.activeTheme\"), \"selection\": get(env, context, \"selectedTheme\")});\n        inline(env, morph9, context, \"input\", [], {\"id\": \"isPrivate\", \"name\": \"general[isPrivate]\", \"type\": \"checkbox\", \"checked\": get(env, context, \"model.isPrivate\")});\n        block(env, morph10, context, \"if\", [get(env, context, \"model.isPrivate\")], {}, child5, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('ghost/templates/settings/labs', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"Labs\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"        \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"fieldset\");\n          var el2 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"div\");\n          dom.setAttribute(el2,\"class\",\"form-group\");\n          var el3 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"label\");\n          var el4 = dom.createTextNode(\"Import\");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createComment(\"\");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createComment(\"\");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"p\");\n          var el4 = dom.createTextNode(\"Import from another Ghost installation. If you import a user, this will replace the current user & log you out.\");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, inline = hooks.inline, get = hooks.get;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element0 = dom.childAt(fragment, [1, 1]);\n          var morph0 = dom.createMorphAt(element0,3,3);\n          var morph1 = dom.createMorphAt(element0,5,5);\n          inline(env, morph0, context, \"partial\", [\"import-errors\"], {});\n          inline(env, morph1, context, \"gh-file-upload\", [], {\"id\": \"importfile\", \"uploadButtonText\": get(env, context, \"uploadButtonText\")});\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"header\");\n        dom.setAttribute(el1,\"class\",\"view-header\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"section\");\n        dom.setAttribute(el1,\"class\",\"view-content settings-debug\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"p\");\n        var el3 = dom.createElement(\"strong\");\n        var el4 = dom.createTextNode(\"Important note:\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\" Labs is a testing ground for experimental features which aren't quite ready for primetime. They may change, break or inexplicably disappear at any time.\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"form\");\n        dom.setAttribute(el2,\"id\",\"settings-export\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"fieldset\");\n        var el4 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"div\");\n        dom.setAttribute(el4,\"class\",\"form-group\");\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"label\");\n        var el6 = dom.createTextNode(\"Export\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"button\");\n        dom.setAttribute(el5,\"type\",\"button\");\n        dom.setAttribute(el5,\"class\",\"btn btn-blue\");\n        var el6 = dom.createTextNode(\"Export\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"p\");\n        var el6 = dom.createTextNode(\"Export the blog settings and data.\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"form\");\n        dom.setAttribute(el2,\"id\",\"settings-resetdb\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"fieldset\");\n        var el4 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"div\");\n        dom.setAttribute(el4,\"class\",\"form-group\");\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"label\");\n        var el6 = dom.createTextNode(\"Delete all Content\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"button\");\n        dom.setAttribute(el5,\"type\",\"button\");\n        dom.setAttribute(el5,\"class\",\"btn btn-red js-delete\");\n        var el6 = dom.createTextNode(\"Delete\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"p\");\n        var el6 = dom.createTextNode(\"Delete all posts and tags from the database.\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"form\");\n        dom.setAttribute(el2,\"id\",\"settings-testmail\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"fieldset\");\n        var el4 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"div\");\n        dom.setAttribute(el4,\"class\",\"form-group\");\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"label\");\n        var el6 = dom.createTextNode(\"Send a test email\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"button\");\n        dom.setAttribute(el5,\"type\",\"button\");\n        dom.setAttribute(el5,\"id\",\"sendtestmail\");\n        dom.setAttribute(el5,\"class\",\"btn btn-blue\");\n        var el6 = dom.createTextNode(\"Send\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"p\");\n        var el6 = dom.createTextNode(\"Sends a test email to your address.\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, block = hooks.block, element = hooks.element;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element1 = dom.childAt(fragment, [2]);\n        var element2 = dom.childAt(element1, [3, 1, 1, 3]);\n        var element3 = dom.childAt(element1, [7, 1, 1, 3]);\n        var element4 = dom.childAt(element1, [9, 1, 1, 3]);\n        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0]),1,1);\n        var morph1 = dom.createMorphAt(element1,5,5);\n        block(env, morph0, context, \"gh-view-title\", [], {\"openMobileMenu\": \"openMobileMenu\"}, child0, null);\n        element(env, element2, context, \"action\", [\"exportData\"], {});\n        block(env, morph1, context, \"gh-form\", [], {\"id\": \"settings-import\", \"enctype\": \"multipart/form-data\"}, child1, null);\n        element(env, element3, context, \"action\", [\"openModal\", \"deleteAll\"], {});\n        element(env, element4, context, \"action\", [\"sendTestEmail\"], {});\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('ghost/templates/settings/navigation', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"Navigation\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 1,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"            \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement, blockArguments) {\n          var dom = env.dom;\n          var hooks = env.hooks, set = hooks.set, get = hooks.get, inline = hooks.inline;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n          set(env, context, \"navItem\", blockArguments[0]);\n          inline(env, morph0, context, \"gh-navitem\", [], {\"navItem\": get(env, context, \"navItem\"), \"baseUrl\": get(env, context, \"blogUrl\"), \"addItem\": \"addItem\", \"deleteItem\": \"deleteItem\", \"updateUrl\": \"updateUrl\"});\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"header\");\n        dom.setAttribute(el1,\"class\",\"view-header\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"section\");\n        dom.setAttribute(el2,\"class\",\"view-actions\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"button\");\n        dom.setAttribute(el3,\"type\",\"button\");\n        dom.setAttribute(el3,\"class\",\"btn btn-blue\");\n        var el4 = dom.createTextNode(\"Save\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"section\");\n        dom.setAttribute(el1,\"class\",\"view-container\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"form\");\n        dom.setAttribute(el2,\"id\",\"settings-navigation\");\n        dom.setAttribute(el2,\"class\",\"gh-blognav js-gh-blognav\");\n        dom.setAttribute(el2,\"novalidate\",\"novalidate\");\n        var el3 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createComment(\"\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, block = hooks.block, element = hooks.element, get = hooks.get;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element0 = dom.childAt(fragment, [0]);\n        var element1 = dom.childAt(element0, [3, 1]);\n        var morph0 = dom.createMorphAt(element0,1,1);\n        var morph1 = dom.createMorphAt(dom.childAt(fragment, [2, 1]),1,1);\n        block(env, morph0, context, \"gh-view-title\", [], {\"openMobileMenu\": \"openMobileMenu\"}, child0, null);\n        element(env, element1, context, \"action\", [\"save\"], {});\n        block(env, morph1, context, \"each\", [get(env, context, \"navigationItems\")], {}, child1, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('ghost/templates/settings/tags', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"Tags\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 1,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"        \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"class\",\"settings-tag\");\n          var el2 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"button\");\n          dom.setAttribute(el2,\"class\",\"tag-edit-button\");\n          var el3 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"span\");\n          dom.setAttribute(el3,\"class\",\"tag-title\");\n          var el4 = dom.createComment(\"\");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"span\");\n          dom.setAttribute(el3,\"class\",\"label label-default\");\n          var el4 = dom.createTextNode(\"/\");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createComment(\"\");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"p\");\n          dom.setAttribute(el3,\"class\",\"tag-description\");\n          var el4 = dom.createComment(\"\");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"span\");\n          dom.setAttribute(el3,\"class\",\"tags-count\");\n          var el4 = dom.createComment(\"\");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement, blockArguments) {\n          var dom = env.dom;\n          var hooks = env.hooks, set = hooks.set, get = hooks.get, element = hooks.element, content = hooks.content;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element0 = dom.childAt(fragment, [1, 1]);\n          var morph0 = dom.createMorphAt(dom.childAt(element0, [1]),0,0);\n          var morph1 = dom.createMorphAt(dom.childAt(element0, [3]),1,1);\n          var morph2 = dom.createMorphAt(dom.childAt(element0, [5]),0,0);\n          var morph3 = dom.createMorphAt(dom.childAt(element0, [7]),0,0);\n          set(env, context, \"tag\", blockArguments[0]);\n          element(env, element0, context, \"action\", [\"editTag\", get(env, context, \"tag\")], {});\n          content(env, morph0, context, \"tag.name\");\n          content(env, morph1, context, \"tag.slug\");\n          content(env, morph2, context, \"tag.description\");\n          content(env, morph3, context, \"tag.post_count\");\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"header\");\n        dom.setAttribute(el1,\"class\",\"view-header\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"section\");\n        dom.setAttribute(el2,\"class\",\"view-actions\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"button\");\n        dom.setAttribute(el3,\"type\",\"button\");\n        dom.setAttribute(el3,\"class\",\"btn btn-green\");\n        var el4 = dom.createTextNode(\"New Tag\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"section\");\n        dom.setAttribute(el1,\"class\",\"view-container settings-tags\");\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, block = hooks.block, element = hooks.element, get = hooks.get;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element1 = dom.childAt(fragment, [0]);\n        var element2 = dom.childAt(element1, [3, 1]);\n        var morph0 = dom.createMorphAt(element1,1,1);\n        var morph1 = dom.createMorphAt(dom.childAt(fragment, [2]),1,1);\n        block(env, morph0, context, \"gh-view-title\", [], {\"openMobileMenu\": \"openMobileMenu\"}, child0, null);\n        element(env, element2, context, \"action\", [\"newTag\"], {});\n        block(env, morph1, context, \"each\", [get(env, context, \"tags\")], {}, child1, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('ghost/templates/settings/tags/settings-menu', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.12.1\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"                        \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"button\");\n            dom.setAttribute(el1,\"type\",\"button\");\n            var el2 = dom.createTextNode(\"\\n                            \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"b\");\n            var el3 = dom.createTextNode(\"Meta Data\");\n            dom.appendChild(el2, el3);\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n                            \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"span\");\n            var el3 = dom.createTextNode(\"Extra content for SEO and social media.\");\n            dom.appendChild(el2, el3);\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n                        \");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            return fragment;\n          }\n        };\n      }());\n      var child1 = (function() {\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.12.1\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"                    \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"button\");\n            dom.setAttribute(el1,\"type\",\"button\");\n            dom.setAttribute(el1,\"class\",\"btn btn-link btn-sm tag-delete-button\");\n            var el2 = dom.createElement(\"i\");\n            dom.setAttribute(el2,\"class\",\"icon-trash\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\" Delete Tag\");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, element = hooks.element;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var element5 = dom.childAt(fragment, [1]);\n            element(env, element5, context, \"action\", [\"openModal\", \"delete-tag\", get(env, context, \"activeTag\")], {});\n            return fragment;\n          }\n        };\n      }());\n      var child2 = (function() {\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.12.1\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"            \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"div\");\n            dom.setAttribute(el1,\"class\",\"settings-menu-header subview\");\n            var el2 = dom.createTextNode(\"\\n                \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"button\");\n            dom.setAttribute(el2,\"class\",\"back icon-arrow-left settings-menu-header-action\");\n            var el3 = dom.createElement(\"span\");\n            dom.setAttribute(el3,\"class\",\"hidden\");\n            var el4 = dom.createTextNode(\"Back\");\n            dom.appendChild(el3, el4);\n            dom.appendChild(el2, el3);\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n                \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"h4\");\n            var el3 = dom.createTextNode(\"Meta Data\");\n            dom.appendChild(el2, el3);\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n                \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"div\");\n            dom.setAttribute(el2,\"style\",\"width:23px;\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n            \");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\\n            \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"div\");\n            dom.setAttribute(el1,\"class\",\"settings-menu-content\");\n            var el2 = dom.createTextNode(\"\\n                \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"form\");\n            var el3 = dom.createTextNode(\"\\n                \");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createElement(\"div\");\n            dom.setAttribute(el3,\"class\",\"form-group\");\n            var el4 = dom.createTextNode(\"\\n                    \");\n            dom.appendChild(el3, el4);\n            var el4 = dom.createElement(\"label\");\n            dom.setAttribute(el4,\"for\",\"meta-title\");\n            var el5 = dom.createTextNode(\"Meta Title\");\n            dom.appendChild(el4, el5);\n            dom.appendChild(el3, el4);\n            var el4 = dom.createTextNode(\"\\n                    \");\n            dom.appendChild(el3, el4);\n            var el4 = dom.createComment(\"\");\n            dom.appendChild(el3, el4);\n            var el4 = dom.createTextNode(\"\\n                    \");\n            dom.appendChild(el3, el4);\n            var el4 = dom.createElement(\"p\");\n            var el5 = dom.createTextNode(\"Recommended: \");\n            dom.appendChild(el4, el5);\n            var el5 = dom.createElement(\"b\");\n            var el6 = dom.createTextNode(\"70\");\n            dom.appendChild(el5, el6);\n            dom.appendChild(el4, el5);\n            var el5 = dom.createTextNode(\" characters. You’ve used \");\n            dom.appendChild(el4, el5);\n            var el5 = dom.createComment(\"\");\n            dom.appendChild(el4, el5);\n            dom.appendChild(el3, el4);\n            var el4 = dom.createTextNode(\"\\n                \");\n            dom.appendChild(el3, el4);\n            dom.appendChild(el2, el3);\n            var el3 = dom.createTextNode(\"\\n\\n                \");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createElement(\"div\");\n            dom.setAttribute(el3,\"class\",\"form-group\");\n            var el4 = dom.createTextNode(\"\\n                    \");\n            dom.appendChild(el3, el4);\n            var el4 = dom.createElement(\"label\");\n            dom.setAttribute(el4,\"for\",\"meta-description\");\n            var el5 = dom.createTextNode(\"Meta Description\");\n            dom.appendChild(el4, el5);\n            dom.appendChild(el3, el4);\n            var el4 = dom.createTextNode(\"\\n                    \");\n            dom.appendChild(el3, el4);\n            var el4 = dom.createComment(\"\");\n            dom.appendChild(el3, el4);\n            var el4 = dom.createTextNode(\"\\n                    \");\n            dom.appendChild(el3, el4);\n            var el4 = dom.createElement(\"p\");\n            var el5 = dom.createTextNode(\"Recommended: \");\n            dom.appendChild(el4, el5);\n            var el5 = dom.createElement(\"b\");\n            var el6 = dom.createTextNode(\"156\");\n            dom.appendChild(el5, el6);\n            dom.appendChild(el4, el5);\n            var el5 = dom.createTextNode(\" characters. You’ve used \");\n            dom.appendChild(el4, el5);\n            var el5 = dom.createComment(\"\");\n            dom.appendChild(el4, el5);\n            dom.appendChild(el3, el4);\n            var el4 = dom.createTextNode(\"\\n                \");\n            dom.appendChild(el3, el4);\n            dom.appendChild(el2, el3);\n            var el3 = dom.createTextNode(\"\\n\\n                \");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createElement(\"div\");\n            dom.setAttribute(el3,\"class\",\"form-group\");\n            var el4 = dom.createTextNode(\"\\n                    \");\n            dom.appendChild(el3, el4);\n            var el4 = dom.createElement(\"label\");\n            var el5 = dom.createTextNode(\"Search Engine Result Preview\");\n            dom.appendChild(el4, el5);\n            dom.appendChild(el3, el4);\n            var el4 = dom.createTextNode(\"\\n                    \");\n            dom.appendChild(el3, el4);\n            var el4 = dom.createElement(\"div\");\n            dom.setAttribute(el4,\"class\",\"seo-preview\");\n            var el5 = dom.createTextNode(\"\\n                        \");\n            dom.appendChild(el4, el5);\n            var el5 = dom.createElement(\"div\");\n            dom.setAttribute(el5,\"class\",\"seo-preview-title\");\n            var el6 = dom.createComment(\"\");\n            dom.appendChild(el5, el6);\n            dom.appendChild(el4, el5);\n            var el5 = dom.createTextNode(\"\\n                        \");\n            dom.appendChild(el4, el5);\n            var el5 = dom.createElement(\"div\");\n            dom.setAttribute(el5,\"class\",\"seo-preview-link\");\n            var el6 = dom.createComment(\"\");\n            dom.appendChild(el5, el6);\n            dom.appendChild(el4, el5);\n            var el5 = dom.createTextNode(\"\\n                        \");\n            dom.appendChild(el4, el5);\n            var el5 = dom.createElement(\"div\");\n            dom.setAttribute(el5,\"class\",\"seo-preview-description\");\n            var el6 = dom.createComment(\"\");\n            dom.appendChild(el5, el6);\n            dom.appendChild(el4, el5);\n            var el5 = dom.createTextNode(\"\\n                    \");\n            dom.appendChild(el4, el5);\n            dom.appendChild(el3, el4);\n            var el4 = dom.createTextNode(\"\\n                \");\n            dom.appendChild(el3, el4);\n            dom.appendChild(el2, el3);\n            var el3 = dom.createTextNode(\"\\n                \");\n            dom.appendChild(el2, el3);\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n            \");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, element = hooks.element, get = hooks.get, inline = hooks.inline, content = hooks.content;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var element0 = dom.childAt(fragment, [1, 1]);\n            var element1 = dom.childAt(fragment, [3, 1]);\n            var element2 = dom.childAt(element1, [1]);\n            var element3 = dom.childAt(element1, [3]);\n            var element4 = dom.childAt(element1, [5, 3]);\n            var morph0 = dom.createMorphAt(element2,3,3);\n            var morph1 = dom.createMorphAt(dom.childAt(element2, [5]),3,3);\n            var morph2 = dom.createMorphAt(element3,3,3);\n            var morph3 = dom.createMorphAt(dom.childAt(element3, [5]),3,3);\n            var morph4 = dom.createMorphAt(dom.childAt(element4, [1]),0,0);\n            var morph5 = dom.createMorphAt(dom.childAt(element4, [3]),0,0);\n            var morph6 = dom.createMorphAt(dom.childAt(element4, [5]),0,0);\n            element(env, element0, context, \"action\", [\"closeSubview\"], {});\n            inline(env, morph0, context, \"gh-input\", [], {\"class\": \"gh-input\", \"type\": \"text\", \"value\": get(env, context, \"activeTagMetaTitleScratch\"), \"focus-out\": \"saveActiveTagMetaTitle\"});\n            inline(env, morph1, context, \"gh-count-down-characters\", [get(env, context, \"activeTagMetaTitleScratch\"), 70], {});\n            inline(env, morph2, context, \"gh-textarea\", [], {\"class\": \"gh-input\", \"value\": get(env, context, \"activeTagMetaDescriptionScratch\"), \"focus-out\": \"saveActiveTagMetaDescription\"});\n            inline(env, morph3, context, \"gh-count-down-characters\", [get(env, context, \"activeTagMetaDescriptionScratch\"), 156], {});\n            content(env, morph4, context, \"seoTitle\");\n            content(env, morph5, context, \"seoURL\");\n            content(env, morph6, context, \"seoDescription\");\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"div\");\n          var el2 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"div\");\n          dom.setAttribute(el2,\"class\",\"settings-menu-header\");\n          var el3 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"h4\");\n          var el4 = dom.createTextNode(\"Tag Settings\");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"button\");\n          dom.setAttribute(el3,\"class\",\"close icon-x settings-menu-header-action\");\n          var el4 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createElement(\"span\");\n          dom.setAttribute(el4,\"class\",\"hidden\");\n          var el5 = dom.createTextNode(\"Close\");\n          dom.appendChild(el4, el5);\n          dom.appendChild(el3, el4);\n          var el4 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"div\");\n          dom.setAttribute(el2,\"class\",\"settings-menu-content\");\n          var el3 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createComment(\"\");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"form\");\n          var el4 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createElement(\"div\");\n          dom.setAttribute(el4,\"class\",\"form-group\");\n          var el5 = dom.createTextNode(\"\\n                    \");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createElement(\"label\");\n          var el6 = dom.createTextNode(\"Name\");\n          dom.appendChild(el5, el6);\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n                    \");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createComment(\"\");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el4, el5);\n          dom.appendChild(el3, el4);\n          var el4 = dom.createTextNode(\"\\n\\n                \");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createElement(\"div\");\n          dom.setAttribute(el4,\"class\",\"form-group\");\n          var el5 = dom.createTextNode(\"\\n                    \");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createElement(\"label\");\n          var el6 = dom.createTextNode(\"URL\");\n          dom.appendChild(el5, el6);\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n                    \");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createComment(\"\");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n                    \");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createComment(\"\");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el4, el5);\n          dom.appendChild(el3, el4);\n          var el4 = dom.createTextNode(\"\\n\\n                \");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createElement(\"div\");\n          dom.setAttribute(el4,\"class\",\"form-group\");\n          var el5 = dom.createTextNode(\"\\n                    \");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createElement(\"label\");\n          var el6 = dom.createTextNode(\"Description\");\n          dom.appendChild(el5, el6);\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n                    \");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createComment(\"\");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el4, el5);\n          dom.appendChild(el3, el4);\n          var el4 = dom.createTextNode(\"\\n\\n                \");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createElement(\"ul\");\n          dom.setAttribute(el4,\"class\",\"nav-list nav-list-block\");\n          var el5 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createComment(\"\");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"                \");\n          dom.appendChild(el4, el5);\n          dom.appendChild(el3, el4);\n          var el4 = dom.createTextNode(\"\\n\\n\");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createComment(\"\");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createTextNode(\"            \");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\\n    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"div\");\n          var el2 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createComment(\"\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"    \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, subexpr = hooks.subexpr, concat = hooks.concat, attribute = hooks.attribute, element = hooks.element, inline = hooks.inline, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element6 = dom.childAt(fragment, [1]);\n          var element7 = dom.childAt(element6, [1, 3]);\n          var element8 = dom.childAt(element6, [3]);\n          var element9 = dom.childAt(element8, [3]);\n          var element10 = dom.childAt(element9, [3]);\n          var element11 = dom.childAt(fragment, [3]);\n          var attrMorph0 = dom.createAttrMorph(element6, 'class');\n          var morph0 = dom.createMorphAt(element8,1,1);\n          var morph1 = dom.createMorphAt(dom.childAt(element9, [1]),3,3);\n          var morph2 = dom.createMorphAt(element10,3,3);\n          var morph3 = dom.createMorphAt(element10,5,5);\n          var morph4 = dom.createMorphAt(dom.childAt(element9, [5]),3,3);\n          var morph5 = dom.createMorphAt(dom.childAt(element9, [7]),1,1);\n          var morph6 = dom.createMorphAt(element9,9,9);\n          var morph7 = dom.createMorphAt(element11,1,1);\n          var attrMorph1 = dom.createAttrMorph(element11, 'class');\n          attribute(env, attrMorph0, element6, \"class\", concat(env, [subexpr(env, context, \"if\", [get(env, context, \"isViewingSubview\"), \"settings-menu-pane-out-left\", \"settings-menu-pane-in\"], {}), \" settings-menu settings-menu-pane\"]));\n          element(env, element7, context, \"action\", [\"closeMenus\"], {});\n          inline(env, morph0, context, \"gh-uploader\", [], {\"uploaded\": \"setCoverImage\", \"canceled\": \"clearCoverImage\", \"description\": \"Add tag image\", \"image\": get(env, context, \"activeTag.image\"), \"uploaderReference\": get(env, context, \"uploaderReference\"), \"tagName\": \"section\"});\n          inline(env, morph1, context, \"gh-input\", [], {\"class\": \"gh-input\", \"type\": \"text\", \"value\": get(env, context, \"activeTagNameScratch\"), \"focus-out\": \"saveActiveTagName\"});\n          inline(env, morph2, context, \"gh-input\", [], {\"class\": \"gh-input\", \"type\": \"text\", \"value\": get(env, context, \"activeTagSlugScratch\"), \"focus-out\": \"saveActiveTagSlug\"});\n          inline(env, morph3, context, \"gh-url-preview\", [], {\"prefix\": \"tag\", \"slug\": get(env, context, \"activeTagSlugScratch\"), \"tagName\": \"p\", \"classNames\": \"description\"});\n          inline(env, morph4, context, \"gh-textarea\", [], {\"class\": \"gh-input\", \"value\": get(env, context, \"activeTagDescriptionScratch\"), \"focus-out\": \"saveActiveTagDescription\"});\n          block(env, morph5, context, \"gh-tab\", [], {\"tagName\": \"li\", \"classNames\": \"nav-list-item\"}, child0, null);\n          block(env, morph6, context, \"unless\", [get(env, context, \"activeTag.isNew\")], {}, child1, null);\n          attribute(env, attrMorph1, element11, \"class\", concat(env, [subexpr(env, context, \"if\", [get(env, context, \"isViewingSubview\"), \"settings-menu-pane-in\", \"settings-menu-pane-out-right\"], {}), \" settings-menu settings-menu-pane\"]));\n          block(env, morph7, context, \"gh-tab-pane\", [], {}, child2, null);\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n        dom.insertBoundary(fragment, null);\n        dom.insertBoundary(fragment, 0);\n        block(env, morph0, context, \"gh-tabs-manager\", [], {\"selected\": \"showSubview\", \"class\": \"settings-menu-container\"}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('ghost/templates/setup', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"                    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"i\");\n          dom.setAttribute(el1,\"class\",\"icon-check\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"span\");\n          dom.setAttribute(el1,\"class\",\"num\");\n          var el2 = dom.createTextNode(\"1\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"                    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"i\");\n          dom.setAttribute(el1,\"class\",\"icon-check\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"span\");\n          dom.setAttribute(el1,\"class\",\"num\");\n          var el2 = dom.createTextNode(\"2\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    var child2 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"                    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"i\");\n          dom.setAttribute(el1,\"class\",\"icon-check\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"span\");\n          dom.setAttribute(el1,\"class\",\"num\");\n          var el2 = dom.createTextNode(\"3\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"gh-flow\");\n        var el2 = dom.createTextNode(\"\\n\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"header\");\n        dom.setAttribute(el2,\"class\",\"gh-flow-head\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"nav\");\n        dom.setAttribute(el3,\"class\",\"gh-flow-nav\");\n        var el4 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"a\");\n        dom.setAttribute(el4,\"class\",\"gh-flow-back\");\n        dom.setAttribute(el4,\"href\",\"#\");\n        var el5 = dom.createElement(\"i\");\n        dom.setAttribute(el5,\"class\",\"icon-arrow-left\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\" Back\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"ol\");\n        var el5 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createComment(\"\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"li\");\n        dom.setAttribute(el5,\"class\",\"divider\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createComment(\"\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"li\");\n        dom.setAttribute(el5,\"class\",\"divider\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createComment(\"\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"            \");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"gh-flow-content-wrap\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createComment(\"\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, block = hooks.block, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element0 = dom.childAt(fragment, [0]);\n        var element1 = dom.childAt(element0, [1, 1, 3]);\n        var morph0 = dom.createMorphAt(element1,1,1);\n        var morph1 = dom.createMorphAt(element1,5,5);\n        var morph2 = dom.createMorphAt(element1,9,9);\n        var morph3 = dom.createMorphAt(dom.childAt(element0, [3]),1,1);\n        block(env, morph0, context, \"gh-activating-list-item\", [], {\"route\": \"setup.one\", \"linkClasses\": \"step\"}, child0, null);\n        block(env, morph1, context, \"gh-activating-list-item\", [], {\"route\": \"setup.two\", \"linkClasses\": \"step\"}, child1, null);\n        block(env, morph2, context, \"gh-activating-list-item\", [], {\"route\": \"setup.three\", \"linkClasses\": \"step\"}, child2, null);\n        content(env, morph3, context, \"outlet\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('ghost/templates/setup/one', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"        Create your account \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"i\");\n          dom.setAttribute(el1,\"class\",\"icon-chevron\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"section\");\n        dom.setAttribute(el1,\"class\",\"gh-flow-content\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"header\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"h1\");\n        var el4 = dom.createTextNode(\"Welcome to \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"strong\");\n        var el5 = dom.createTextNode(\"Ghost\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"!\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"p\");\n        var el4 = dom.createTextNode(\"So far there have been \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"em\");\n        var el5 = dom.createComment(\"\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\" Ghost blogs made by people all over the world. Today we’re making yours.\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"figure\");\n        dom.setAttribute(el2,\"class\",\"gh-flow-screenshot\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"img\");\n        dom.setAttribute(el3,\"alt\",\"Ghost screenshot\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content, subexpr = hooks.subexpr, concat = hooks.concat, attribute = hooks.attribute, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element0 = dom.childAt(fragment, [0]);\n        var element1 = dom.childAt(element0, [3, 1]);\n        var morph0 = dom.createMorphAt(dom.childAt(element0, [1, 3, 1]),0,0);\n        var attrMorph0 = dom.createAttrMorph(element1, 'src');\n        var morph1 = dom.createMorphAt(element0,5,5);\n        content(env, morph0, context, \"model.count\");\n        attribute(env, attrMorph0, element1, \"src\", concat(env, [subexpr(env, context, \"gh-path\", [\"admin\", \"img/install-welcome.png\"], {})]));\n        block(env, morph1, context, \"link-to\", [\"setup.two\"], {\"classNames\": \"btn btn-green btn-lg\"}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('ghost/templates/setup/three', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"      I'll do this later, take me to my blog!\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"section\");\n        dom.setAttribute(el1,\"class\",\"gh-flow-content\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"header\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"h1\");\n        var el4 = dom.createTextNode(\"Invite your team\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"p\");\n        var el4 = dom.createTextNode(\"Ghost works best when shared with others. Collaborate, get feedback on your posts & work together on ideas.\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"img\");\n        dom.setAttribute(el2,\"class\",\"gh-flow-faces\");\n        dom.setAttribute(el2,\"alt\",\"\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"form\");\n        dom.setAttribute(el2,\"class\",\"gh-flow-invite\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"label\");\n        var el4 = dom.createTextNode(\"Enter one email address per line, we’ll handle the rest! \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"i\");\n        dom.setAttribute(el4,\"class\",\"icon-mail\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createComment(\"\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"button\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createComment(\"\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, subexpr = hooks.subexpr, concat = hooks.concat, attribute = hooks.attribute, get = hooks.get, inline = hooks.inline, element = hooks.element, content = hooks.content, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element0 = dom.childAt(fragment, [0]);\n        var element1 = dom.childAt(element0, [3]);\n        var element2 = dom.childAt(element0, [7]);\n        var attrMorph0 = dom.createAttrMorph(element1, 'src');\n        var morph0 = dom.createMorphAt(dom.childAt(element0, [5]),3,3);\n        var morph1 = dom.createMorphAt(element2,1,1);\n        var attrMorph1 = dom.createAttrMorph(element2, 'class');\n        var morph2 = dom.createMorphAt(element0,9,9);\n        attribute(env, attrMorph0, element1, \"src\", concat(env, [subexpr(env, context, \"gh-path\", [\"admin\", \"img/users.png\"], {})]));\n        inline(env, morph0, context, \"textarea\", [], {\"class\": \"gh-input\", \"name\": \"users\", \"placeholder\": \"john@example.com\", \"value\": get(env, context, \"users\")});\n        attribute(env, attrMorph1, element2, \"class\", concat(env, [\"btn btn-default btn-lg btn-block \", get(env, context, \"buttonClass\")]));\n        element(env, element2, context, \"action\", [\"invite\"], {});\n        content(env, morph1, context, \"buttonText\");\n        block(env, morph2, context, \"link-to\", [\"posts\"], {\"class\": \"gh-flow-skip\"}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('ghost/templates/setup/two', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"section\");\n        dom.setAttribute(el1,\"class\",\"gh-flow-content\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"header\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"h1\");\n        var el4 = dom.createTextNode(\"Create your account\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"form\");\n        dom.setAttribute(el2,\"id\",\"setup\");\n        dom.setAttribute(el2,\"class\",\"gh-flow-create\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"input\");\n        dom.setAttribute(el3,\"style\",\"display:none;\");\n        dom.setAttribute(el3,\"type\",\"text\");\n        dom.setAttribute(el3,\"name\",\"fakeusernameremembered\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"input\");\n        dom.setAttribute(el3,\"style\",\"display:none;\");\n        dom.setAttribute(el3,\"type\",\"password\");\n        dom.setAttribute(el3,\"name\",\"fakepasswordremembered\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\\n\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"figure\");\n        dom.setAttribute(el3,\"class\",\"account-image\");\n        var el4 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"div\");\n        dom.setAttribute(el4,\"class\",\"placeholder-img\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createComment(\" TODO: fix/change this to prevent XSS \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"div\");\n        dom.setAttribute(el4,\"id\",\"account-image\");\n        dom.setAttribute(el4,\"class\",\"gravatar-img\");\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"span\");\n        dom.setAttribute(el5,\"class\",\"sr-only\");\n        var el6 = dom.createTextNode(\"User image\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"a\");\n        dom.setAttribute(el4,\"class\",\"edit-account-image\");\n        dom.setAttribute(el4,\"href\",\"#\");\n        var el5 = dom.createElement(\"i\");\n        dom.setAttribute(el5,\"class\",\"icon-photos\");\n        var el6 = dom.createElement(\"span\");\n        dom.setAttribute(el6,\"class\",\"sr-only\");\n        var el7 = dom.createTextNode(\"Upload an image\");\n        dom.appendChild(el6, el7);\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"div\");\n        dom.setAttribute(el3,\"class\",\"form-group\");\n        var el4 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"label\");\n        dom.setAttribute(el4,\"for\",\"email-address\");\n        var el5 = dom.createTextNode(\"Email address\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"span\");\n        dom.setAttribute(el4,\"class\",\"input-icon icon-mail\");\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createComment(\"\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"div\");\n        dom.setAttribute(el3,\"class\",\"form-group\");\n        var el4 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"label\");\n        dom.setAttribute(el4,\"for\",\"full-name\");\n        var el5 = dom.createTextNode(\"Full name\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"span\");\n        dom.setAttribute(el4,\"class\",\"input-icon icon-user\");\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createComment(\"\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"div\");\n        dom.setAttribute(el3,\"class\",\"form-group\");\n        var el4 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"label\");\n        dom.setAttribute(el4,\"for\",\"password\");\n        var el5 = dom.createTextNode(\"Password\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"span\");\n        dom.setAttribute(el4,\"class\",\"input-icon icon-lock\");\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createComment(\"\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"div\");\n        dom.setAttribute(el5,\"class\",\"pw-strength\");\n        var el6 = dom.createTextNode(\"\\n                    \");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createElement(\"div\");\n        dom.setAttribute(el6,\"class\",\"pw-strength-dot\");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createTextNode(\"\\n                    \");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createElement(\"div\");\n        dom.setAttribute(el6,\"class\",\"pw-strength-dot\");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createTextNode(\"\\n                    \");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createElement(\"div\");\n        dom.setAttribute(el6,\"class\",\"pw-strength-dot\");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createTextNode(\"\\n                    \");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createElement(\"div\");\n        dom.setAttribute(el6,\"class\",\"pw-strength-dot\");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createTextNode(\"\\n                    \");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createElement(\"div\");\n        dom.setAttribute(el6,\"class\",\"pw-strength-dot <!--pw-strength-activedot-->\");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"div\");\n        dom.setAttribute(el3,\"class\",\"form-group\");\n        var el4 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"label\");\n        dom.setAttribute(el4,\"for\",\"blog-title\");\n        var el5 = dom.createTextNode(\"Blog title\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"span\");\n        dom.setAttribute(el4,\"class\",\"input-icon icon-content\");\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createComment(\"\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"button\");\n        dom.setAttribute(el2,\"type\",\"submit\");\n        dom.setAttribute(el2,\"class\",\"btn btn-green btn-lg btn-block\");\n        var el3 = dom.createTextNode(\"Last step: Invite your team \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"i\");\n        dom.setAttribute(el3,\"class\",\"icon-chevron\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, subexpr = hooks.subexpr, concat = hooks.concat, attribute = hooks.attribute, get = hooks.get, inline = hooks.inline, element = hooks.element;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element0 = dom.childAt(fragment, [0]);\n        var element1 = dom.childAt(element0, [3]);\n        var element2 = dom.childAt(element1, [5]);\n        var element3 = dom.childAt(element2, [1]);\n        var element4 = dom.childAt(element2, [5]);\n        var element5 = dom.childAt(element0, [5]);\n        var attrMorph0 = dom.createAttrMorph(element3, 'style');\n        var attrMorph1 = dom.createAttrMorph(element4, 'style');\n        var morph0 = dom.createMorphAt(dom.childAt(element1, [7, 3]),1,1);\n        var morph1 = dom.createMorphAt(dom.childAt(element1, [9, 3]),1,1);\n        var morph2 = dom.createMorphAt(dom.childAt(element1, [11, 3]),1,1);\n        var morph3 = dom.createMorphAt(dom.childAt(element1, [13, 3]),1,1);\n        attribute(env, attrMorph0, element3, \"style\", concat(env, [\"background-image: url(\", subexpr(env, context, \"gh-path\", [\"admin\", \"img/ghosticon.jpg\"], {}), \")\"]));\n        attribute(env, attrMorph1, element4, \"style\", concat(env, [get(env, context, \"userImageBackground\")]));\n        inline(env, morph0, context, \"input\", [], {\"type\": \"email\", \"name\": \"email\", \"placeholder\": \"Eg. john@example.com\", \"class\": \"gh-input\", \"autofocus\": \"autofocus\", \"autocorrect\": \"off\", \"value\": get(env, context, \"email\")});\n        inline(env, morph1, context, \"input\", [], {\"type\": \"text\", \"name\": \"name\", \"placeholder\": \"Eg. John H. Watson\", \"class\": \"gh-input\", \"autofocus\": \"autofocus\", \"autocorrect\": \"off\", \"value\": get(env, context, \"name\")});\n        inline(env, morph2, context, \"input\", [], {\"type\": \"password\", \"name\": \"password\", \"placeholder\": \"At least 8 characters\", \"class\": \"gh-input\", \"autofocus\": \"autofocus\", \"autocorrect\": \"off\", \"value\": get(env, context, \"password\")});\n        inline(env, morph3, context, \"input\", [], {\"type\": \"text\", \"name\": \"blog-title\", \"placeholder\": \"Eg. The Daily Awesome\", \"class\": \"gh-input\", \"autofocus\": \"autofocus\", \"autocorrect\": \"off\", \"value\": get(env, context, \"blogTitle\")});\n        element(env, element5, context, \"action\", [\"setup\"], {});\n        element(env, element5, context, \"submitting\", [], {});\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('ghost/templates/signin', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"gh-flow\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"gh-flow-content-wrap\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"section\");\n        dom.setAttribute(el3,\"class\",\"gh-flow-content\");\n        var el4 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"form\");\n        dom.setAttribute(el4,\"id\",\"login\");\n        dom.setAttribute(el4,\"class\",\"gh-signin\");\n        dom.setAttribute(el4,\"method\",\"post\");\n        dom.setAttribute(el4,\"novalidate\",\"novalidate\");\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"div\");\n        dom.setAttribute(el5,\"class\",\"form-group\");\n        var el6 = dom.createTextNode(\"\\n                    \");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createElement(\"span\");\n        dom.setAttribute(el6,\"class\",\"input-icon icon-mail\");\n        var el7 = dom.createTextNode(\"\\n                        \");\n        dom.appendChild(el6, el7);\n        var el7 = dom.createComment(\"\");\n        dom.appendChild(el6, el7);\n        var el7 = dom.createTextNode(\"\\n                    \");\n        dom.appendChild(el6, el7);\n        dom.appendChild(el5, el6);\n        var el6 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"div\");\n        dom.setAttribute(el5,\"class\",\"form-group\");\n        var el6 = dom.createTextNode(\"\\n                    \");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createElement(\"span\");\n        dom.setAttribute(el6,\"class\",\"input-icon icon-lock forgotten-wrap\");\n        var el7 = dom.createTextNode(\"\\n                        \");\n        dom.appendChild(el6, el7);\n        var el7 = dom.createComment(\"\");\n        dom.appendChild(el6, el7);\n        var el7 = dom.createTextNode(\"\\n                        \");\n        dom.appendChild(el6, el7);\n        var el7 = dom.createElement(\"button\");\n        dom.setAttribute(el7,\"type\",\"button\");\n        dom.setAttribute(el7,\"class\",\"forgotten-link btn btn-link\");\n        dom.setAttribute(el7,\"tabindex\",\"4\");\n        var el8 = dom.createTextNode(\"Forgot?\");\n        dom.appendChild(el7, el8);\n        dom.appendChild(el6, el7);\n        var el7 = dom.createTextNode(\"\\n                    \");\n        dom.appendChild(el6, el7);\n        dom.appendChild(el5, el6);\n        var el6 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"button\");\n        dom.setAttribute(el5,\"id\",\"login-button\");\n        dom.setAttribute(el5,\"class\",\"login btn btn-blue btn-block\");\n        dom.setAttribute(el5,\"type\",\"submit\");\n        dom.setAttribute(el5,\"tabindex\",\"3\");\n        var el6 = dom.createTextNode(\"Sign in\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"p\");\n        dom.setAttribute(el4,\"class\",\"main-error\");\n        var el5 = dom.createTextNode(\"The password fairy does not approve\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, element = hooks.element, get = hooks.get, inline = hooks.inline, attribute = hooks.attribute;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element0 = dom.childAt(fragment, [0, 1, 1, 1]);\n        var element1 = dom.childAt(element0, [3, 1]);\n        var element2 = dom.childAt(element1, [3]);\n        var element3 = dom.childAt(element0, [5]);\n        var morph0 = dom.createMorphAt(dom.childAt(element0, [1, 1]),1,1);\n        var morph1 = dom.createMorphAt(element1,1,1);\n        var attrMorph0 = dom.createAttrMorph(element2, 'disabled');\n        var attrMorph1 = dom.createAttrMorph(element3, 'disabled');\n        element(env, element0, context, \"action\", [\"validateAndAuthenticate\"], {\"on\": \"submit\"});\n        inline(env, morph0, context, \"gh-trim-focus-input\", [], {\"class\": \"gh-input email\", \"type\": \"email\", \"placeholder\": \"Email Address\", \"name\": \"identification\", \"autocapitalize\": \"off\", \"autocorrect\": \"off\", \"tabindex\": \"1\", \"value\": get(env, context, \"model.identification\")});\n        inline(env, morph1, context, \"input\", [], {\"class\": \"gh-input password\", \"type\": \"password\", \"placeholder\": \"Password\", \"name\": \"password\", \"tabindex\": \"2\", \"value\": get(env, context, \"model.password\")});\n        attribute(env, attrMorph0, element2, \"disabled\", get(env, context, \"submitting\"));\n        element(env, element2, context, \"action\", [\"forgotten\"], {});\n        attribute(env, attrMorph1, element3, \"disabled\", get(env, context, \"submitting\"));\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('ghost/templates/signup', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"gh-flow\");\n        var el2 = dom.createTextNode(\"\\n\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"gh-flow-content-wrap\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"section\");\n        dom.setAttribute(el3,\"class\",\"gh-flow-content\");\n        var el4 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"header\");\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"h1\");\n        var el6 = dom.createTextNode(\"Create your account\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"form\");\n        dom.setAttribute(el4,\"id\",\"signup\");\n        dom.setAttribute(el4,\"class\",\"gh-flow-create\");\n        dom.setAttribute(el4,\"method\",\"post\");\n        dom.setAttribute(el4,\"novalidate\",\"novalidate\");\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"input\");\n        dom.setAttribute(el5,\"style\",\"display:none;\");\n        dom.setAttribute(el5,\"type\",\"text\");\n        dom.setAttribute(el5,\"name\",\"fakeusernameremembered\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"input\");\n        dom.setAttribute(el5,\"style\",\"display:none;\");\n        dom.setAttribute(el5,\"type\",\"password\");\n        dom.setAttribute(el5,\"name\",\"fakepasswordremembered\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"figure\");\n        dom.setAttribute(el5,\"class\",\"account-image\");\n        var el6 = dom.createTextNode(\"\\n                    \");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createElement(\"div\");\n        dom.setAttribute(el6,\"id\",\"account-image\");\n        dom.setAttribute(el6,\"class\",\"img\");\n        dom.setAttribute(el6,\"style\",\"background-image: url(http://www.gravatar.com/avatar/75e958a6674a7d68fe0d575fb235116c?d=404&s=250)\");\n        var el7 = dom.createTextNode(\"\\n                        \");\n        dom.appendChild(el6, el7);\n        var el7 = dom.createComment(\" fallback to: Ghost/core/shared/img/ghosticon.jpg \");\n        dom.appendChild(el6, el7);\n        var el7 = dom.createTextNode(\"\\n                        \");\n        dom.appendChild(el6, el7);\n        var el7 = dom.createElement(\"span\");\n        dom.setAttribute(el7,\"class\",\"sr-only\");\n        var el8 = dom.createTextNode(\"User imge\");\n        dom.appendChild(el7, el8);\n        dom.appendChild(el6, el7);\n        var el7 = dom.createTextNode(\"\\n                    \");\n        dom.appendChild(el6, el7);\n        dom.appendChild(el5, el6);\n        var el6 = dom.createTextNode(\"\\n                    \");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createElement(\"a\");\n        dom.setAttribute(el6,\"class\",\"edit-account-image\");\n        dom.setAttribute(el6,\"href\",\"#\");\n        var el7 = dom.createElement(\"i\");\n        dom.setAttribute(el7,\"class\",\"icon-photos \");\n        var el8 = dom.createElement(\"span\");\n        dom.setAttribute(el8,\"class\",\"sr-only\");\n        var el9 = dom.createTextNode(\"Upload an image\");\n        dom.appendChild(el8, el9);\n        dom.appendChild(el7, el8);\n        dom.appendChild(el6, el7);\n        dom.appendChild(el5, el6);\n        var el6 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"div\");\n        dom.setAttribute(el5,\"class\",\"form-group\");\n        var el6 = dom.createTextNode(\"\\n                    \");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createElement(\"label\");\n        dom.setAttribute(el6,\"for\",\"email-address\");\n        var el7 = dom.createTextNode(\"Email address\");\n        dom.appendChild(el6, el7);\n        dom.appendChild(el5, el6);\n        var el6 = dom.createTextNode(\"\\n                    \");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createElement(\"span\");\n        dom.setAttribute(el6,\"class\",\"input-icon icon-mail\");\n        var el7 = dom.createTextNode(\"\\n                        \");\n        dom.appendChild(el6, el7);\n        var el7 = dom.createComment(\"\");\n        dom.appendChild(el6, el7);\n        var el7 = dom.createTextNode(\"\\n                    \");\n        dom.appendChild(el6, el7);\n        dom.appendChild(el5, el6);\n        var el6 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"div\");\n        dom.setAttribute(el5,\"class\",\"form-group\");\n        var el6 = dom.createTextNode(\"\\n                    \");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createElement(\"label\");\n        dom.setAttribute(el6,\"for\",\"full-name\");\n        var el7 = dom.createTextNode(\"Full name\");\n        dom.appendChild(el6, el7);\n        dom.appendChild(el5, el6);\n        var el6 = dom.createTextNode(\"\\n                    \");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createElement(\"span\");\n        dom.setAttribute(el6,\"class\",\"input-icon icon-user\");\n        var el7 = dom.createTextNode(\"\\n                        \");\n        dom.appendChild(el6, el7);\n        var el7 = dom.createComment(\"\");\n        dom.appendChild(el6, el7);\n        var el7 = dom.createTextNode(\"\\n                    \");\n        dom.appendChild(el6, el7);\n        dom.appendChild(el5, el6);\n        var el6 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"div\");\n        dom.setAttribute(el5,\"class\",\"form-group\");\n        var el6 = dom.createTextNode(\"\\n                    \");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createElement(\"label\");\n        dom.setAttribute(el6,\"for\",\"password\");\n        var el7 = dom.createTextNode(\"Password\");\n        dom.appendChild(el6, el7);\n        dom.appendChild(el5, el6);\n        var el6 = dom.createTextNode(\"\\n                    \");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createElement(\"span\");\n        dom.setAttribute(el6,\"class\",\"input-icon icon-lock\");\n        var el7 = dom.createTextNode(\"\\n                        \");\n        dom.appendChild(el6, el7);\n        var el7 = dom.createComment(\"\");\n        dom.appendChild(el6, el7);\n        var el7 = dom.createTextNode(\"\\n                        \");\n        dom.appendChild(el6, el7);\n        var el7 = dom.createElement(\"div\");\n        dom.setAttribute(el7,\"class\",\"pw-strength\");\n        var el8 = dom.createTextNode(\"\\n                            \");\n        dom.appendChild(el7, el8);\n        var el8 = dom.createElement(\"div\");\n        dom.setAttribute(el8,\"class\",\"pw-strength-dot\");\n        dom.appendChild(el7, el8);\n        var el8 = dom.createTextNode(\"\\n                            \");\n        dom.appendChild(el7, el8);\n        var el8 = dom.createElement(\"div\");\n        dom.setAttribute(el8,\"class\",\"pw-strength-dot\");\n        dom.appendChild(el7, el8);\n        var el8 = dom.createTextNode(\"\\n                            \");\n        dom.appendChild(el7, el8);\n        var el8 = dom.createElement(\"div\");\n        dom.setAttribute(el8,\"class\",\"pw-strength-dot\");\n        dom.appendChild(el7, el8);\n        var el8 = dom.createTextNode(\"\\n                            \");\n        dom.appendChild(el7, el8);\n        var el8 = dom.createElement(\"div\");\n        dom.setAttribute(el8,\"class\",\"pw-strength-dot\");\n        dom.appendChild(el7, el8);\n        var el8 = dom.createTextNode(\"\\n                            \");\n        dom.appendChild(el7, el8);\n        var el8 = dom.createElement(\"div\");\n        dom.setAttribute(el8,\"class\",\"pw-strength-dot <!--pw-strength-activedot-->\");\n        dom.appendChild(el7, el8);\n        var el8 = dom.createTextNode(\"\\n                        \");\n        dom.appendChild(el7, el8);\n        dom.appendChild(el6, el7);\n        var el7 = dom.createTextNode(\"\\n                    \");\n        dom.appendChild(el6, el7);\n        dom.appendChild(el5, el6);\n        var el6 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"button\");\n        dom.setAttribute(el4,\"type\",\"submit\");\n        dom.setAttribute(el4,\"class\",\"btn btn-green btn-lg btn-block\");\n        var el5 = dom.createTextNode(\"Create Account\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, inline = hooks.inline, attribute = hooks.attribute, element = hooks.element;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element0 = dom.childAt(fragment, [0, 1, 1]);\n        var element1 = dom.childAt(element0, [3]);\n        var element2 = dom.childAt(element0, [5]);\n        var morph0 = dom.createMorphAt(dom.childAt(element1, [7, 3]),1,1);\n        var morph1 = dom.createMorphAt(dom.childAt(element1, [9, 3]),1,1);\n        var morph2 = dom.createMorphAt(dom.childAt(element1, [11, 3]),1,1);\n        var attrMorph0 = dom.createAttrMorph(element2, 'disabled');\n        inline(env, morph0, context, \"input\", [], {\"class\": \"gh-input\", \"type\": \"email\", \"name\": \"email\", \"autocorrect\": \"off\", \"value\": get(env, context, \"model.email\")});\n        inline(env, morph1, context, \"gh-trim-focus-input\", [], {\"class\": \"gh-input\", \"type\": \"text\", \"name\": \"name\", \"autofocus\": \"autofocus\", \"autocorrect\": \"off\", \"value\": get(env, context, \"model.name\")});\n        inline(env, morph2, context, \"input\", [], {\"class\": \"gh-input\", \"type\": \"password\", \"name\": \"password\", \"autofocus\": \"autofocus\", \"autocorrect\": \"off\", \"value\": get(env, context, \"model.password\")});\n        attribute(env, attrMorph0, element2, \"disabled\", get(env, context, \"submitting\"));\n        element(env, element2, context, \"action\", [\"signup\"], {});\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('ghost/templates/team/index', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"Team\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      var child0 = (function() {\n        var child0 = (function() {\n          var child0 = (function() {\n            return {\n              isHTMLBars: true,\n              revision: \"Ember@1.12.1\",\n              blockParams: 0,\n              cachedFragment: null,\n              hasRendered: false,\n              build: function build(dom) {\n                var el0 = dom.createDocumentFragment();\n                var el1 = dom.createTextNode(\"                                    \");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createElement(\"span\");\n                dom.setAttribute(el1,\"class\",\"red\");\n                var el2 = dom.createTextNode(\"Invitation not sent - please try again\");\n                dom.appendChild(el1, el2);\n                dom.appendChild(el0, el1);\n                var el1 = dom.createTextNode(\"\\n\");\n                dom.appendChild(el0, el1);\n                return el0;\n              },\n              render: function render(context, env, contextualElement) {\n                var dom = env.dom;\n                dom.detectNamespace(contextualElement);\n                var fragment;\n                if (env.useFragmentCache && dom.canClone) {\n                  if (this.cachedFragment === null) {\n                    fragment = this.build(dom);\n                    if (this.hasRendered) {\n                      this.cachedFragment = fragment;\n                    } else {\n                      this.hasRendered = true;\n                    }\n                  }\n                  if (this.cachedFragment) {\n                    fragment = dom.cloneNode(this.cachedFragment, true);\n                  }\n                } else {\n                  fragment = this.build(dom);\n                }\n                return fragment;\n              }\n            };\n          }());\n          var child1 = (function() {\n            return {\n              isHTMLBars: true,\n              revision: \"Ember@1.12.1\",\n              blockParams: 0,\n              cachedFragment: null,\n              hasRendered: false,\n              build: function build(dom) {\n                var el0 = dom.createDocumentFragment();\n                var el1 = dom.createTextNode(\"                                    \");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createElement(\"span\");\n                dom.setAttribute(el1,\"class\",\"description\");\n                var el2 = dom.createTextNode(\"Invitation sent: \");\n                dom.appendChild(el1, el2);\n                var el2 = dom.createComment(\"\");\n                dom.appendChild(el1, el2);\n                dom.appendChild(el0, el1);\n                var el1 = dom.createTextNode(\"\\n\");\n                dom.appendChild(el0, el1);\n                return el0;\n              },\n              render: function render(context, env, contextualElement) {\n                var dom = env.dom;\n                var hooks = env.hooks, content = hooks.content;\n                dom.detectNamespace(contextualElement);\n                var fragment;\n                if (env.useFragmentCache && dom.canClone) {\n                  if (this.cachedFragment === null) {\n                    fragment = this.build(dom);\n                    if (this.hasRendered) {\n                      this.cachedFragment = fragment;\n                    } else {\n                      this.hasRendered = true;\n                    }\n                  }\n                  if (this.cachedFragment) {\n                    fragment = dom.cloneNode(this.cachedFragment, true);\n                  }\n                } else {\n                  fragment = this.build(dom);\n                }\n                var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);\n                content(env, morph0, context, \"user.model.created_at\");\n                return fragment;\n              }\n            };\n          }());\n          return {\n            isHTMLBars: true,\n            revision: \"Ember@1.12.1\",\n            blockParams: 1,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"                    \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"div\");\n              dom.setAttribute(el1,\"class\",\"user-list-item\");\n              var el2 = dom.createTextNode(\"\\n                        \");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createElement(\"span\");\n              dom.setAttribute(el2,\"class\",\"user-list-item-icon icon-mail\");\n              var el3 = dom.createTextNode(\"ic\");\n              dom.appendChild(el2, el3);\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"\\n\\n                        \");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createElement(\"div\");\n              dom.setAttribute(el2,\"class\",\"user-list-item-body\");\n              var el3 = dom.createTextNode(\"\\n                            \");\n              dom.appendChild(el2, el3);\n              var el3 = dom.createElement(\"span\");\n              dom.setAttribute(el3,\"class\",\"name\");\n              var el4 = dom.createComment(\"\");\n              dom.appendChild(el3, el4);\n              dom.appendChild(el2, el3);\n              var el3 = dom.createElement(\"br\");\n              dom.appendChild(el2, el3);\n              var el3 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el2, el3);\n              var el3 = dom.createComment(\"\");\n              dom.appendChild(el2, el3);\n              var el3 = dom.createTextNode(\"                        \");\n              dom.appendChild(el2, el3);\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"\\n                        \");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createElement(\"aside\");\n              dom.setAttribute(el2,\"class\",\"user-list-item-aside\");\n              var el3 = dom.createTextNode(\"\\n                            \");\n              dom.appendChild(el2, el3);\n              var el3 = dom.createElement(\"a\");\n              dom.setAttribute(el3,\"class\",\"user-list-action\");\n              dom.setAttribute(el3,\"href\",\"#\");\n              var el4 = dom.createTextNode(\"Revoke\");\n              dom.appendChild(el3, el4);\n              dom.appendChild(el2, el3);\n              var el3 = dom.createTextNode(\"\\n                            \");\n              dom.appendChild(el2, el3);\n              var el3 = dom.createElement(\"a\");\n              dom.setAttribute(el3,\"class\",\"user-list-action\");\n              dom.setAttribute(el3,\"href\",\"#\");\n              var el4 = dom.createTextNode(\"Resend\");\n              dom.appendChild(el3, el4);\n              dom.appendChild(el2, el3);\n              var el3 = dom.createTextNode(\"\\n                        \");\n              dom.appendChild(el2, el3);\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"\\n                    \");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement, blockArguments) {\n              var dom = env.dom;\n              var hooks = env.hooks, set = hooks.set, content = hooks.content, get = hooks.get, block = hooks.block, element = hooks.element;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var element3 = dom.childAt(fragment, [1]);\n              var element4 = dom.childAt(element3, [3]);\n              var element5 = dom.childAt(element3, [5]);\n              var element6 = dom.childAt(element5, [1]);\n              var element7 = dom.childAt(element5, [3]);\n              var morph0 = dom.createMorphAt(dom.childAt(element4, [1]),0,0);\n              var morph1 = dom.createMorphAt(element4,4,4);\n              set(env, context, \"user\", blockArguments[0]);\n              content(env, morph0, context, \"user.email\");\n              block(env, morph1, context, \"if\", [get(env, context, \"user.model.pending\")], {}, child0, child1);\n              element(env, element6, context, \"action\", [\"revoke\"], {});\n              element(env, element7, context, \"action\", [\"resend\"], {});\n              return fragment;\n            }\n          };\n        }());\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.12.1\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"            \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"section\");\n            dom.setAttribute(el1,\"class\",\"user-list invited-users\");\n            var el2 = dom.createTextNode(\"\\n\\n                \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"h4\");\n            dom.setAttribute(el2,\"class\",\"user-list-title\");\n            var el3 = dom.createTextNode(\"Invited users\");\n            dom.appendChild(el2, el3);\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n\\n\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createComment(\"\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n            \");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, block = hooks.block;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),3,3);\n            block(env, morph0, context, \"each\", [get(env, context, \"invitedUsers\")], {\"itemController\": \"team/user\"}, child0, null);\n            return fragment;\n          }\n        };\n      }());\n      var child1 = (function() {\n        var child0 = (function() {\n          var child0 = (function() {\n            var child0 = (function() {\n              return {\n                isHTMLBars: true,\n                revision: \"Ember@1.12.1\",\n                blockParams: 1,\n                cachedFragment: null,\n                hasRendered: false,\n                build: function build(dom) {\n                  var el0 = dom.createDocumentFragment();\n                  var el1 = dom.createTextNode(\"                                \");\n                  dom.appendChild(el0, el1);\n                  var el1 = dom.createElement(\"span\");\n                  var el2 = dom.createComment(\"\");\n                  dom.appendChild(el1, el2);\n                  dom.appendChild(el0, el1);\n                  var el1 = dom.createTextNode(\"\\n\");\n                  dom.appendChild(el0, el1);\n                  return el0;\n                },\n                render: function render(context, env, contextualElement, blockArguments) {\n                  var dom = env.dom;\n                  var hooks = env.hooks, set = hooks.set, get = hooks.get, concat = hooks.concat, attribute = hooks.attribute, content = hooks.content;\n                  dom.detectNamespace(contextualElement);\n                  var fragment;\n                  if (env.useFragmentCache && dom.canClone) {\n                    if (this.cachedFragment === null) {\n                      fragment = this.build(dom);\n                      if (this.hasRendered) {\n                        this.cachedFragment = fragment;\n                      } else {\n                        this.hasRendered = true;\n                      }\n                    }\n                    if (this.cachedFragment) {\n                      fragment = dom.cloneNode(this.cachedFragment, true);\n                    }\n                  } else {\n                    fragment = this.build(dom);\n                  }\n                  var element0 = dom.childAt(fragment, [1]);\n                  var morph0 = dom.createMorphAt(element0,0,0);\n                  var attrMorph0 = dom.createAttrMorph(element0, 'class');\n                  set(env, context, \"role\", blockArguments[0]);\n                  attribute(env, attrMorph0, element0, \"class\", concat(env, [\"role-label \", get(env, context, \"role.lowerCaseName\")]));\n                  content(env, morph0, context, \"role.name\");\n                  return fragment;\n                }\n              };\n            }());\n            return {\n              isHTMLBars: true,\n              revision: \"Ember@1.12.1\",\n              blockParams: 0,\n              cachedFragment: null,\n              hasRendered: false,\n              build: function build(dom) {\n                var el0 = dom.createDocumentFragment();\n                var el1 = dom.createComment(\"\");\n                dom.appendChild(el0, el1);\n                return el0;\n              },\n              render: function render(context, env, contextualElement) {\n                var dom = env.dom;\n                var hooks = env.hooks, get = hooks.get, block = hooks.block;\n                dom.detectNamespace(contextualElement);\n                var fragment;\n                if (env.useFragmentCache && dom.canClone) {\n                  if (this.cachedFragment === null) {\n                    fragment = this.build(dom);\n                    if (this.hasRendered) {\n                      this.cachedFragment = fragment;\n                    } else {\n                      this.hasRendered = true;\n                    }\n                  }\n                  if (this.cachedFragment) {\n                    fragment = dom.cloneNode(this.cachedFragment, true);\n                  }\n                } else {\n                  fragment = this.build(dom);\n                }\n                var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n                dom.insertBoundary(fragment, null);\n                dom.insertBoundary(fragment, 0);\n                block(env, morph0, context, \"each\", [get(env, context, \"user.model.roles\")], {}, child0, null);\n                return fragment;\n              }\n            };\n          }());\n          return {\n            isHTMLBars: true,\n            revision: \"Ember@1.12.1\",\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"                    \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"span\");\n              dom.setAttribute(el1,\"class\",\"user-list-item-figure\");\n              var el2 = dom.createTextNode(\"\\n                        \");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createElement(\"span\");\n              dom.setAttribute(el2,\"class\",\"hidden\");\n              var el3 = dom.createTextNode(\"Photo of \");\n              dom.appendChild(el2, el3);\n              var el3 = dom.createComment(\"\");\n              dom.appendChild(el2, el3);\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"\\n                    \");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\\n                    \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"div\");\n              dom.setAttribute(el1,\"class\",\"user-list-item-body\");\n              var el2 = dom.createTextNode(\"\\n                        \");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createElement(\"span\");\n              dom.setAttribute(el2,\"class\",\"name\");\n              var el3 = dom.createTextNode(\"\\n                            \");\n              dom.appendChild(el2, el3);\n              var el3 = dom.createComment(\"\");\n              dom.appendChild(el2, el3);\n              var el3 = dom.createTextNode(\"\\n                        \");\n              dom.appendChild(el2, el3);\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"\\n                        \");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createElement(\"br\");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"\\n                        \");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createElement(\"span\");\n              dom.setAttribute(el2,\"class\",\"description\");\n              var el3 = dom.createTextNode(\"Last seen: \");\n              dom.appendChild(el2, el3);\n              var el3 = dom.createComment(\"\");\n              dom.appendChild(el2, el3);\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"\\n                    \");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n                    \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"aside\");\n              dom.setAttribute(el1,\"class\",\"user-list-item-aside\");\n              var el2 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createComment(\"\");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"                    \");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, get = hooks.get, attribute = hooks.attribute, content = hooks.content, block = hooks.block;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var element1 = dom.childAt(fragment, [1]);\n              var element2 = dom.childAt(fragment, [3]);\n              var attrMorph0 = dom.createAttrMorph(element1, 'style');\n              var morph0 = dom.createMorphAt(dom.childAt(element1, [1]),1,1);\n              var morph1 = dom.createMorphAt(dom.childAt(element2, [1]),1,1);\n              var morph2 = dom.createMorphAt(dom.childAt(element2, [5]),1,1);\n              var morph3 = dom.createMorphAt(dom.childAt(fragment, [5]),1,1);\n              attribute(env, attrMorph0, element1, \"style\", get(env, context, \"user.userImageBackground\"));\n              content(env, morph0, context, \"user.model.name\");\n              content(env, morph1, context, \"user.model.name\");\n              content(env, morph2, context, \"user.last_login\");\n              block(env, morph3, context, \"unless\", [get(env, context, \"user.model.isAuthor\")], {}, child0, null);\n              return fragment;\n            }\n          };\n        }());\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.12.1\",\n          blockParams: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createComment(\"\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement, blockArguments) {\n            var dom = env.dom;\n            var hooks = env.hooks, set = hooks.set, get = hooks.get, block = hooks.block;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n            dom.insertBoundary(fragment, null);\n            dom.insertBoundary(fragment, 0);\n            set(env, context, \"user\", blockArguments[0]);\n            block(env, morph0, context, \"link-to\", [\"team.user\", get(env, context, \"user.model\")], {\"class\": \"user-list-item\"}, child0, null);\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"section\");\n          dom.setAttribute(el1,\"class\",\"user-list active-users\");\n          var el2 = dom.createTextNode(\"\\n\\n            \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"h4\");\n          dom.setAttribute(el2,\"class\",\"user-list-title\");\n          var el3 = dom.createTextNode(\"Active users\");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n\\n\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createComment(\"\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n          var morph1 = dom.createMorphAt(dom.childAt(fragment, [2]),3,3);\n          dom.insertBoundary(fragment, 0);\n          block(env, morph0, context, \"if\", [get(env, context, \"invitedUsers\")], {}, child0, null);\n          block(env, morph1, context, \"each\", [get(env, context, \"activeUsers\")], {\"itemController\": \"team/user\"}, child1, null);\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"    \");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"header\");\n        dom.setAttribute(el1,\"class\",\"view-header\");\n        var el2 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"section\");\n        dom.setAttribute(el2,\"class\",\"view-actions\");\n        var el3 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"button\");\n        dom.setAttribute(el3,\"class\",\"btn btn-green\");\n        var el4 = dom.createTextNode(\"Invite People\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, block = hooks.block, element = hooks.element;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element8 = dom.childAt(fragment, [1]);\n        var element9 = dom.childAt(element8, [3, 1]);\n        var morph0 = dom.createMorphAt(element8,1,1);\n        var morph1 = dom.createMorphAt(fragment,3,3,contextualElement);\n        dom.insertBoundary(fragment, null);\n        block(env, morph0, context, \"gh-view-title\", [], {\"openMobileMenu\": \"openMobileMenu\"}, child0, null);\n        element(env, element9, context, \"action\", [\"openModal\", \"invite-new-user\"], {});\n        block(env, morph1, context, \"view\", [\"users-list\"], {}, child1, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('ghost/templates/team/user', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.12.1\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"Team\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"        \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\" \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"i\");\n          dom.setAttribute(el1,\"class\",\"icon-arrow-right\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\" \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, block = hooks.block, content = hooks.content;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n          var morph1 = dom.createMorphAt(fragment,5,5,contextualElement);\n          block(env, morph0, context, \"link-to\", [\"team\"], {}, child0, null);\n          content(env, morph1, context, \"user.name\");\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.12.1\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"                    \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"i\");\n            dom.setAttribute(el1,\"class\",\"icon-settings\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n                    \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"span\");\n            dom.setAttribute(el1,\"class\",\"hidden\");\n            var el2 = dom.createTextNode(\"User Settings\");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            return fragment;\n          }\n        };\n      }());\n      var child1 = (function() {\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.12.1\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"                    \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment(\"\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, inline = hooks.inline;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n            inline(env, morph0, context, \"partial\", [\"user-actions-menu\"], {});\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"            \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"span\");\n          dom.setAttribute(el1,\"class\",\"dropdown\");\n          var el2 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createComment(\"\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createComment(\"\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"            \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element0 = dom.childAt(fragment, [1]);\n          var morph0 = dom.createMorphAt(element0,1,1);\n          var morph1 = dom.createMorphAt(element0,2,2);\n          block(env, morph0, context, \"gh-dropdown-button\", [], {\"dropdownName\": \"user-actions-menu\", \"classNames\": \"btn btn-default only-has-icon user-actions-cog\", \"title\": \"User Actions\"}, child0, null);\n          block(env, morph1, context, \"gh-dropdown\", [], {\"name\": \"user-actions-menu\", \"tagName\": \"ul\", \"classNames\": \"user-actions-menu dropdown-menu dropdown-triangle-top-right\"}, child1, null);\n          return fragment;\n        }\n      };\n    }());\n    var child2 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"            \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"class\",\"form-group\");\n          var el2 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"label\");\n          dom.setAttribute(el2,\"for\",\"user-role\");\n          var el3 = dom.createTextNode(\"Role\");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createComment(\"\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"p\");\n          var el3 = dom.createTextNode(\"What permissions should this user have?\");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),3,3);\n          inline(env, morph0, context, \"gh-role-selector\", [], {\"initialValue\": get(env, context, \"user.role\"), \"onChange\": \"changeRole\", \"selectId\": \"user-role\"});\n          return fragment;\n        }\n      };\n    }());\n    var child3 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"            \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"class\",\"form-group\");\n          var el2 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"label\");\n          dom.setAttribute(el2,\"for\",\"user-password-old\");\n          var el3 = dom.createTextNode(\"Old Password\");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createComment(\"\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),3,3);\n          inline(env, morph0, context, \"input\", [], {\"value\": get(env, context, \"user.password\"), \"type\": \"password\", \"id\": \"user-password-old\", \"class\": \"gh-input\"});\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"header\");\n        dom.setAttribute(el1,\"class\",\"view-header\");\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"section\");\n        dom.setAttribute(el2,\"class\",\"view-actions\");\n        var el3 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createComment(\"\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"button\");\n        dom.setAttribute(el3,\"class\",\"btn btn-blue\");\n        var el4 = dom.createTextNode(\"Save\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"view-container settings-user\");\n        var el2 = dom.createTextNode(\"\\n\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"figure\");\n        dom.setAttribute(el2,\"class\",\"user-cover\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"button\");\n        dom.setAttribute(el3,\"class\",\"btn btn-default user-cover-edit js-modal-cover\");\n        var el4 = dom.createTextNode(\"Change Cover\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"form\");\n        dom.setAttribute(el2,\"class\",\"user-profile\");\n        dom.setAttribute(el2,\"novalidate\",\"novalidate\");\n        dom.setAttribute(el2,\"autocomplete\",\"off\");\n        var el3 = dom.createTextNode(\"\\n\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"input\");\n        dom.setAttribute(el3,\"style\",\"display:none;\");\n        dom.setAttribute(el3,\"type\",\"text\");\n        dom.setAttribute(el3,\"name\",\"fakeusernameremembered\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"input\");\n        dom.setAttribute(el3,\"style\",\"display:none;\");\n        dom.setAttribute(el3,\"type\",\"password\");\n        dom.setAttribute(el3,\"name\",\"fakepasswordremembered\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"fieldset\");\n        dom.setAttribute(el3,\"class\",\"user-details-top\");\n        var el4 = dom.createTextNode(\"\\n\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"figure\");\n        dom.setAttribute(el4,\"class\",\"user-image\");\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"div\");\n        dom.setAttribute(el5,\"id\",\"user-image\");\n        dom.setAttribute(el5,\"class\",\"img\");\n        var el6 = dom.createElement(\"span\");\n        dom.setAttribute(el6,\"class\",\"hidden\");\n        var el7 = dom.createComment(\"\");\n        dom.appendChild(el6, el7);\n        var el7 = dom.createTextNode(\"\\\"s Picture\");\n        dom.appendChild(el6, el7);\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"button\");\n        dom.setAttribute(el5,\"type\",\"button\");\n        dom.setAttribute(el5,\"class\",\"edit-user-image js-modal-image\");\n        var el6 = dom.createTextNode(\"Edit Picture\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"div\");\n        dom.setAttribute(el4,\"class\",\"form-group first-form-group\");\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"label\");\n        dom.setAttribute(el5,\"for\",\"user-name\");\n        var el6 = dom.createTextNode(\"Full Name\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createComment(\"\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"p\");\n        var el6 = dom.createTextNode(\"Use your real name so people can recognise you\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\\n        \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"fieldset\");\n        dom.setAttribute(el3,\"class\",\"user-details-bottom\");\n        var el4 = dom.createTextNode(\"\\n\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"div\");\n        dom.setAttribute(el4,\"class\",\"form-group\");\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"label\");\n        dom.setAttribute(el5,\"for\",\"user-slug\");\n        var el6 = dom.createTextNode(\"Slug\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createComment(\"\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"p\");\n        var el6 = dom.createComment(\"\");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createTextNode(\"/author/\");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createComment(\"\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"div\");\n        dom.setAttribute(el4,\"class\",\"form-group\");\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"label\");\n        dom.setAttribute(el5,\"for\",\"user-email\");\n        var el6 = dom.createTextNode(\"Email\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createComment(\"\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"p\");\n        var el6 = dom.createTextNode(\"Used for notifications\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createComment(\"\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"div\");\n        dom.setAttribute(el4,\"class\",\"form-group\");\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"label\");\n        dom.setAttribute(el5,\"for\",\"user-location\");\n        var el6 = dom.createTextNode(\"Location\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createComment(\"\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"p\");\n        var el6 = dom.createTextNode(\"Where in the world do you live?\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"div\");\n        dom.setAttribute(el4,\"class\",\"form-group\");\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"label\");\n        dom.setAttribute(el5,\"for\",\"user-website\");\n        var el6 = dom.createTextNode(\"Website\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createComment(\"\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"p\");\n        var el6 = dom.createTextNode(\"Have a website or blog other than this one? Link it!\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"div\");\n        dom.setAttribute(el4,\"class\",\"form-group bio-container\");\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"label\");\n        dom.setAttribute(el5,\"for\",\"user-bio\");\n        var el6 = dom.createTextNode(\"Bio\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createComment(\"\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"p\");\n        var el6 = dom.createTextNode(\"\\n                    Write about you, in 200 characters or less.\\n                    \");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createComment(\"\");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"hr\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\\n        \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"fieldset\");\n        var el4 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createComment(\"\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"div\");\n        dom.setAttribute(el4,\"class\",\"form-group\");\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"label\");\n        dom.setAttribute(el5,\"for\",\"user-password-new\");\n        var el6 = dom.createTextNode(\"New Password\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createComment(\"\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"div\");\n        dom.setAttribute(el4,\"class\",\"form-group\");\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"label\");\n        dom.setAttribute(el5,\"for\",\"user-new-password-verification\");\n        var el6 = dom.createTextNode(\"Verify Password\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createComment(\"\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"div\");\n        dom.setAttribute(el4,\"class\",\"form-group\");\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"button\");\n        dom.setAttribute(el5,\"type\",\"button\");\n        dom.setAttribute(el5,\"class\",\"btn btn-red button-change-password\");\n        var el6 = dom.createTextNode(\"Change Password\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\\n        \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, block = hooks.block, get = hooks.get, element = hooks.element, attribute = hooks.attribute, content = hooks.content, inline = hooks.inline;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element1 = dom.childAt(fragment, [0]);\n        var element2 = dom.childAt(element1, [3]);\n        var element3 = dom.childAt(element2, [3]);\n        var element4 = dom.childAt(fragment, [2]);\n        var element5 = dom.childAt(element4, [1]);\n        var element6 = dom.childAt(element5, [1]);\n        var element7 = dom.childAt(element4, [3]);\n        var element8 = dom.childAt(element7, [5]);\n        var element9 = dom.childAt(element8, [1]);\n        var element10 = dom.childAt(element9, [1]);\n        var element11 = dom.childAt(element9, [3]);\n        var element12 = dom.childAt(element7, [7]);\n        var element13 = dom.childAt(element12, [1]);\n        var element14 = dom.childAt(element13, [5]);\n        var element15 = dom.childAt(element12, [11]);\n        var element16 = dom.childAt(element7, [9]);\n        var element17 = dom.childAt(element16, [7, 1]);\n        var morph0 = dom.createMorphAt(element1,1,1);\n        var morph1 = dom.createMorphAt(element2,1,1);\n        var attrMorph0 = dom.createAttrMorph(element5, 'style');\n        var attrMorph1 = dom.createAttrMorph(element10, 'style');\n        var morph2 = dom.createMorphAt(dom.childAt(element10, [0]),0,0);\n        var morph3 = dom.createMorphAt(dom.childAt(element8, [3]),3,3);\n        var morph4 = dom.createMorphAt(element13,3,3);\n        var morph5 = dom.createMorphAt(element14,0,0);\n        var morph6 = dom.createMorphAt(element14,2,2);\n        var morph7 = dom.createMorphAt(dom.childAt(element12, [3]),3,3);\n        var morph8 = dom.createMorphAt(element12,5,5);\n        var morph9 = dom.createMorphAt(dom.childAt(element12, [7]),3,3);\n        var morph10 = dom.createMorphAt(dom.childAt(element12, [9]),3,3);\n        var morph11 = dom.createMorphAt(element15,3,3);\n        var morph12 = dom.createMorphAt(dom.childAt(element15, [5]),1,1);\n        var morph13 = dom.createMorphAt(element16,1,1);\n        var morph14 = dom.createMorphAt(dom.childAt(element16, [3]),3,3);\n        var morph15 = dom.createMorphAt(dom.childAt(element16, [5]),3,3);\n        block(env, morph0, context, \"gh-view-title\", [], {\"openMobileMenu\": \"openMobileMenu\"}, child0, null);\n        block(env, morph1, context, \"if\", [get(env, context, \"view.userActionsAreVisible\")], {}, child1, null);\n        element(env, element3, context, \"action\", [\"save\"], {});\n        attribute(env, attrMorph0, element5, \"style\", get(env, context, \"coverImageBackground\"));\n        element(env, element6, context, \"action\", [\"openModal\", \"upload\", get(env, context, \"user\"), \"cover\"], {});\n        attribute(env, attrMorph1, element10, \"style\", get(env, context, \"userImageBackground\"));\n        content(env, morph2, context, \"user.name\");\n        element(env, element11, context, \"action\", [\"openModal\", \"upload\", get(env, context, \"user\"), \"image\"], {});\n        inline(env, morph3, context, \"input\", [], {\"value\": get(env, context, \"user.name\"), \"id\": \"user-name\", \"class\": \"gh-input user-name\", \"placeholder\": \"Full Name\", \"autocorrect\": \"off\"});\n        inline(env, morph4, context, \"gh-input\", [], {\"class\": \"gh-input user-name\", \"id\": \"user-slug\", \"value\": get(env, context, \"slugValue\"), \"name\": \"user\", \"focus-out\": \"updateSlug\", \"placeholder\": \"Slug\", \"selectOnClick\": \"true\", \"autocorrect\": \"off\"});\n        content(env, morph5, context, \"gh-blog-url\");\n        content(env, morph6, context, \"slugValue\");\n        inline(env, morph7, context, \"input\", [], {\"type\": \"email\", \"value\": get(env, context, \"user.email\"), \"id\": \"user-email\", \"class\": \"gh-input\", \"placeholder\": \"Email Address\", \"autocapitalize\": \"off\", \"autocorrect\": \"off\", \"autocomplete\": \"off\"});\n        block(env, morph8, context, \"if\", [get(env, context, \"view.rolesDropdownIsVisible\")], {}, child2, null);\n        inline(env, morph9, context, \"input\", [], {\"type\": \"text\", \"value\": get(env, context, \"user.location\"), \"id\": \"user-location\", \"class\": \"gh-input\"});\n        inline(env, morph10, context, \"input\", [], {\"type\": \"url\", \"value\": get(env, context, \"user.website\"), \"id\": \"user-website\", \"class\": \"gh-input\", \"autocapitalize\": \"off\", \"autocorrect\": \"off\", \"autocomplete\": \"off\"});\n        inline(env, morph11, context, \"textarea\", [], {\"id\": \"user-bio\", \"class\": \"gh-input\", \"value\": get(env, context, \"user.bio\")});\n        inline(env, morph12, context, \"gh-count-characters\", [get(env, context, \"user.bio\")], {});\n        block(env, morph13, context, \"unless\", [get(env, context, \"view.isNotOwnProfile\")], {}, child3, null);\n        inline(env, morph14, context, \"input\", [], {\"value\": get(env, context, \"user.newPassword\"), \"type\": \"password\", \"id\": \"user-password-new\", \"class\": \"gh-input\"});\n        inline(env, morph15, context, \"input\", [], {\"value\": get(env, context, \"user.ne2Password\"), \"type\": \"password\", \"id\": \"user-new-password-verification\", \"class\": \"gh-input\"});\n        element(env, element17, context, \"action\", [\"password\"], {});\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('ghost/tests/helpers/resolver', ['exports', 'ember/resolver', 'ghost/config/environment'], function (exports, Resolver, config) {\n\n    'use strict';\n\n    var resolver = Resolver['default'].create();\n\n    resolver.namespace = {\n        modulePrefix: config['default'].modulePrefix,\n        podModulePrefix: config['default'].podModulePrefix\n    };\n\n    exports['default'] = resolver;\n\n});","define('ghost/tests/helpers/start-app', ['exports', 'ember', 'ghost/app', 'ghost/router', 'ghost/config/environment'], function (exports, Ember, Application, Router, config) {\n\n    'use strict';\n\n    function startApp(attrs) {\n        var application,\n            attributes = Ember['default'].merge({}, config['default'].APP);\n\n        attributes = Ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n        Ember['default'].run(function () {\n            application = Application['default'].create(attributes);\n            application.setupForTesting();\n            application.injectTestHelpers();\n        });\n\n        return application;\n    }\n\n    exports['default'] = startApp;\n\n});","define('ghost/tests/test-helper', ['ghost/tests/helpers/resolver', 'ember-mocha'], function (resolver, ember_mocha) {\n\n\t'use strict';\n\n\tember_mocha.setResolver(resolver['default']);\n\n});","define('ghost/tests/unit/components/gh-trim-focus-input_test', ['ember', 'ember-mocha'], function (Ember, ember_mocha) {\n\n    'use strict';\n\n    ember_mocha.describeComponent('gh-trim-focus-input', function () {\n        ember_mocha.it('trims value on focusOut', function () {\n            var component = this.subject({\n                value: 'some random stuff   '\n            });\n\n            this.render();\n\n            component.$().focusout();\n            expect(component.$().val()).to.equal('some random stuff');\n        });\n\n        ember_mocha.it('does not have the autofocus attribute if not set to focus', function () {\n            var component = this.subject({\n                value: 'some text',\n                focus: false\n            });\n\n            this.render();\n\n            expect(component.$().attr('autofocus')).to.not.be.ok;\n        });\n\n        ember_mocha.it('has the autofocus attribute if set to focus', function () {\n            var component = this.subject({\n                value: 'some text',\n                focus: true\n            });\n\n            this.render();\n\n            expect(component.$().attr('autofocus')).to.be.ok;\n        });\n    });\n\n});","define('ghost/tests/unit/components/gh-url-preview_test', ['ember-mocha'], function (ember_mocha) {\n\n    'use strict';\n\n    ember_mocha.describeComponent('gh-url-preview', function () {\n        ember_mocha.it('generates the correct preview URL with a prefix', function () {\n            var component = this.subject({\n                prefix: 'tag',\n                slug: 'test-slug',\n                tagName: 'p',\n                classNames: 'test-class',\n\n                config: { blogUrl: 'http://my-ghost-blog.com' }\n            });\n\n            this.render();\n\n            expect(component.get('url')).to.equal('my-ghost-blog.com/tag/test-slug/');\n        });\n\n        ember_mocha.it('generates the correct preview URL without a prefix', function () {\n            var component = this.subject({\n                slug: 'test-slug',\n                tagName: 'p',\n                classNames: 'test-class',\n\n                config: { blogUrl: 'http://my-ghost-blog.com' }\n            });\n\n            this.render();\n\n            expect(component.get('url')).to.equal('my-ghost-blog.com/test-slug/');\n        });\n    });\n\n});","define('ghost/tests/unit/controllers/post-settings-menu_test', ['ember', 'ember-mocha'], function (Ember, ember_mocha) {\n\n    'use strict';\n\n    ember_mocha.describeModule('controller:post-settings-menu', {\n        needs: ['controller:application']\n    }, function () {\n        ember_mocha.it('slugValue is one-way bound to model.slug', function () {\n            var controller = this.subject({\n                model: Ember['default'].Object.create({\n                    slug: 'a-slug'\n                })\n            });\n\n            expect(controller.get('model.slug')).to.equal('a-slug');\n            expect(controller.get('slugValue')).to.equal('a-slug');\n\n            Ember['default'].run(function () {\n                controller.set('model.slug', 'changed-slug');\n\n                expect(controller.get('slugValue')).to.equal('changed-slug');\n            });\n\n            Ember['default'].run(function () {\n                controller.set('slugValue', 'changed-directly');\n\n                expect(controller.get('model.slug')).to.equal('changed-slug');\n                expect(controller.get('slugValue')).to.equal('changed-directly');\n            });\n\n            Ember['default'].run(function () {\n                // test that the one-way binding is still in place\n                controller.set('model.slug', 'should-update');\n\n                expect(controller.get('slugValue')).to.equal('should-update');\n            });\n        });\n\n        ember_mocha.it('metaTitleScratch is one-way bound to model.meta_title', function () {\n            var controller = this.subject({\n                model: Ember['default'].Object.create({\n                    meta_title: 'a title'\n                })\n            });\n\n            expect(controller.get('model.meta_title')).to.equal('a title');\n            expect(controller.get('metaTitleScratch')).to.equal('a title');\n\n            Ember['default'].run(function () {\n                controller.set('model.meta_title', 'a different title');\n\n                expect(controller.get('metaTitleScratch')).to.equal('a different title');\n            });\n\n            Ember['default'].run(function () {\n                controller.set('metaTitleScratch', 'changed directly');\n\n                expect(controller.get('model.meta_title')).to.equal('a different title');\n                expect(controller.get('metaTitleScratch')).to.equal('changed directly');\n            });\n\n            Ember['default'].run(function () {\n                // test that the one-way binding is still in place\n                controller.set('model.meta_title', 'should update');\n\n                expect(controller.get('metaTitleScratch')).to.equal('should update');\n            });\n        });\n\n        ember_mocha.it('metaDescriptionScratch is one-way bound to model.meta_description', function () {\n            var controller = this.subject({\n                model: Ember['default'].Object.create({\n                    meta_description: 'a description'\n                })\n            });\n\n            expect(controller.get('model.meta_description')).to.equal('a description');\n            expect(controller.get('metaDescriptionScratch')).to.equal('a description');\n\n            Ember['default'].run(function () {\n                controller.set('model.meta_description', 'a different description');\n\n                expect(controller.get('metaDescriptionScratch')).to.equal('a different description');\n            });\n\n            Ember['default'].run(function () {\n                controller.set('metaDescriptionScratch', 'changed directly');\n\n                expect(controller.get('model.meta_description')).to.equal('a different description');\n                expect(controller.get('metaDescriptionScratch')).to.equal('changed directly');\n            });\n\n            Ember['default'].run(function () {\n                // test that the one-way binding is still in place\n                controller.set('model.meta_description', 'should update');\n\n                expect(controller.get('metaDescriptionScratch')).to.equal('should update');\n            });\n        });\n\n        describe('seoTitle', function () {\n            ember_mocha.it('should be the meta_title if one exists', function () {\n                var controller = this.subject({\n                    model: Ember['default'].Object.create({\n                        meta_title: 'a meta-title',\n                        titleScratch: 'should not be used'\n                    })\n                });\n\n                expect(controller.get('seoTitle')).to.equal('a meta-title');\n            });\n\n            ember_mocha.it('should default to the title if an explicit meta-title does not exist', function () {\n                var controller = this.subject({\n                    model: Ember['default'].Object.create({\n                        titleScratch: 'should be the meta-title'\n                    })\n                });\n\n                expect(controller.get('seoTitle')).to.equal('should be the meta-title');\n            });\n\n            ember_mocha.it('should be the meta_title if both title and meta_title exist', function () {\n                var controller = this.subject({\n                    model: Ember['default'].Object.create({\n                        meta_title: 'a meta-title',\n                        titleScratch: 'a title'\n                    })\n                });\n\n                expect(controller.get('seoTitle')).to.equal('a meta-title');\n            });\n\n            ember_mocha.it('should revert to the title if explicit meta_title is removed', function () {\n                var controller = this.subject({\n                    model: Ember['default'].Object.create({\n                        meta_title: 'a meta-title',\n                        titleScratch: 'a title'\n                    })\n                });\n\n                expect(controller.get('seoTitle')).to.equal('a meta-title');\n\n                Ember['default'].run(function () {\n                    controller.set('model.meta_title', '');\n\n                    expect(controller.get('seoTitle')).to.equal('a title');\n                });\n            });\n\n            ember_mocha.it('should truncate to 70 characters with an appended ellipsis', function () {\n                var longTitle, controller;\n\n                longTitle = new Array(100).join('a');\n                expect(longTitle.length).to.equal(99);\n\n                controller = this.subject({\n                    model: Ember['default'].Object.create()\n                });\n\n                Ember['default'].run(function () {\n                    var expected = longTitle.substr(0, 70) + '&hellip;';\n\n                    controller.set('metaTitleScratch', longTitle);\n\n                    expect(controller.get('seoTitle').toString().length).to.equal(78);\n                    expect(controller.get('seoTitle').toString()).to.equal(expected);\n                });\n            });\n        });\n\n        describe('seoDescription', function () {\n            ember_mocha.it('should be the meta_description if one exists', function () {\n                var controller = this.subject({\n                    model: Ember['default'].Object.create({\n                        meta_description: 'a description'\n                    })\n                });\n\n                expect(controller.get('seoDescription')).to.equal('a description');\n            });\n\n            ember_mocha.it.skip('should be generated from the rendered markdown if not explicitly set', function () {});\n\n            ember_mocha.it('should truncate to 156 characters with an appended ellipsis', function () {\n                var longDescription, controller;\n\n                longDescription = new Array(200).join('a');\n                expect(longDescription.length).to.equal(199);\n\n                controller = this.subject({\n                    model: Ember['default'].Object.create()\n                });\n\n                Ember['default'].run(function () {\n                    var expected = longDescription.substr(0, 156) + '&hellip;';\n\n                    controller.set('metaDescriptionScratch', longDescription);\n\n                    expect(controller.get('seoDescription').toString().length).to.equal(164);\n                    expect(controller.get('seoDescription').toString()).to.equal(expected);\n                });\n            });\n        });\n\n        describe('seoURL', function () {\n            ember_mocha.it('should be the URL of the blog if no post slug exists', function () {\n                var controller = this.subject({\n                    config: Ember['default'].Object.create({ blogUrl: 'http://my-ghost-blog.com' }),\n                    model: Ember['default'].Object.create()\n                });\n\n                expect(controller.get('seoURL')).to.equal('http://my-ghost-blog.com/');\n            });\n\n            ember_mocha.it('should be the URL of the blog plus the post slug', function () {\n                var controller = this.subject({\n                    config: Ember['default'].Object.create({ blogUrl: 'http://my-ghost-blog.com' }),\n                    model: Ember['default'].Object.create({ slug: 'post-slug' })\n                });\n\n                expect(controller.get('seoURL')).to.equal('http://my-ghost-blog.com/post-slug/');\n            });\n\n            ember_mocha.it('should update when the post slug changes', function () {\n                var controller = this.subject({\n                    config: Ember['default'].Object.create({ blogUrl: 'http://my-ghost-blog.com' }),\n                    model: Ember['default'].Object.create({ slug: 'post-slug' })\n                });\n\n                expect(controller.get('seoURL')).to.equal('http://my-ghost-blog.com/post-slug/');\n\n                Ember['default'].run(function () {\n                    controller.set('model.slug', 'changed-slug');\n\n                    expect(controller.get('seoURL')).to.equal('http://my-ghost-blog.com/changed-slug/');\n                });\n            });\n\n            ember_mocha.it('should truncate a long URL to 70 characters with an appended ellipsis', function () {\n                var longSlug,\n                    blogURL = 'http://my-ghost-blog.com',\n                    expected,\n                    controller;\n\n                longSlug = new Array(75).join('a');\n                expect(longSlug.length).to.equal(74);\n\n                controller = this.subject({\n                    config: Ember['default'].Object.create({ blogUrl: blogURL }),\n                    model: Ember['default'].Object.create({ slug: longSlug })\n                });\n\n                expected = blogURL + '/' + longSlug + '/';\n                expected = expected.substr(0, 70) + '&hellip;';\n\n                expect(controller.get('seoURL').toString().length).to.equal(78);\n                expect(controller.get('seoURL').toString()).to.equal(expected);\n            });\n        });\n\n        describe('togglePage', function () {\n            ember_mocha.it('should toggle the page property', function () {\n                var controller = this.subject({\n                    model: Ember['default'].Object.create({\n                        page: false,\n                        isNew: true\n                    })\n                });\n\n                expect(controller.get('model.page')).to.not.be.ok;\n\n                Ember['default'].run(function () {\n                    controller.send('togglePage');\n\n                    expect(controller.get('model.page')).to.be.ok;\n                });\n            });\n\n            ember_mocha.it('should not save the post if it is still new', function () {\n                var controller = this.subject({\n                    model: Ember['default'].Object.create({\n                        page: false,\n                        isNew: true,\n                        save: function save() {\n                            this.incrementProperty('saved');\n                            return Ember['default'].RSVP.resolve();\n                        }\n                    })\n                });\n\n                Ember['default'].run(function () {\n                    controller.send('togglePage');\n\n                    expect(controller.get('model.page')).to.be.ok;\n                    expect(controller.get('model.saved')).to.not.be.ok;\n                });\n            });\n\n            ember_mocha.it('should save the post if it is not new', function () {\n                var controller = this.subject({\n                    model: Ember['default'].Object.create({\n                        page: false,\n                        isNew: false,\n                        save: function save() {\n                            this.incrementProperty('saved');\n                            return Ember['default'].RSVP.resolve();\n                        }\n                    })\n                });\n\n                Ember['default'].run(function () {\n                    controller.send('togglePage');\n\n                    expect(controller.get('model.page')).to.be.ok;\n                    expect(controller.get('model.saved')).to.equal(1);\n                });\n            });\n        });\n\n        describe('toggleFeatured', function () {\n            ember_mocha.it('should toggle the featured property', function () {\n                var controller = this.subject({\n                    model: Ember['default'].Object.create({\n                        featured: false,\n                        isNew: true\n                    })\n                });\n\n                Ember['default'].run(function () {\n                    controller.send('toggleFeatured');\n\n                    expect(controller.get('model.featured')).to.be.ok;\n                });\n            });\n\n            ember_mocha.it('should not save the post if it is still new', function () {\n                var controller = this.subject({\n                    model: Ember['default'].Object.create({\n                        featured: false,\n                        isNew: true,\n                        save: function save() {\n                            this.incrementProperty('saved');\n                            return Ember['default'].RSVP.resolve();\n                        }\n                    })\n                });\n\n                Ember['default'].run(function () {\n                    controller.send('toggleFeatured');\n\n                    expect(controller.get('model.featured')).to.be.ok;\n                    expect(controller.get('model.saved')).to.not.be.ok;\n                });\n            });\n\n            ember_mocha.it('should save the post if it is not new', function () {\n                var controller = this.subject({\n                    model: Ember['default'].Object.create({\n                        featured: false,\n                        isNew: false,\n                        save: function save() {\n                            this.incrementProperty('saved');\n                            return Ember['default'].RSVP.resolve();\n                        }\n                    })\n                });\n\n                Ember['default'].run(function () {\n                    controller.send('toggleFeatured');\n\n                    expect(controller.get('model.featured')).to.be.ok;\n                    expect(controller.get('model.saved')).to.equal(1);\n                });\n            });\n        });\n\n        describe('generateAndSetSlug', function () {\n            ember_mocha.it('should generate a slug and set it on the destination', function (done) {\n                var controller = this.subject({\n                    slugGenerator: Ember['default'].Object.create({\n                        generateSlug: function generateSlug(str) {\n                            return Ember['default'].RSVP.resolve(str + '-slug');\n                        }\n                    }),\n                    model: Ember['default'].Object.create({ slug: '' })\n                });\n\n                Ember['default'].run(function () {\n                    controller.set('model.titleScratch', 'title');\n                    controller.generateAndSetSlug('model.slug');\n\n                    expect(controller.get('model.slug')).to.equal('');\n\n                    Ember['default'].RSVP.resolve(controller.get('lastPromise')).then(function () {\n                        expect(controller.get('model.slug')).to.equal('title-slug');\n\n                        done();\n                    })['catch'](done);\n                });\n            });\n\n            ember_mocha.it('should not set the destination if the title is \"(Untitled)\" and the post already has a slug', function (done) {\n                var controller = this.subject({\n                    slugGenerator: Ember['default'].Object.create({\n                        generateSlug: function generateSlug(str) {\n                            return Ember['default'].RSVP.resolve(str + '-slug');\n                        }\n                    }),\n                    model: Ember['default'].Object.create({\n                        slug: 'whatever'\n                    })\n                });\n\n                expect(controller.get('model.slug')).to.equal('whatever');\n\n                Ember['default'].run(function () {\n                    controller.set('model.titleScratch', 'title');\n\n                    Ember['default'].RSVP.resolve(controller.get('lastPromise')).then(function () {\n                        expect(controller.get('model.slug')).to.equal('whatever');\n\n                        done();\n                    })['catch'](done);\n                });\n            });\n        });\n\n        describe('titleObserver', function () {\n            ember_mocha.it('should invoke generateAndSetSlug if the post is new and a title has not been set', function (done) {\n                var controller = this.subject({\n                    model: Ember['default'].Object.create({ isNew: true }),\n                    invoked: 0,\n                    generateAndSetSlug: function generateAndSetSlug() {\n                        this.incrementProperty('invoked');\n                    }\n                });\n\n                expect(controller.get('invoked')).to.equal(0);\n                expect(controller.get('model.title')).to.not.be.ok;\n\n                Ember['default'].run(function () {\n                    controller.set('model.titleScratch', 'test');\n\n                    controller.titleObserver();\n\n                    // since titleObserver invokes generateAndSetSlug with a delay of 700ms\n                    // we need to make sure this assertion runs after that.\n                    // probably a better way to handle this?\n                    Ember['default'].run.later(function () {\n                        expect(controller.get('invoked')).to.equal(1);\n\n                        done();\n                    }, 800);\n                });\n            });\n\n            ember_mocha.it('should invoke generateAndSetSlug if the post title is \"(Untitled)\"', function (done) {\n                var controller = this.subject({\n                    model: Ember['default'].Object.create({\n                        isNew: false,\n                        title: '(Untitled)'\n                    }),\n                    invoked: 0,\n                    generateAndSetSlug: function generateAndSetSlug() {\n                        this.incrementProperty('invoked');\n                    }\n                });\n\n                expect(controller.get('invoked')).to.equal(0);\n                expect(controller.get('model.title')).to.equal('(Untitled)');\n\n                Ember['default'].run(function () {\n                    controller.set('model.titleScratch', 'test');\n\n                    controller.titleObserver();\n\n                    // since titleObserver invokes generateAndSetSlug with a delay of 700ms\n                    // we need to make sure this assertion runs after that.\n                    // probably a better way to handle this?\n                    Ember['default'].run.later(function () {\n                        expect(controller.get('invoked')).to.equal(1);\n\n                        done();\n                    }, 800);\n                });\n            });\n\n            ember_mocha.it('should not invoke generateAndSetSlug if the post is new but has a title', function (done) {\n                var controller = this.subject({\n                    model: Ember['default'].Object.create({\n                        isNew: true,\n                        title: 'a title'\n                    }),\n                    invoked: 0,\n                    generateAndSetSlug: function generateAndSetSlug() {\n                        this.incrementProperty('invoked');\n                    }\n                });\n\n                expect(controller.get('invoked')).to.equal(0);\n                expect(controller.get('model.title')).to.equal('a title');\n\n                Ember['default'].run(function () {\n                    controller.set('model.titleScratch', 'test');\n\n                    controller.titleObserver();\n\n                    // since titleObserver invokes generateAndSetSlug with a delay of 700ms\n                    // we need to make sure this assertion runs after that.\n                    // probably a better way to handle this?\n                    Ember['default'].run.later(function () {\n                        expect(controller.get('invoked')).to.equal(0);\n\n                        done();\n                    }, 800);\n                });\n            });\n        });\n\n        describe('updateSlug', function () {\n            ember_mocha.it('should reset slugValue to the previous slug when the new slug is blank or unchanged', function () {\n                var controller = this.subject({\n                    model: Ember['default'].Object.create({\n                        slug: 'slug'\n                    })\n                });\n\n                Ember['default'].run(function () {\n                    // unchanged\n                    controller.set('slugValue', 'slug');\n                    controller.send('updateSlug', controller.get('slugValue'));\n\n                    expect(controller.get('model.slug')).to.equal('slug');\n                    expect(controller.get('slugValue')).to.equal('slug');\n                });\n\n                Ember['default'].run(function () {\n                    // unchanged after trim\n                    controller.set('slugValue', 'slug  ');\n                    controller.send('updateSlug', controller.get('slugValue'));\n\n                    expect(controller.get('model.slug')).to.equal('slug');\n                    expect(controller.get('slugValue')).to.equal('slug');\n                });\n\n                Ember['default'].run(function () {\n                    // blank\n                    controller.set('slugValue', '');\n                    controller.send('updateSlug', controller.get('slugValue'));\n\n                    expect(controller.get('model.slug')).to.equal('slug');\n                    expect(controller.get('slugValue')).to.equal('slug');\n                });\n            });\n\n            ember_mocha.it('should not set a new slug if the server-generated slug matches existing slug', function (done) {\n                var controller = this.subject({\n                    slugGenerator: Ember['default'].Object.create({\n                        generateSlug: function generateSlug(str) {\n                            var promise;\n                            promise = Ember['default'].RSVP.resolve(str.split('#')[0]);\n                            this.set('lastPromise', promise);\n                            return promise;\n                        }\n                    }),\n                    model: Ember['default'].Object.create({\n                        slug: 'whatever'\n                    })\n                });\n\n                Ember['default'].run(function () {\n                    controller.set('slugValue', 'whatever#slug');\n                    controller.send('updateSlug', controller.get('slugValue'));\n\n                    Ember['default'].RSVP.resolve(controller.get('lastPromise')).then(function () {\n                        expect(controller.get('model.slug')).to.equal('whatever');\n\n                        done();\n                    })['catch'](done);\n                });\n            });\n\n            ember_mocha.it('should not set a new slug if the only change is to the appended increment value', function (done) {\n                var controller = this.subject({\n                    slugGenerator: Ember['default'].Object.create({\n                        generateSlug: function generateSlug(str) {\n                            var promise;\n                            promise = Ember['default'].RSVP.resolve(str.replace(/[^a-zA-Z]/g, '') + '-2');\n                            this.set('lastPromise', promise);\n                            return promise;\n                        }\n                    }),\n                    model: Ember['default'].Object.create({\n                        slug: 'whatever'\n                    })\n                });\n\n                Ember['default'].run(function () {\n                    controller.set('slugValue', 'whatever!');\n                    controller.send('updateSlug', controller.get('slugValue'));\n\n                    Ember['default'].RSVP.resolve(controller.get('lastPromise')).then(function () {\n                        expect(controller.get('model.slug')).to.equal('whatever');\n\n                        done();\n                    })['catch'](done);\n                });\n            });\n\n            ember_mocha.it('should set the slug if the new slug is different', function (done) {\n                var controller = this.subject({\n                    slugGenerator: Ember['default'].Object.create({\n                        generateSlug: function generateSlug(str) {\n                            var promise;\n                            promise = Ember['default'].RSVP.resolve(str);\n                            this.set('lastPromise', promise);\n                            return promise;\n                        }\n                    }),\n                    model: Ember['default'].Object.create({\n                        slug: 'whatever',\n                        save: Ember['default'].K\n                    })\n                });\n\n                Ember['default'].run(function () {\n                    controller.set('slugValue', 'changed');\n                    controller.send('updateSlug', controller.get('slugValue'));\n\n                    Ember['default'].RSVP.resolve(controller.get('lastPromise')).then(function () {\n                        expect(controller.get('model.slug')).to.equal('changed');\n\n                        done();\n                    })['catch'](done);\n                });\n            });\n\n            ember_mocha.it('should save the post when the slug changes and the post is not new', function (done) {\n                var controller = this.subject({\n                    slugGenerator: Ember['default'].Object.create({\n                        generateSlug: function generateSlug(str) {\n                            var promise;\n                            promise = Ember['default'].RSVP.resolve(str);\n                            this.set('lastPromise', promise);\n                            return promise;\n                        }\n                    }),\n                    model: Ember['default'].Object.create({\n                        slug: 'whatever',\n                        saved: 0,\n                        isNew: false,\n                        save: function save() {\n                            this.incrementProperty('saved');\n                        }\n                    })\n                });\n\n                Ember['default'].run(function () {\n                    controller.set('slugValue', 'changed');\n                    controller.send('updateSlug', controller.get('slugValue'));\n\n                    Ember['default'].RSVP.resolve(controller.get('lastPromise')).then(function () {\n                        expect(controller.get('model.slug')).to.equal('changed');\n                        expect(controller.get('model.saved')).to.equal(1);\n\n                        done();\n                    })['catch'](done);\n                });\n            });\n\n            ember_mocha.it('should not save the post when the slug changes and the post is new', function (done) {\n                var controller = this.subject({\n                    slugGenerator: Ember['default'].Object.create({\n                        generateSlug: function generateSlug(str) {\n                            var promise;\n                            promise = Ember['default'].RSVP.resolve(str);\n                            this.set('lastPromise', promise);\n                            return promise;\n                        }\n                    }),\n                    model: Ember['default'].Object.create({\n                        slug: 'whatever',\n                        saved: 0,\n                        isNew: true,\n                        save: function save() {\n                            this.incrementProperty('saved');\n                        }\n                    })\n                });\n\n                Ember['default'].run(function () {\n                    controller.set('slugValue', 'changed');\n                    controller.send('updateSlug', controller.get('slugValue'));\n\n                    Ember['default'].RSVP.resolve(controller.get('lastPromise')).then(function () {\n                        expect(controller.get('model.slug')).to.equal('changed');\n                        expect(controller.get('model.saved')).to.equal(0);\n\n                        done();\n                    })['catch'](done);\n                });\n            });\n        });\n    });\n\n    // can't test right now because the rendered markdown is being pulled\n    // from the DOM via jquery\n\n});","define('ghost/tests/unit/controllers/settings-general_test', ['ember', 'ember-mocha'], function (Ember, ember_mocha) {\n\n    'use strict';\n\n    ember_mocha.describeModule('controller:settings/general', function () {\n        ember_mocha.it('isDatedPermalinks should be correct', function () {\n            var controller = this.subject({\n                model: Ember['default'].Object.create({\n                    permalinks: '/:year/:month/:day/:slug/'\n                })\n            });\n\n            expect(controller.get('isDatedPermalinks')).to.be.ok;\n\n            Ember['default'].run(function () {\n                controller.set('model.permalinks', '/:slug/');\n\n                expect(controller.get('isDatedPermalinks')).to.not.be.ok;\n            });\n        });\n\n        ember_mocha.it('setting isDatedPermalinks should switch between dated and slug', function () {\n            var controller = this.subject({\n                model: Ember['default'].Object.create({\n                    permalinks: '/:year/:month/:day/:slug/'\n                })\n            });\n\n            Ember['default'].run(function () {\n                controller.set('isDatedPermalinks', false);\n\n                expect(controller.get('isDatedPermalinks')).to.not.be.ok;\n                expect(controller.get('model.permalinks')).to.equal('/:slug/');\n            });\n\n            Ember['default'].run(function () {\n                controller.set('isDatedPermalinks', true);\n\n                expect(controller.get('isDatedPermalinks')).to.be.ok;\n                expect(controller.get('model.permalinks')).to.equal('/:year/:month/:day/:slug/');\n            });\n        });\n\n        ember_mocha.it('themes should be correct', function () {\n            var controller,\n                themes = [];\n\n            themes.push({\n                name: 'casper',\n                active: true,\n                'package': {\n                    name: 'Casper',\n                    version: '1.1.5'\n                }\n            });\n\n            themes.push({\n                name: 'rasper',\n                'package': {\n                    name: 'Rasper',\n                    version: '1.0.0'\n                }\n            });\n\n            controller = this.subject({\n                model: Ember['default'].Object.create({\n                    availableThemes: themes\n                })\n            });\n\n            themes = controller.get('themes');\n            expect(themes).to.be.an.Array;\n            expect(themes.length).to.equal(2);\n            expect(themes.objectAt(0).name).to.equal('casper');\n            expect(themes.objectAt(0).active).to.be.ok;\n            expect(themes.objectAt(0).label).to.equal('Casper - 1.1.5');\n            expect(themes.objectAt(1).name).to.equal('rasper');\n            expect(themes.objectAt(1).active).to.not.be.ok;\n            expect(themes.objectAt(1).label).to.equal('Rasper - 1.0.0');\n        });\n    });\n\n});","define('ghost/tests/unit/helpers/gh-user-can-test', ['ember-mocha', 'ghost/helpers/gh-user-can'], function (ember_mocha, gh_user_can) {\n\n    'use strict';\n\n    describe('GhUserCanHelper', function () {\n        // Mock up roles and test for truthy\n        describe('Owner role', function () {\n            var user = { get: function get(role) {\n                    if (role === 'isOwner') {\n                        return true;\n                    } else if (role === 'isAdmin') {\n                        return false;\n                    } else if (role === 'isEditor') {\n                        return false;\n                    }\n                }\n            };\n            ember_mocha.it(' - can be Admin', function () {\n                var result = gh_user_can.ghUserCan([user, 'admin']);\n                expect(result).to.equal(true);\n            });\n            ember_mocha.it(' - can be Editor', function () {\n                var result = gh_user_can.ghUserCan([user, 'editor']);\n                expect(result).to.equal(true);\n            });\n        });\n\n        describe('Administrator role', function () {\n            var user = {\n                get: function get(role) {\n                    if (role === 'isOwner') {\n                        return false;\n                    } else if (role === 'isAdmin') {\n                        return true;\n                    } else if (role === 'isEditor') {\n                        return false;\n                    }\n                }\n            };\n            ember_mocha.it(' - can be Admin', function () {\n                var result = gh_user_can.ghUserCan([user, 'admin']);\n                expect(result).to.equal(true);\n            });\n            ember_mocha.it(' - can be Editor', function () {\n                var result = gh_user_can.ghUserCan([user, 'editor']);\n                expect(result).to.equal(true);\n            });\n        });\n\n        describe('Editor role', function () {\n            var user = {\n                get: function get(role) {\n                    if (role === 'isOwner') {\n                        return false;\n                    } else if (role === 'isAdmin') {\n                        return false;\n                    } else if (role === 'isEditor') {\n                        return true;\n                    }\n                }\n            };\n            ember_mocha.it(' - cannot be Admin', function () {\n                var result = gh_user_can.ghUserCan([user, 'admin']);\n                expect(result).to.equal(false);\n            });\n            ember_mocha.it(' - can be Editor', function () {\n                var result = gh_user_can.ghUserCan([user, 'editor']);\n                expect(result).to.equal(true);\n            });\n        });\n\n        describe('Author role', function () {\n            var user = {\n                get: function get(role) {\n                    if (role === 'isOwner') {\n                        return false;\n                    } else if (role === 'isAdmin') {\n                        return false;\n                    } else if (role === 'isEditor') {\n                        return false;\n                    }\n                }\n            };\n            ember_mocha.it(' - cannot be Admin', function () {\n                var result = gh_user_can.ghUserCan([user, 'admin']);\n                expect(result).to.equal(false);\n            });\n            ember_mocha.it(' - cannot be Editor', function () {\n                var result = gh_user_can.ghUserCan([user, 'editor']);\n                expect(result).to.equal(false);\n            });\n        });\n    });\n\n});","define('ghost/tests/unit/models/post_test', ['ember', 'ember-mocha'], function (Ember, ember_mocha) {\n\n    'use strict';\n\n    ember_mocha.describeModel('post', {\n        needs: ['model:user', 'model:tag', 'model:role']\n    }, function () {\n        ember_mocha.it('has a validation type of \"post\"', function () {\n            var model = this.subject();\n\n            expect(model.validationType).to.equal('post');\n        });\n\n        ember_mocha.it('isPublished and isDraft are correct', function () {\n            var model = this.subject({\n                status: 'published'\n            });\n\n            expect(model.get('isPublished')).to.be.ok;\n            expect(model.get('isDraft')).to.not.be.ok;\n\n            Ember['default'].run(function () {\n                model.set('status', 'draft');\n\n                expect(model.get('isPublished')).to.not.be.ok;\n                expect(model.get('isDraft')).to.be.ok;\n            });\n        });\n\n        ember_mocha.it('isAuthoredByUser is correct', function () {\n            var model = this.subject({\n                author_id: 15\n            }),\n                user = Ember['default'].Object.create({ id: '15' });\n\n            expect(model.isAuthoredByUser(user)).to.be.ok;\n\n            Ember['default'].run(function () {\n                model.set('author_id', 1);\n\n                expect(model.isAuthoredByUser(user)).to.not.be.ok;\n            });\n        });\n\n        ember_mocha.it('updateTags removes and deletes old tags', function () {\n            var model = this.subject();\n\n            Ember['default'].run(this, function () {\n                var modelTags = model.get('tags'),\n                    tag1 = this.store().createRecord('tag', { id: '1' }),\n                    tag2 = this.store().createRecord('tag', { id: '2' }),\n                    tag3 = this.store().createRecord('tag');\n\n                // During testing a record created without an explicit id will get\n                // an id of 'fixture-n' instead of null\n                tag3.set('id', null);\n\n                modelTags.pushObject(tag1);\n                modelTags.pushObject(tag2);\n                modelTags.pushObject(tag3);\n\n                expect(model.get('tags.length')).to.equal(3);\n\n                model.updateTags();\n\n                expect(model.get('tags.length')).to.equal(2);\n                expect(model.get('tags.firstObject.id')).to.equal('1');\n                expect(model.get('tags').objectAt(1).get('id')).to.equal('2');\n                expect(tag1.get('isDeleted')).to.not.be.ok;\n                expect(tag2.get('isDeleted')).to.not.be.ok;\n                expect(tag3.get('isDeleted')).to.be.ok;\n            });\n        });\n    });\n\n});","define('ghost/tests/unit/models/role_test', ['ember', 'ember-mocha'], function (Ember, ember_mocha) {\n\n    'use strict';\n\n    ember_mocha.describeModel('role', function () {\n        ember_mocha.it('provides a lowercase version of the name', function () {\n            var model = this.subject({\n                name: 'Author'\n            });\n\n            expect(model.get('name')).to.equal('Author');\n            expect(model.get('lowerCaseName')).to.equal('author');\n\n            Ember['default'].run(function () {\n                model.set('name', 'Editor');\n\n                expect(model.get('name')).to.equal('Editor');\n                expect(model.get('lowerCaseName')).to.equal('editor');\n            });\n        });\n    });\n\n});","define('ghost/tests/unit/models/setting_test', ['ember-mocha'], function (ember_mocha) {\n\n    'use strict';\n\n    ember_mocha.describeModel('setting', function () {\n        ember_mocha.it('has a validation type of \"setting\"', function () {\n            var model = this.subject();\n\n            expect(model.get('validationType')).to.equal('setting');\n        });\n    });\n\n});","define('ghost/tests/unit/models/tag_test', ['ember-mocha'], function (ember_mocha) {\n\n    'use strict';\n\n    ember_mocha.describeModel('tag', function () {\n        ember_mocha.it('has a validation type of \"tag\"', function () {\n            var model = this.subject();\n\n            expect(model.get('validationType')).to.equal('tag');\n        });\n    });\n\n});","define('ghost/tests/unit/models/user_test', ['ember', 'ember-mocha'], function (Ember, ember_mocha) {\n\n    'use strict';\n\n    ember_mocha.describeModel('user', {\n        needs: ['model:role']\n    }, function () {\n        ember_mocha.it('has a validation type of \"user\"', function () {\n            var model = this.subject();\n\n            expect(model.get('validationType')).to.equal('user');\n        });\n\n        ember_mocha.it('active property is correct', function () {\n            var model = this.subject({\n                status: 'active'\n            });\n\n            expect(model.get('active')).to.be.ok;\n\n            ['warn-1', 'warn-2', 'warn-3', 'warn-4', 'locked'].forEach(function (status) {\n                Ember['default'].run(function () {\n                    model.set('status', status);\n\n                    expect(model.get('status')).to.be.ok;\n                });\n            });\n\n            Ember['default'].run(function () {\n                model.set('status', 'inactive');\n\n                expect(model.get('active')).to.not.be.ok;\n            });\n\n            Ember['default'].run(function () {\n                model.set('status', 'invited');\n\n                expect(model.get('active')).to.not.be.ok;\n            });\n        });\n\n        ember_mocha.it('invited property is correct', function () {\n            var model = this.subject({\n                status: 'invited'\n            });\n\n            expect(model.get('invited')).to.be.ok;\n\n            Ember['default'].run(function () {\n                model.set('status', 'invited-pending');\n\n                expect(model.get('invited')).to.be.ok;\n            });\n\n            Ember['default'].run(function () {\n                model.set('status', 'active');\n\n                expect(model.get('invited')).to.not.be.ok;\n            });\n\n            Ember['default'].run(function () {\n                model.set('status', 'inactive');\n\n                expect(model.get('invited')).to.not.be.ok;\n            });\n        });\n\n        ember_mocha.it('pending property is correct', function () {\n            var model = this.subject({\n                status: 'invited-pending'\n            });\n\n            expect(model.get('pending')).to.be.ok;\n\n            Ember['default'].run(function () {\n                model.set('status', 'invited');\n\n                expect(model.get('pending')).to.not.be.ok;\n            });\n\n            Ember['default'].run(function () {\n                model.set('status', 'inactive');\n\n                expect(model.get('pending')).to.not.be.ok;\n            });\n        });\n\n        ember_mocha.it('role property is correct', function () {\n            var model, role;\n\n            model = this.subject();\n\n            Ember['default'].run(this, function () {\n                role = this.store().createRecord('role', { name: 'Author' });\n\n                model.get('roles').pushObject(role);\n\n                expect(model.get('role.name')).to.equal('Author');\n            });\n\n            Ember['default'].run(this, function () {\n                role = this.store().createRecord('role', { name: 'Editor' });\n\n                model.set('role', role);\n\n                expect(model.get('role.name')).to.equal('Editor');\n            });\n        });\n\n        ember_mocha.it('isAuthor property is correct', function () {\n            var model = this.subject();\n\n            Ember['default'].run(this, function () {\n                var role = this.store().createRecord('role', { name: 'Author' });\n\n                model.set('role', role);\n\n                expect(model.get('isAuthor')).to.be.ok;\n                expect(model.get('isEditor')).to.not.be.ok;\n                expect(model.get('isAdmin')).to.not.be.ok;\n                expect(model.get('isOwner')).to.not.be.ok;\n            });\n        });\n\n        ember_mocha.it('isEditor property is correct', function () {\n            var model = this.subject();\n\n            Ember['default'].run(this, function () {\n                var role = this.store().createRecord('role', { name: 'Editor' });\n\n                model.set('role', role);\n\n                expect(model.get('isEditor')).to.be.ok;\n                expect(model.get('isAuthor')).to.not.be.ok;\n                expect(model.get('isAdmin')).to.not.be.ok;\n                expect(model.get('isOwner')).to.not.be.ok;\n            });\n        });\n\n        ember_mocha.it('isAdmin property is correct', function () {\n            var model = this.subject();\n\n            Ember['default'].run(this, function () {\n                var role = this.store().createRecord('role', { name: 'Administrator' });\n\n                model.set('role', role);\n\n                expect(model.get('isAdmin')).to.be.ok;\n                expect(model.get('isAuthor')).to.not.be.ok;\n                expect(model.get('isEditor')).to.not.be.ok;\n                expect(model.get('isOwner')).to.not.be.ok;\n            });\n        });\n\n        ember_mocha.it('isOwner property is correct', function () {\n            var model = this.subject();\n\n            Ember['default'].run(this, function () {\n                var role = this.store().createRecord('role', { name: 'Owner' });\n\n                model.set('role', role);\n\n                expect(model.get('isOwner')).to.be.ok;\n                expect(model.get('isAuthor')).to.not.be.ok;\n                expect(model.get('isAdmin')).to.not.be.ok;\n                expect(model.get('isEditor')).to.not.be.ok;\n            });\n        });\n    });\n\n});","define('ghost/tests/unit/utils/ghost-paths_test', ['ghost/utils/ghost-paths'], function (ghostPaths) {\n\n    'use strict';\n\n    describe('ghost-paths', function () {\n        describe('join', function () {\n            var join = ghostPaths['default']().url.join;\n\n            it('should join two or more paths, normalizing slashes', function () {\n                var path;\n\n                path = join('/one/', '/two/');\n                expect(path).to.equal('/one/two/');\n\n                path = join('/one', '/two/');\n                expect(path).to.equal('/one/two/');\n\n                path = join('/one/', 'two/');\n                expect(path).to.equal('/one/two/');\n\n                path = join('/one/', 'two/', '/three/');\n                expect(path).to.equal('/one/two/three/');\n\n                path = join('/one/', 'two', 'three/');\n                expect(path).to.equal('/one/two/three/');\n            });\n\n            it('should not change the slash at the beginning', function () {\n                var path;\n\n                path = join('one/');\n                expect(path).to.equal('one/');\n                path = join('one/', 'two');\n                expect(path).to.equal('one/two/');\n                path = join('/one/', 'two');\n                expect(path).to.equal('/one/two/');\n                path = join('one/', 'two', 'three');\n                expect(path).to.equal('one/two/three/');\n                path = join('/one/', 'two', 'three');\n                expect(path).to.equal('/one/two/three/');\n            });\n\n            it('should always return a slash at the end', function () {\n                var path;\n\n                path = join();\n                expect(path).to.equal('/');\n                path = join('');\n                expect(path).to.equal('/');\n                path = join('one');\n                expect(path).to.equal('one/');\n                path = join('one/');\n                expect(path).to.equal('one/');\n                path = join('one', 'two');\n                expect(path).to.equal('one/two/');\n                path = join('one', 'two/');\n                expect(path).to.equal('one/two/');\n            });\n        });\n    });\n\n});","define('ghost/transforms/moment-date', ['exports', 'ember-data'], function (exports, DS) {\n\n    'use strict';\n\n    var MomentDate = DS['default'].Transform.extend({\n        deserialize: function deserialize(serialized) {\n            if (serialized) {\n                return moment(serialized);\n            }\n            return serialized;\n        },\n        serialize: function serialize(deserialized) {\n            if (deserialized) {\n                return moment(deserialized).toDate();\n            }\n            return deserialized;\n        }\n    });\n    exports['default'] = MomentDate;\n\n});","define('ghost/utils/ajax', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n\n    exports['default'] = getRequestErrorMessage;\n    function getRequestErrorMessage(request, performConcat) {\n        var message, msgDetail;\n\n        // Can't really continue without a request\n        if (!request) {\n            return null;\n        }\n\n        // Seems like a sensible default\n        message = request.statusText;\n\n        // If a non 200 response\n        if (request.status !== 200) {\n            try {\n                // Try to parse out the error, or default to 'Unknown'\n                if (request.responseJSON.errors && Ember['default'].isArray(request.responseJSON.errors)) {\n                    message = request.responseJSON.errors.map(function (errorItem) {\n                        return errorItem.message;\n                    });\n                } else {\n                    message = request.responseJSON.error || 'Unknown Error';\n                }\n            } catch (e) {\n                msgDetail = request.status ? request.status + ' - ' + request.statusText : 'Server was not available';\n                message = 'The server returned an error (' + msgDetail + ').';\n            }\n        }\n\n        if (performConcat && Ember['default'].isArray(message)) {\n            message = message.join('<br />');\n        }\n\n        // return an array of errors by default\n        if (!performConcat && typeof message === 'string') {\n            message = [message];\n        }\n\n        return message;\n    }\n\n});","define('ghost/utils/bind', ['exports'], function (exports) {\n\n    'use strict';\n\n    var slice = Array.prototype.slice;\n\n    function bind() {\n        var args = slice.call(arguments),\n            func = args.shift(),\n            thisArg = args.pop();\n\n        function bound() {\n            return func.apply(thisArg, args);\n        }\n\n        return bound;\n    }\n\n    exports['default'] = bind;\n    /* func, args, thisArg */\n\n});","define('ghost/utils/bound-one-way', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    var BoundOneWay = function BoundOneWay(upstream, transform) {\n        if (typeof transform !== 'function') {\n            // default to the identity function\n            transform = function (value) {\n                return value;\n            };\n        }\n\n        return Ember['default'].computed(upstream, {\n            get: function get() {\n                return transform(this.get(upstream));\n            },\n            set: function set(key, value) {\n                return value;\n            }\n        });\n    };\n\n    exports['default'] = BoundOneWay;\n\n});","define('ghost/utils/caja-sanitizers', ['exports'], function (exports) {\n\n    'use strict';\n\n    /**\n     * google-caja uses url() and id() to verify if the values are allowed.\n     */\n    var url, id;\n\n    /**\n     * Check if URL is allowed\n     * URLs are allowed if they start with http://, https://, or /.\n     */\n    url = function (url) {\n        url = url.toString().replace(/['\"]+/g, '');\n        if (/^https?:\\/\\//.test(url) || /^\\//.test(url)) {\n            return url;\n        }\n    };\n\n    /**\n     * Check if ID is allowed\n     * All ids are allowed at the moment.\n     */\n    id = function (id) {\n        return id;\n    };\n\n    exports['default'] = {\n        url: url,\n        id: id\n    };\n\n});","define('ghost/utils/ctrl-or-cmd', ['exports'], function (exports) {\n\n\t'use strict';\n\n\tvar ctrlOrCmd = navigator.userAgent.indexOf('Mac') !== -1 ? 'command' : 'ctrl';\n\n\texports['default'] = ctrlOrCmd;\n\n});","define('ghost/utils/date-formatting', ['exports'], function (exports) {\n\n    'use strict';\n\n    /* global moment */\n    // jscs: disable disallowSpacesInsideParentheses\n\n    var parseDateFormats, displayDateFormat, verifyTimeStamp, parseDateString, formatDate;\n\n    parseDateFormats = ['DD MMM YY @ HH:mm', 'DD MMM YY HH:mm', 'D MMM YY @ HH:mm', 'D MMM YY HH:mm', 'DD MMM YYYY @ HH:mm', 'DD MMM YYYY HH:mm', 'D MMM YYYY @ HH:mm', 'D MMM YYYY HH:mm', 'DD/MM/YY @ HH:mm', 'DD/MM/YY HH:mm', 'DD/MM/YYYY @ HH:mm', 'DD/MM/YYYY HH:mm', 'DD-MM-YY @ HH:mm', 'DD-MM-YY HH:mm', 'DD-MM-YYYY @ HH:mm', 'DD-MM-YYYY HH:mm', 'YYYY-MM-DD @ HH:mm', 'YYYY-MM-DD HH:mm', 'DD MMM @ HH:mm', 'DD MMM HH:mm', 'D MMM @ HH:mm', 'D MMM HH:mm'];\n\n    displayDateFormat = 'DD MMM YY @ HH:mm';\n\n    // Add missing timestamps\n    verifyTimeStamp = function (dateString) {\n        if (dateString && !dateString.slice(-5).match(/\\d+:\\d\\d/)) {\n            dateString += ' 12:00';\n        }\n        return dateString;\n    };\n\n    // Parses a string to a Moment\n    parseDateString = function (value) {\n        return value ? moment(verifyTimeStamp(value), parseDateFormats, true) : undefined;\n    };\n\n    // Formats a Date or Moment\n    formatDate = function (value) {\n        return verifyTimeStamp(value ? moment(value).format(displayDateFormat) : '');\n    };\n\n    exports.parseDateString = parseDateString;\n    exports.formatDate = formatDate;\n\n});","define('ghost/utils/document-title', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    var documentTitle = function documentTitle() {\n        Ember['default'].Route.reopen({\n            // `titleToken` can either be a static string or a function\n            // that accepts a model object and returns a string (or array\n            // of strings if there are multiple tokens).\n            titleToken: null,\n\n            // `title` can either be a static string or a function\n            // that accepts an array of tokens and returns a string\n            // that will be the document title. The `collectTitleTokens` action\n            // stops bubbling once a route is encountered that has a `title`\n            // defined.\n            title: null,\n\n            _actions: {\n                collectTitleTokens: function collectTitleTokens(tokens) {\n                    var titleToken = this.titleToken,\n                        finalTitle;\n\n                    if (typeof this.titleToken === 'function') {\n                        titleToken = this.titleToken(this.currentModel);\n                    }\n\n                    if (Ember['default'].isArray(titleToken)) {\n                        tokens.unshift.apply(this, titleToken);\n                    } else if (titleToken) {\n                        tokens.unshift(titleToken);\n                    }\n\n                    if (this.title) {\n                        if (typeof this.title === 'function') {\n                            finalTitle = this.title(tokens);\n                        } else {\n                            finalTitle = this.title;\n                        }\n\n                        this.router.setTitle(finalTitle);\n                    } else {\n                        return true;\n                    }\n                }\n            }\n        });\n\n        Ember['default'].Router.reopen({\n            updateTitle: (function () {\n                this.send('collectTitleTokens', []);\n            }).on('didTransition'),\n\n            setTitle: function setTitle(title) {\n                if (Ember['default'].testing) {\n                    this._title = title;\n                } else {\n                    window.document.title = title;\n                }\n            }\n        });\n    };\n\n    exports['default'] = documentTitle;\n\n});","define('ghost/utils/ed-image-manager', ['exports'], function (exports) {\n\n    'use strict';\n\n    var imageMarkdownRegex = /^!(?:\\[([^\\n\\]]*)\\])(?:\\(([^\\n\\]]*)\\))?$/gim;\n\n    // Process the markdown content and find all of the locations where there is an image markdown block\n    function parse(stringToParse) {\n        var m,\n            images = [];\n        while ((m = imageMarkdownRegex.exec(stringToParse)) !== null) {\n            images.push(m);\n        }\n\n        return images;\n    }\n\n    // Loop through all dropzones in the preview and find which one was the target of the upload\n    function getZoneIndex(element) {\n        var zones = document.querySelectorAll('.js-entry-preview .js-drop-zone'),\n            i;\n\n        for (i = 0; i < zones.length; i += 1) {\n            if (zones.item(i) === element) {\n                return i;\n            }\n        }\n\n        return -1;\n    }\n\n    // Figure out the start and end of the selection range for the src in the markdown, so we know what to replace\n    function getSrcRange(content, element) {\n        var images = parse(content),\n            index = getZoneIndex(element),\n            replacement = {};\n\n        if (index > -1) {\n            // [1] matches the alt test, and 2 matches the url between the ()\n            // if the () are missing entirely, which is valid, [2] will be undefined and we'll need to treat this case\n            // a little differently\n            if (images[index][2] === undefined) {\n                replacement.needsParens = true;\n                replacement.start = content.indexOf(']', images[index].index) + 1;\n                replacement.end = replacement.start;\n            } else {\n                replacement.start = content.indexOf('(', images[index].index) + 1;\n                replacement.end = replacement.start + images[index][2].length;\n            }\n            return replacement;\n        }\n\n        return false;\n    }\n\n    exports['default'] = {\n        getSrcRange: getSrcRange\n    };\n\n});","define('ghost/utils/editor-shortcuts', ['exports', 'ghost/utils/ctrl-or-cmd'], function (exports, ctrlOrCmd) {\n\n\t'use strict';\n\n\t// # Editor shortcuts\n\t// Loaded by EditorBaseRoute, which is a shortcuts route\n\t// This map is used to ensure the right action is called by each shortcut\n\tvar shortcuts = {};\n\n\t// General editor shortcuts\n\tshortcuts[ctrlOrCmd['default'] + '+alt+p'] = 'publish';\n\tshortcuts['alt+shift+z'] = 'toggleZenMode';\n\n\t// Markdown Shortcuts\n\n\t// Text\n\tshortcuts['ctrl+alt+u'] = { action: 'editorShortcut', options: { type: 'strike' } };\n\tshortcuts[ctrlOrCmd['default'] + '+b'] = { action: 'editorShortcut', options: { type: 'bold' } };\n\tshortcuts[ctrlOrCmd['default'] + '+i'] = { action: 'editorShortcut', options: { type: 'italic' } };\n\n\tshortcuts['ctrl+u'] = { action: 'editorShortcut', options: { type: 'uppercase' } };\n\tshortcuts['ctrl+shift+u'] = { action: 'editorShortcut', options: { type: 'lowercase' } };\n\tshortcuts['ctrl+alt+shift+u'] = { action: 'editorShortcut', options: { type: 'titlecase' } };\n\tshortcuts[ctrlOrCmd['default'] + '+shift+c'] = { action: 'editorShortcut', options: { type: 'copyHTML' } };\n\tshortcuts[ctrlOrCmd['default'] + '+h'] = { action: 'editorShortcut', options: { type: 'cycleHeaderLevel' } };\n\n\t// Formatting\n\tshortcuts['ctrl+q'] = { action: 'editorShortcut', options: { type: 'blockquote' } };\n\tshortcuts['ctrl+l'] = { action: 'editorShortcut', options: { type: 'list' } };\n\n\t// Insert content\n\tshortcuts['ctrl+shift+1'] = { action: 'editorShortcut', options: { type: 'currentDate' } };\n\tshortcuts[ctrlOrCmd['default'] + '+k'] = { action: 'editorShortcut', options: { type: 'link' } };\n\tshortcuts[ctrlOrCmd['default'] + '+shift+i'] = { action: 'editorShortcut', options: { type: 'image' } };\n\tshortcuts[ctrlOrCmd['default'] + '+shift+k'] = { action: 'editorShortcut', options: { type: 'code' } };\n\n\texports['default'] = shortcuts;\n\n});","define('ghost/utils/ghost-paths', ['exports'], function (exports) {\n\n    'use strict';\n\n    var makeRoute = function makeRoute(root, args) {\n        var slashAtStart, slashAtEnd, parts, route;\n\n        slashAtStart = /^\\//;\n        slashAtEnd = /\\/$/;\n        route = root.replace(slashAtEnd, '');\n        parts = Array.prototype.slice.call(args, 0);\n\n        parts.forEach(function (part) {\n            if (part) {\n                route = [route, part.replace(slashAtStart, '').replace(slashAtEnd, '')].join('/');\n            }\n        });\n        return route += '/';\n    };\n\n    function ghostPaths() {\n        var path = window.location.pathname,\n            subdir = path.substr(0, path.search('/ghost/')),\n            adminRoot = subdir + '/ghost',\n            apiRoot = subdir + '/ghost/api/v0.1';\n\n        function assetUrl(src) {\n            return subdir + src;\n        }\n\n        return {\n            subdir: subdir,\n            blogRoot: subdir + '/',\n            adminRoot: adminRoot,\n            apiRoot: apiRoot,\n\n            url: {\n                admin: function admin() {\n                    return makeRoute(adminRoot, arguments);\n                },\n\n                api: function api() {\n                    return makeRoute(apiRoot, arguments);\n                },\n\n                join: function join() {\n                    if (arguments.length > 1) {\n                        return makeRoute(arguments[0], Array.prototype.slice.call(arguments, 1));\n                    } else if (arguments.length === 1) {\n                        var arg = arguments[0];\n                        return arg.slice(-1) === '/' ? arg : arg + '/';\n                    }\n                    return '/';\n                },\n\n                asset: assetUrl\n            },\n            count: 'https://ghost.org/count/'\n        };\n    }\n\n    exports['default'] = ghostPaths;\n\n});","define('ghost/utils/isFinite', ['exports'], function (exports) {\n\n    'use strict';\n\n    /* globals window */\n\n    // isFinite function from lodash\n\n    function isFinite(value) {\n        return window.isFinite(value) && !window.isNaN(parseFloat(value));\n    }\n\n    exports['default'] = isFinite;\n\n});","define('ghost/utils/isNumber', ['exports'], function (exports) {\n\n  'use strict';\n\n  // isNumber function from lodash\n\n  var toString = Object.prototype.toString;\n\n  function isNumber(value) {\n    return typeof value === 'number' || value && typeof value === 'object' && toString.call(value) === '[object Number]' || false;\n  }\n\n  exports['default'] = isNumber;\n\n});","define('ghost/utils/link-view', ['ember'], function (Ember) {\n\n    'use strict';\n\n    Ember['default'].LinkView.reopen({\n        active: Ember['default'].computed('loadedParams', 'resolvedParams', 'routeArgs', function () {\n            var isActive = this._super();\n\n            Ember['default'].set(this, 'alternateActive', isActive);\n\n            return isActive;\n        }),\n\n        activeClass: Ember['default'].computed('tagName', function () {\n            return this.get('tagName') === 'button' ? '' : 'active';\n        })\n    });\n\n});","define('ghost/utils/mobile', ['exports'], function (exports) {\n\n\t'use strict';\n\n\tvar mobileQuery = matchMedia('(max-width: 800px)');\n\n\texports['default'] = mobileQuery;\n\n});","define('ghost/utils/random-password', ['exports'], function (exports) {\n\n    'use strict';\n\n    /* global generatePassword */\n\n    function randomPassword() {\n        var word = generatePassword(6),\n            randomN = Math.floor(Math.random() * 1000);\n\n        return word + randomN;\n    }\n\n    exports['default'] = randomPassword;\n\n});","define('ghost/utils/set-scroll-classname', ['exports'], function (exports) {\n\n    'use strict';\n\n    // ## scrollShadow\n    // This adds a 'scroll' class to the targeted element when the element is scrolled\n    // `this` is expected to be a jQuery-wrapped element\n    // **target:** The element in which the class is applied. Defaults to scrolled element.\n    // **class-name:** The class which is applied.\n    // **offset:** How far the user has to scroll before the class is applied.\n    var setScrollClassName = function setScrollClassName(options) {\n        var $target = options.target || this,\n            offset = options.offset,\n            className = options.className || 'scrolling';\n\n        if (this.scrollTop() > offset) {\n            $target.addClass(className);\n        } else {\n            $target.removeClass(className);\n        }\n    };\n\n    exports['default'] = setScrollClassName;\n\n});","define('ghost/utils/text-field', ['ember'], function (Ember) {\n\n    'use strict';\n\n    Ember['default'].TextField.reopen({\n        attributeBindings: ['autofocus']\n    });\n\n});","define('ghost/utils/titleize', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    var lowerWords = ['of', 'a', 'the', 'and', 'an', 'or', 'nor', 'but', 'is', 'if', 'then', 'else', 'when', 'at', 'from', 'by', 'on', 'off', 'for', 'in', 'out', 'over', 'to', 'into', 'with'];\n\n    function titleize(input) {\n        var words = input.split(' ').map(function (word, index) {\n            if (index === 0 || lowerWords.indexOf(word) === -1) {\n                word = Ember['default'].String.capitalize(word);\n            }\n\n            return word;\n        });\n\n        return words.join(' ');\n    }\n\n    exports['default'] = titleize;\n\n});","define('ghost/utils/validator-extensions', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    function init() {\n        // Provide a few custom validators\n        //\n        validator.extend('empty', function (str) {\n            return Ember['default'].isBlank(str);\n        });\n\n        validator.extend('notContains', function (str, badString) {\n            return str.indexOf(badString) === -1;\n        });\n    }\n\n    exports['default'] = {\n        init: init\n    };\n\n});","define('ghost/utils/word-count', ['exports'], function (exports) {\n\n    'use strict';\n\n    // jscs: disable\n    /* global XRegExp */\n\n    function wordCount(s) {\n\n        var nonANumLetters = new XRegExp(\"[^\\\\s\\\\d\\\\p{L}]\", \"g\"); // all non-alphanumeric letters regexp\n\n        s = s.replace(/<(.|\\n)*?>/g, \" \"); // strip tags\n        s = s.replace(nonANumLetters, \"\"); // ignore non-alphanumeric letters\n        s = s.replace(/(^\\s*)|(\\s*$)/gi, \"\"); // exclude starting and ending white-space\n        s = s.replace(/\\n /gi, \" \"); // convert newlines to spaces\n        s = s.replace(/\\n+/gi, \" \");\n        s = s.replace(/[ ]{2,}/gi, \" \"); // convert 2 or more spaces to 1\n\n        return s.split(\" \").length;\n    }\n\n    exports['default'] = wordCount;\n\n});","define('ghost/validators/new-user', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    var NewUserValidator = Ember['default'].Object.extend({\n        check: function check(model) {\n            var data = model.getProperties('name', 'email', 'password'),\n                validationErrors = [];\n\n            if (!validator.isLength(data.name, 1)) {\n                validationErrors.push({\n                    message: 'Please enter a name.'\n                });\n            }\n\n            if (!validator.isEmail(data.email)) {\n                validationErrors.push({\n                    message: 'Invalid Email.'\n                });\n            }\n\n            if (!validator.isLength(data.password, 8)) {\n                validationErrors.push({\n                    message: 'Password must be at least 8 characters long.'\n                });\n            }\n\n            return validationErrors;\n        }\n    });\n\n    exports['default'] = NewUserValidator;\n\n});","define('ghost/validators/post', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    var PostValidator = Ember['default'].Object.create({\n        check: function check(model) {\n            var validationErrors = [],\n                data = model.getProperties('title', 'meta_title', 'meta_description');\n\n            if (validator.empty(data.title)) {\n                validationErrors.push({\n                    message: 'You must specify a title for the post.'\n                });\n            }\n\n            if (!validator.isLength(data.meta_title, 0, 150)) {\n                validationErrors.push({\n                    message: 'Meta Title cannot be longer than 150 characters.'\n                });\n            }\n\n            if (!validator.isLength(data.meta_description, 0, 200)) {\n                validationErrors.push({\n                    message: 'Meta Description cannot be longer than 200 characters.'\n                });\n            }\n\n            return validationErrors;\n        }\n    });\n\n    exports['default'] = PostValidator;\n\n});","define('ghost/validators/reset', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    var ResetValidator = Ember['default'].Object.create({\n        check: function check(model) {\n            var p1 = model.get('newPassword'),\n                p2 = model.get('ne2Password'),\n                validationErrors = [];\n\n            if (!validator.equals(p1, p2)) {\n                validationErrors.push({\n                    message: 'The two new passwords don\\'t match.'\n                });\n            }\n\n            if (!validator.isLength(p1, 8)) {\n                validationErrors.push({\n                    message: 'The password is not long enough.'\n                });\n            }\n            return validationErrors;\n        }\n    });\n\n    exports['default'] = ResetValidator;\n\n});","define('ghost/validators/setting', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    var SettingValidator = Ember['default'].Object.create({\n        check: function check(model) {\n            var validationErrors = [],\n                title = model.get('title'),\n                description = model.get('description'),\n                postsPerPage = model.get('postsPerPage'),\n                isPrivate = model.get('isPrivate'),\n                password = model.get('password');\n\n            if (!validator.isLength(title, 0, 150)) {\n                validationErrors.push({ message: 'Title is too long' });\n            }\n\n            if (!validator.isLength(description, 0, 200)) {\n                validationErrors.push({ message: 'Description is too long' });\n            }\n\n            if (isPrivate && password === '') {\n                validationErrors.push({ message: 'Password must be supplied' });\n            }\n\n            if (postsPerPage > 1000) {\n                validationErrors.push({ message: 'The maximum number of posts per page is 1000' });\n            }\n\n            if (postsPerPage < 1) {\n                validationErrors.push({ message: 'The minimum number of posts per page is 1' });\n            }\n\n            if (!validator.isInt(postsPerPage)) {\n                validationErrors.push({ message: 'Posts per page must be a number' });\n            }\n\n            return validationErrors;\n        }\n    });\n\n    exports['default'] = SettingValidator;\n\n});","define('ghost/validators/setup', ['exports', 'ghost/validators/new-user'], function (exports, NewUserValidator) {\n\n    'use strict';\n\n    var SetupValidator = NewUserValidator['default'].extend({\n        check: function check(model) {\n            var data = model.getProperties('blogTitle'),\n                validationErrors = this._super(model);\n\n            if (!validator.isLength(data.blogTitle, 1)) {\n                validationErrors.push({\n                    message: 'Please enter a blog title.'\n                });\n            }\n\n            return validationErrors;\n        }\n    }).create();\n\n    exports['default'] = SetupValidator;\n\n});","define('ghost/validators/signin', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    var SigninValidator = Ember['default'].Object.create({\n        check: function check(model) {\n            var data = model.getProperties('identification', 'password'),\n                validationErrors = [];\n\n            if (validator.empty(data.identification)) {\n                validationErrors.push('Please enter an email');\n            } else if (!validator.isEmail(data.identification)) {\n                validationErrors.push('Invalid Email');\n            }\n\n            if (!validator.isLength(data.password || '', 1)) {\n                validationErrors.push('Please enter a password');\n            }\n\n            return validationErrors;\n        }\n    });\n\n    exports['default'] = SigninValidator;\n\n});","define('ghost/validators/signup', ['exports', 'ghost/validators/new-user'], function (exports, NewUserValidator) {\n\n\t'use strict';\n\n\texports['default'] = NewUserValidator['default'].create();\n\n});","define('ghost/validators/tag-settings', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    var TagSettingsValidator = Ember['default'].Object.create({\n        check: function check(model) {\n            var validationErrors = [],\n                data = model.getProperties('name', 'meta_title', 'meta_description');\n\n            if (validator.empty(data.name)) {\n                validationErrors.push({\n                    message: 'You must specify a name for the tag.'\n                });\n            }\n\n            if (!validator.isLength(data.meta_title, 0, 150)) {\n                validationErrors.push({\n                    message: 'Meta Title cannot be longer than 150 characters.'\n                });\n            }\n\n            if (!validator.isLength(data.meta_description, 0, 200)) {\n                validationErrors.push({\n                    message: 'Meta Description cannot be longer than 200 characters.'\n                });\n            }\n\n            return validationErrors;\n        }\n    });\n\n    exports['default'] = TagSettingsValidator;\n\n});","define('ghost/validators/user', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    var UserValidator = Ember['default'].Object.create({\n        check: function check(model) {\n            var validator = this.validators[model.get('status')];\n\n            if (typeof validator !== 'function') {\n                return [];\n            }\n\n            return validator(model);\n        },\n\n        validators: {\n            invited: function invited(model) {\n                var validationErrors = [],\n                    email = model.get('email'),\n                    roles = model.get('roles');\n\n                if (!validator.isEmail(email)) {\n                    validationErrors.push({ message: 'Please supply a valid email address' });\n                }\n\n                if (roles.length < 1) {\n                    validationErrors.push({ message: 'Please select a role' });\n                }\n\n                return validationErrors;\n            },\n\n            active: function active(model) {\n                var validationErrors = [],\n                    name = model.get('name'),\n                    bio = model.get('bio'),\n                    email = model.get('email'),\n                    location = model.get('location'),\n                    website = model.get('website');\n\n                if (!validator.isLength(name, 0, 150)) {\n                    validationErrors.push({ message: 'Name is too long' });\n                }\n\n                if (!validator.isLength(bio, 0, 200)) {\n                    validationErrors.push({ message: 'Bio is too long' });\n                }\n\n                if (!validator.isEmail(email)) {\n                    validationErrors.push({ message: 'Please supply a valid email address' });\n                }\n\n                if (!validator.isLength(location, 0, 150)) {\n                    validationErrors.push({ message: 'Location is too long' });\n                }\n\n                if (!Ember['default'].isEmpty(website) && (!validator.isURL(website, { require_protocol: false }) || !validator.isLength(website, 0, 2000))) {\n                    validationErrors.push({ message: 'Website is not a valid url' });\n                }\n\n                return validationErrors;\n            }\n        }\n    });\n\n    exports['default'] = UserValidator;\n\n});","define('ghost/views/application', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].View.extend({\n        classNames: 'gh-app',\n\n        toggleSettingsMenuBodyClass: Ember['default'].observer('controller.showSettingsMenu', function () {\n            $('body').toggleClass('settings-menu-expanded', this.get('controller.showSettingsMenu'));\n        })\n    });\n\n});","define('ghost/views/content-preview-content-view', ['exports', 'ember', 'ghost/utils/set-scroll-classname'], function (exports, Ember, setScrollClassName) {\n\n    'use strict';\n\n    var PostContentView = Ember['default'].View.extend({\n        classNames: ['content-preview-content'],\n\n        didInsertElement: function didInsertElement() {\n            var el = this.$();\n            el.on('scroll', Ember['default'].run.bind(el, setScrollClassName['default'], {\n                target: el.closest('.content-preview'),\n                offset: 10\n            }));\n        },\n\n        contentObserver: Ember['default'].observer('controller.content', function () {\n            var el = this.$();\n\n            if (el) {\n                el.closest('.content-preview').scrollTop(0);\n            }\n        }),\n\n        willDestroyElement: function willDestroyElement() {\n            var el = this.$();\n            el.off('scroll');\n        }\n    });\n\n    exports['default'] = PostContentView;\n\n});","define('ghost/views/editor-save-button', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    var EditorSaveButtonView = Ember['default'].View.extend({\n        templateName: 'editor-save-button',\n        tagName: 'section',\n        classNames: ['splitbtn', 'js-publish-splitbutton'],\n\n        // Tracks whether we're going to change the state of the post on save\n        isDangerous: Ember['default'].computed('controller.model.isPublished', 'controller.willPublish', function () {\n            return this.get('controller.model.isPublished') !== this.get('controller.willPublish');\n        }),\n\n        publishText: Ember['default'].computed('controller.model.isPublished', 'controller.postOrPage', function () {\n            return this.get('controller.model.isPublished') ? 'Update ' + this.get('controller.postOrPage') : 'Publish Now';\n        }),\n\n        draftText: Ember['default'].computed('controller.model.isPublished', function () {\n            return this.get('controller.model.isPublished') ? 'Unpublish' : 'Save Draft';\n        }),\n\n        deleteText: Ember['default'].computed('controller.postOrPage', function () {\n            return 'Delete ' + this.get('controller.postOrPage');\n        }),\n\n        saveText: Ember['default'].computed('controller.willPublish', 'publishText', 'draftText', function () {\n            return this.get('controller.willPublish') ? this.get('publishText') : this.get('draftText');\n        })\n    });\n\n    exports['default'] = EditorSaveButtonView;\n\n});","define('ghost/views/editor/edit', ['exports', 'ember', 'ghost/utils/set-scroll-classname'], function (exports, Ember, setScrollClassName) {\n\n    'use strict';\n\n    var EditorViewMixin = Ember['default'].View.extend({\n        tagName: 'section',\n        classNames: ['gh-view'],\n        // create a hook for jQuery logic that will run after\n        // a view and all child views have been rendered,\n        // since didInsertElement runs only when the view's el\n        // has rendered, and not necessarily all child views.\n        //\n        // http://mavilein.github.io/javascript/2013/08/01/Ember-JS-After-Render-Event/\n        // http://emberjs.com/api/classes/Ember.run.html#method_next\n        scheduleAfterRender: function scheduleAfterRender() {\n            Ember['default'].run.scheduleOnce('afterRender', this, this.afterRenderEvent);\n        },\n\n        didInsertElement: function didInsertElement() {\n            this.scheduleAfterRender();\n        },\n\n        // all child views will have rendered when this fires\n        afterRenderEvent: function afterRenderEvent() {\n            var $previewViewPort = this.$('.js-entry-preview-content');\n\n            // cache these elements for use in other methods\n            this.set('$previewViewPort', $previewViewPort);\n            this.set('$previewContent', this.$('.js-rendered-markdown'));\n\n            $previewViewPort.on('scroll', Ember['default'].run.bind($previewViewPort, setScrollClassName['default'], {\n                target: this.$('.js-entry-preview'),\n                offset: 10\n            }));\n        },\n\n        willDestroyElement: function willDestroyElement() {\n            // removes scroll handlers from the view\n            this.get('$previewViewPort').off('scroll');\n        },\n\n        // updated when gh-ed-editor component scrolls\n        editorScrollInfo: null,\n        // updated when markdown is rendered\n        height: null,\n\n        // HTML Preview listens to scrollPosition and updates its scrollTop value\n        // This property receives scrollInfo from the textEditor, and height from the preview pane, and will update the\n        // scrollPosition value such that when either scrolling or typing-at-the-end of the text editor the preview pane\n        // stays in sync\n        scrollPosition: Ember['default'].computed('editorScrollInfo', 'height', function () {\n            if (!this.get('editorScrollInfo')) {\n                return 0;\n            }\n\n            var scrollInfo = this.get('editorScrollInfo'),\n                previewHeight = this.get('$previewContent').height() - this.get('$previewViewPort').height(),\n                previewPosition,\n                ratio;\n\n            ratio = previewHeight / scrollInfo.diff;\n            previewPosition = scrollInfo.top * ratio;\n\n            return previewPosition;\n        })\n    });\n\n    exports['default'] = EditorViewMixin;\n\n});","define('ghost/views/editor/new', ['exports', 'ghost/views/editor/edit'], function (exports, EditorView) {\n\n    'use strict';\n\n    var EditorNewView = EditorView['default'].extend({\n        templateName: 'editor/edit'\n    });\n\n    exports['default'] = EditorNewView;\n\n});","define('ghost/views/paginated-scroll-box', ['exports', 'ember', 'ghost/utils/set-scroll-classname', 'ghost/mixins/pagination-view-infinite-scroll'], function (exports, Ember, setScrollClassName, PaginationViewMixin) {\n\n    'use strict';\n\n    var PaginatedScrollBox = Ember['default'].View.extend(PaginationViewMixin['default'], {\n        /**\n         * attach the scroll class handler event\n         */\n        attachScrollClassHandler: function attachScrollClassHandler() {\n            var el = this.$();\n            el.on('scroll', Ember['default'].run.bind(el, setScrollClassName['default'], {\n                target: el.closest('.content-list'),\n                offset: 10\n            }));\n        },\n\n        didInsertElement: function didInsertElement() {\n            this._super();\n\n            this.attachScrollClassHandler();\n        },\n\n        willDestroyElement: function willDestroyElement() {\n            this._super();\n\n            // removes scroll class handler event\n            this.$().off('scroll');\n        }\n    });\n\n    exports['default'] = PaginatedScrollBox;\n\n});","define('ghost/views/post-item-view', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    var PostItemView = Ember['default'].View.extend({\n        classNameBindings: ['active', 'isFeatured:featured', 'isPage:page'],\n\n        active: null,\n\n        isFeatured: Ember['default'].computed.alias('controller.model.featured'),\n\n        isPage: Ember['default'].computed.alias('controller.model.page'),\n\n        doubleClick: function doubleClick() {\n            this.get('controller').send('openEditor');\n        },\n\n        click: function click() {\n            this.get('controller').send('showPostContent');\n        },\n        scrollIntoView: function scrollIntoView() {\n            if (!this.get('active')) {\n                return;\n            }\n            var element = this.$(),\n                offset = element.offset().top,\n                elementHeight = element.height(),\n                container = Ember['default'].$('.js-content-scrollbox'),\n                containerHeight = container.height(),\n                currentScroll = container.scrollTop(),\n                isBelowTop,\n                isAboveBottom,\n                isOnScreen;\n\n            isAboveBottom = offset < containerHeight;\n            isBelowTop = offset > elementHeight;\n\n            isOnScreen = isBelowTop && isAboveBottom;\n\n            if (!isOnScreen) {\n                // Scroll so that element is centered in container\n                // 40 is the amount of padding on the container\n                container.clearQueue().animate({\n                    scrollTop: currentScroll + offset - 40 - containerHeight / 2\n                });\n            }\n        },\n        willDestroyElement: function willDestroyElement() {\n            // removes the scrollIntoView observer\n            this.removeObserver('active', this, this.scrollIntoView);\n        },\n        didInsertElement: function didInsertElement() {\n            // adds the scrollIntoView observer\n            this.addObserver('active', this, this.scrollIntoView);\n        }\n    });\n\n    exports['default'] = PostItemView;\n\n});","define('ghost/views/post-tags-input', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    var PostTagsInputView = Ember['default'].View.extend({\n        tagName: 'section',\n        elementId: 'entry-tags',\n        classNames: 'publish-bar-inner',\n        classNameBindings: ['hasFocus:focused'],\n\n        hasFocus: false,\n\n        keys: {\n            BACKSPACE: 8,\n            TAB: 9,\n            ENTER: 13,\n            ESCAPE: 27,\n            UP: 38,\n            DOWN: 40,\n            NUMPAD_ENTER: 108\n        },\n\n        didInsertElement: function didInsertElement() {\n            this.get('controller').send('loadAllTags');\n        },\n\n        willDestroyElement: function willDestroyElement() {\n            this.get('controller').send('reset');\n        },\n\n        overlayStyles: Ember['default'].computed('hasFocus', 'controller.suggestions.length', function () {\n            var styles = [],\n                leftPos;\n\n            if (this.get('hasFocus') && this.get('controller.suggestions.length')) {\n                leftPos = this.$().find('#tags').position().left;\n                styles.push('display: block');\n                styles.push('left: ' + leftPos + 'px');\n            } else {\n                styles.push('display: none');\n                styles.push('left', 0);\n            }\n\n            return styles.join(';').htmlSafe();\n        }),\n\n        tagInputView: Ember['default'].TextField.extend({\n            focusIn: function focusIn() {\n                this.get('parentView').set('hasFocus', true);\n            },\n\n            focusOut: function focusOut() {\n                this.get('parentView').set('hasFocus', false);\n            },\n\n            keyPress: function keyPress(event) {\n                // listen to keypress event to handle comma key on international keyboard\n                var controller = this.get('parentView.controller'),\n                    isComma = ','.localeCompare(String.fromCharCode(event.keyCode || event.charCode)) === 0;\n\n                // use localeCompare in case of international keyboard layout\n                if (isComma) {\n                    event.preventDefault();\n\n                    if (controller.get('selectedSuggestion')) {\n                        controller.send('addSelectedSuggestion');\n                    } else {\n                        controller.send('addNewTag');\n                    }\n                }\n            },\n\n            keyDown: function keyDown(event) {\n                var controller = this.get('parentView.controller'),\n                    keys = this.get('parentView.keys'),\n                    hasValue;\n\n                switch (event.keyCode) {\n                    case keys.UP:\n                        event.preventDefault();\n                        controller.send('selectPreviousSuggestion');\n                        break;\n\n                    case keys.DOWN:\n                        event.preventDefault();\n                        controller.send('selectNextSuggestion');\n                        break;\n\n                    case keys.TAB:\n                    case keys.ENTER:\n                    case keys.NUMPAD_ENTER:\n                        if (controller.get('selectedSuggestion')) {\n                            event.preventDefault();\n                            controller.send('addSelectedSuggestion');\n                        } else {\n                            // allow user to tab out of field if input is empty\n                            hasValue = !Ember['default'].isEmpty(this.get('value'));\n                            if (hasValue || event.keyCode !== keys.TAB) {\n                                event.preventDefault();\n                                controller.send('addNewTag');\n                            }\n                        }\n                        break;\n\n                    case keys.BACKSPACE:\n                        if (Ember['default'].isEmpty(this.get('value'))) {\n                            event.preventDefault();\n                            controller.send('deleteLastTag');\n                        }\n                        break;\n\n                    case keys.ESCAPE:\n                        event.preventDefault();\n                        controller.send('reset');\n                        break;\n                }\n            }\n        }),\n\n        suggestionView: Ember['default'].View.extend({\n            tagName: 'li',\n            classNameBindings: 'suggestion.selected',\n\n            suggestion: null,\n\n            // we can't use the 'click' event here as the focusOut event on the\n            // input will fire first\n\n            mouseDown: function mouseDown(event) {\n                event.preventDefault();\n            },\n\n            mouseUp: function mouseUp(event) {\n                event.preventDefault();\n                this.get('parentView.controller').send('addTag', this.get('suggestion.tag'));\n            }\n        }),\n\n        actions: {\n            deleteTag: function deleteTag(tag) {\n                // The view wants to keep focus on the input after a click on a tag\n                Ember['default'].$('.js-tag-input').focus();\n                // Make the controller do the actual work\n                this.get('controller').send('deleteTag', tag);\n            }\n        }\n    });\n\n    exports['default'] = PostTagsInputView;\n\n});","define('ghost/views/posts/index', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    var PostsIndexView = Ember['default'].View.extend({\n        classNames: ['no-posts-box']\n    });\n\n    exports['default'] = PostsIndexView;\n\n});","define('ghost/views/settings/apps', ['exports', 'ghost/views/settings/content-base'], function (exports, BaseView) {\n\n\t'use strict';\n\n\tvar SettingsAppsView = BaseView['default'].extend();\n\n\texports['default'] = SettingsAppsView;\n\n});","define('ghost/views/settings/code-injection', ['exports', 'ghost/views/settings/content-base'], function (exports, BaseView) {\n\n\t'use strict';\n\n\tvar SettingsGeneralView = BaseView['default'].extend();\n\n\texports['default'] = SettingsGeneralView;\n\n});","define('ghost/views/settings/content-base', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    var SettingsView = Ember['default'].View.extend({\n        tagName: 'section',\n        classNames: ['gh-view']\n    });\n\n    exports['default'] = SettingsView;\n\n});","define('ghost/views/settings/general', ['exports', 'ghost/views/settings/content-base'], function (exports, BaseView) {\n\n\t'use strict';\n\n\tvar SettingsGeneralView = BaseView['default'].extend();\n\n\texports['default'] = SettingsGeneralView;\n\n});","define('ghost/views/settings/labs', ['exports', 'ghost/views/settings/content-base'], function (exports, BaseView) {\n\n\t'use strict';\n\n\tvar SettingsLabsView = BaseView['default'].extend();\n\n\texports['default'] = SettingsLabsView;\n\n});","define('ghost/views/settings/navigation', ['exports', 'ember', 'ghost/views/settings/content-base'], function (exports, Ember, BaseView) {\n\n    'use strict';\n\n    var SettingsNavigationView = BaseView['default'].extend({\n\n        didInsertElement: function didInsertElement() {\n            var navContainer = Ember['default'].$('.js-gh-blognav'),\n                navElements = '.gh-blognav-item:not(.gh-blognav-item:last-child)',\n                self = this;\n\n            navContainer.sortable({\n                handle: '.gh-blognav-grab',\n                items: navElements,\n\n                start: function start(event, ui) {\n                    Ember['default'].run(function () {\n                        ui.item.data('start-index', ui.item.index());\n                    });\n                },\n\n                update: function update(event, ui) {\n                    Ember['default'].run(function () {\n                        self.get('controller').send('moveItem', ui.item.data('start-index'), ui.item.index());\n                        ui.item.remove();\n                    });\n                }\n            });\n        },\n\n        willDestroyElement: function willDestroyElement() {\n            Ember['default'].$('.js-gh-blognav').sortable('destroy');\n        }\n\n    });\n\n    exports['default'] = SettingsNavigationView;\n\n});","define('ghost/views/settings/tags', ['exports', 'ghost/views/settings/content-base', 'ghost/mixins/pagination-view-infinite-scroll'], function (exports, BaseView, PaginationScrollMixin) {\n\n\t'use strict';\n\n\tvar SettingsTagsView = BaseView['default'].extend(PaginationScrollMixin['default']);\n\n\texports['default'] = SettingsTagsView;\n\n});","define('ghost/views/settings/tags/settings-menu', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    var TagsSettingsMenuView = Ember['default'].View.extend({\n        saveText: Ember['default'].computed('controller.model.isNew', function () {\n            return this.get('controller.model.isNew') ? 'Add Tag' : 'Save Tag';\n        }),\n\n        // This observer loads and resets the uploader whenever the active tag changes,\n        // ensuring that we can reuse the whole settings menu.\n        updateUploader: Ember['default'].observer('controller.activeTag.image', 'controller.uploaderReference', function () {\n            var uploader = this.get('controller.uploaderReference'),\n                image = this.get('controller.activeTag.image');\n\n            if (uploader && uploader[0]) {\n                if (image) {\n                    uploader[0].uploaderUi.initWithImage();\n                } else {\n                    uploader[0].uploaderUi.reset();\n                }\n            }\n        })\n    });\n\n    exports['default'] = TagsSettingsMenuView;\n\n});","define('ghost/views/team/index', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    var TeamUserIndexView = Ember['default'].View.extend({\n        tagName: 'section',\n        classNames: ['gh-view']\n    });\n\n    exports['default'] = TeamUserIndexView;\n\n});","define('ghost/views/team/user', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    var TeamUserView = Ember['default'].View.extend({\n        tagName: 'section',\n        classNames: ['gh-view'],\n        currentUser: Ember['default'].computed.alias('controller.session.user'),\n\n        isNotOwnProfile: Ember['default'].computed('controller.user.id', 'currentUser.id', function () {\n            return this.get('controller.user.id') !== this.get('currentUser.id');\n        }),\n\n        isNotOwnersProfile: Ember['default'].computed.not('controller.user.isOwner'),\n\n        canAssignRoles: Ember['default'].computed.or('currentUser.isAdmin', 'currentUser.isOwner'),\n\n        canMakeOwner: Ember['default'].computed.and('currentUser.isOwner', 'isNotOwnProfile', 'controller.user.isAdmin'),\n\n        rolesDropdownIsVisible: Ember['default'].computed.and('isNotOwnProfile', 'canAssignRoles', 'isNotOwnersProfile'),\n\n        deleteUserActionIsVisible: Ember['default'].computed('currentUser', 'canAssignRoles', 'controller.user', function () {\n            if (this.get('canAssignRoles') && this.get('isNotOwnProfile') && !this.get('controller.user.isOwner') || this.get('currentUser.isEditor') && (this.get('isNotOwnProfile') || this.get('controller.user.isAuthor'))) {\n                return true;\n            }\n        }),\n\n        userActionsAreVisible: Ember['default'].computed.or('deleteUserActionIsVisible', 'canMakeOwner')\n\n    });\n\n    exports['default'] = TeamUserView;\n\n});","define('ghost/views/users-list', ['exports', 'ember', 'ghost/mixins/pagination-view-infinite-scroll'], function (exports, Ember, PaginationViewMixin) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].View.extend(PaginationViewMixin['default'], {\n        tagName: 'section',\n        classNames: ['js-users-list-view', 'view-content', 'settings-users']\n    });\n\n});","/* jshint ignore:start */\n\n/* jshint ignore:end */\n","/* jshint ignore:start */\n\ndefine('ghost/config/environment', ['ember'], function(Ember) {\n  var prefix = 'ghost';\n/* jshint ignore:start */\n\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = Ember['default'].$('meta[name=\"' + metaName + '\"]').attr('content');\n  var config = JSON.parse(unescape(rawConfig));\n\n  return { 'default': config };\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n/* jshint ignore:end */\n\n});\n\nif (runningTests) {\n  require(\"ghost/tests/test-helper\");\n} else {\n  require(\"ghost/app\")[\"default\"].create({\"LOG_ACTIVE_GENERATION\":true,\"LOG_TRANSITIONS\":true,\"LOG_TRANSITIONS_INTERNAL\":true,\"LOG_VIEW_LOOKUPS\":true,\"name\":\"ghost\",\"version\":\"0.0.0.0d5e5151\"});\n}\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfrRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACphCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClhGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtxldA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3PA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrljtxrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzhOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChzrhCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrrFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjtKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClzKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACljbzFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxxzFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrhRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvgvzrGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClzxxjjpbvHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvpxrvintnjNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnilxhSA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClxppxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClpsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjrzKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACprJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;","file":"ghost.js"}